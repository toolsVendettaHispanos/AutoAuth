{
  "name": "src",
  "type": "directory",
  "children": [
    {
      "name": "ai",
      "type": "directory",
      "children": [
        {
          "name": "dev.ts",
          "type": "file",
          "content": "// Flows will be imported for their side effects in this file.\n"
        },
        {
          "name": "genkit.ts",
          "type": "file",
          "content": "import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"
        }
      ]
    },
    {
      "name": "app",
      "type": "directory",
      "children": [
        {
          "name": "(dashboard)",
          "type": "directory",
          "children": [
            {
              "name": "brawls",
              "type": "directory",
              "children": [
                {
                  "name": "[reportId]",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getBattleReportById } from \"@/lib/data\";\nimport { BrawlDetail } from \"@/components/dashboard/brawls/brawl-detail\";\nimport { PageProps } from \"@/lib/types\";\n\nfunction BrawlDetailLoading() {\n    return (\n        <div className=\"space-y-4 max-w-4xl mx-auto\">\n            <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n            <Skeleton className=\"h-4 w-80 shimmer\" />\n            <div className=\"border rounded-lg p-6 space-y-6\">\n                <div className=\"flex justify-around items-center\">\n                    <Skeleton className=\"h-20 w-20 rounded-full shimmer\" />\n                    <Skeleton className=\"h-10 w-16 shimmer\" />\n                    <Skeleton className=\"h-20 w-20 rounded-full shimmer\" />\n                </div>\n                <Skeleton className=\"h-24 w-full shimmer\" />\n                <Skeleton className=\"h-48 w-full shimmer\" />\n            </div>\n        </div>\n    );\n}\n\nexport default async function BrawlDetailPage({ params }: PageProps<{ reportId: string }>) {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const report = await getBattleReportById(params.reportId);\n    \n    if (!report || (report.attackerId !== user.id && report.defenderId !== user.id)) {\n        return (\n            <div className=\"main-view text-center\">\n                <h2 className=\"text-3xl font-bold tracking-tight\">Informe no encontrado</h2>\n                <p className=\"text-muted-foreground\">\n                    El informe de batalla que buscas no existe o no tienes permiso para verlo.\n                </p>\n            </div>\n        );\n    }\n    \n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<BrawlDetailLoading />}>\n                <BrawlDetail report={report} currentUserId={user.id} />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getBattleReportsForUser } from \"@/lib/data\";\nimport { BrawlsView } from \"@/components/dashboard/brawls/brawls-view\";\n\nfunction BrawlsLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n                    <Skeleton className=\"h-4 w-80 shimmer\" />\n                </div>\n            </div>\n            <div className=\"border rounded-lg p-0\">\n                <div className=\"divide-y\">\n                    {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"p-4 flex items-center space-x-4\">\n                            <Skeleton className=\"h-10 w-10 rounded-full shimmer\" />\n                            <div className=\"space-y-2 flex-1\">\n                                <Skeleton className=\"h-4 w-3/4 shimmer\" />\n                                <Skeleton className=\"h-4 w-1/2 shimmer\" />\n                            </div>\n                            <Skeleton className=\"h-8 w-24 rounded-md shimmer\" />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\n// Este nuevo componente obtiene los datos y los pasa a BrawlsView\nasync function BrawlsContent() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const reports = await getBattleReportsForUser(user.id);\n    return <BrawlsView initialReports={reports} currentUserId={user.id} />;\n}\n\nexport default function BrawlsPage() {\n    return (\n        <div className=\"main-view\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Informes de Batalla</h2>\n                    <p className=\"text-muted-foreground\">\n                        Revisa el historial de tus enfrentamientos.\n                    </p>\n                </div>\n            </div>\n            <Suspense fallback={<BrawlsLoading />}>\n                <BrawlsContent />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "buildings",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { BuildingsView } from \"@/components/dashboard/buildings/buildings-view\";\nimport { calcularPuntosPropiedad } from \"@/lib/formulas/score-formulas\";\n\nfunction BuildingsLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n                    <Skeleton className=\"h-4 w-80 shimmer\" />\n                </div>\n            </div>\n            <div className=\"border rounded-lg p-0\">\n                <div className=\"h-12 w-full bg-muted/50 rounded-t-lg\" />\n                <div className=\"p-4 space-y-3\">\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default async function BuildingsPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const propertiesWithPoints = user.propiedades.map(prop => ({\n        ...prop,\n        puntos: calcularPuntosPropiedad(prop)\n    }));\n    \n    return (\n        <div className=\"main-view\">\n             <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Gesti\u00f3n de Edificios</h2>\n                    <p className=\"text-muted-foreground\">\n                        Administra los nombres y la propiedad principal de tu imperio.\n                    </p>\n                </div>\n            </div>\n            <Suspense fallback={<BuildingsLoading />}>\n                <BuildingsView initialProperties={propertiesWithPoints} />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "espionage",
              "type": "directory",
              "children": [
                {
                  "name": "[reportId]",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getEspionageReportById } from \"@/lib/data\";\nimport { EspionageDetailView } from \"@/components/dashboard/espionage/espionage-detail-view\";\nimport { PageProps } from \"@/lib/types\";\n\nfunction EspionageDetailLoading() {\n    return (\n        <div className=\"space-y-4 max-w-4xl mx-auto\">\n            <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n            <Skeleton className=\"h-4 w-80 shimmer\" />\n            <div className=\"border rounded-lg p-6 space-y-6\">\n                <div className=\"flex justify-around items-center\">\n                    <Skeleton className=\"h-20 w-20 rounded-full shimmer\" />\n                    <Skeleton className=\"h-10 w-16 shimmer\" />\n                    <Skeleton className=\"h-20 w-20 rounded-full shimmer\" />\n                </div>\n                <Skeleton className=\"h-24 w-full shimmer\" />\n                <Skeleton className=\"h-48 w-full shimmer\" />\n            </div>\n        </div>\n    );\n}\n\nexport default async function EspionageDetailPage({ params }: PageProps<{ reportId: string }>) {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const report = await getEspionageReportById(params.reportId);\n    \n    if (!report || (report.attackerId !== user.id && report.defenderId !== user.id)) {\n        return (\n            <div className=\"main-view text-center\">\n                <h2 className=\"text-3xl font-bold tracking-tight\">Informe no encontrado</h2>\n                <p className=\"text-muted-foreground\">\n                    El informe de espionaje que buscas no existe o no tienes permiso para verlo.\n                </p>\n            </div>\n        );\n    }\n    \n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<EspionageDetailLoading />}>\n                <EspionageDetailView report={report} />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getEspionageReportsForUser } from \"@/lib/data\";\nimport { EspionageListView } from \"@/components/dashboard/espionage/espionage-list-view\";\n\nfunction EspionageLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n                    <Skeleton className=\"h-4 w-80 shimmer\" />\n                </div>\n            </div>\n            <div className=\"border rounded-lg p-0\">\n                <div className=\"divide-y\">\n                    {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"p-4 flex items-center space-x-4\">\n                            <Skeleton className=\"h-10 w-10 rounded-full shimmer\" />\n                            <div className=\"space-y-2 flex-1\">\n                                <Skeleton className=\"h-4 w-3/4 shimmer\" />\n                                <Skeleton className=\"h-4 w-1/2 shimmer\" />\n                            </div>\n                            <Skeleton className=\"h-8 w-24 rounded-md shimmer\" />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\n// Este nuevo componente obtiene los datos y los pasa a EspionageListView\nasync function EspionageContent() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n    const reports = await getEspionageReportsForUser(user.id);\n    return <EspionageListView initialReports={reports} currentUserId={user.id} />;\n}\n\nexport default function EspionagePage() {\n    return (\n        <div className=\"main-view\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Informes de Espionaje</h2>\n                    <p className=\"text-muted-foreground\">\n                        Revisa el historial de tus operaciones de inteligencia.\n                    </p>\n                </div>\n            </div>\n            <Suspense fallback={<EspionageLoading />}>\n                <EspionageContent />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "family",
              "type": "directory",
              "children": [
                {
                  "name": "find",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getFamiliesForRanking, getInvitationsForUser } from \"@/lib/data\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { FindFamilyView } from \"@/components/dashboard/family/find-family-view\";\n\nfunction FindFamilyLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <Skeleton className=\"h-10 w-full max-w-md\" />\n            <div className=\"border rounded-md\">\n                <Skeleton className=\"h-12 w-full bg-muted/80\" />\n                <div className=\"p-4 space-y-3\">\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default async function FindFamilyPage() {\n    const user = await getSessionUser();\n    if (!user) redirect('/');\n    if (user.familyMember) redirect('/family'); // Already in a family\n\n    const [families, userInvitations] = await Promise.all([\n        getFamiliesForRanking(0, 100), // Fetch first 100 families for example\n        getInvitationsForUser(user.id)\n    ]);\n\n    return (\n        <div className=\"main-view\">\n             <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Buscar Familia</h2>\n                    <p className=\"text-muted-foreground\">\n                       Encuentra una nueva familia a la que unirte o responde a tus invitaciones.\n                    </p>\n                </div>\n            </div>\n            <Suspense fallback={<FindFamilyLoading />}>\n                <FindFamilyView \n                    families={families} \n                    userInvitations={userInvitations}\n                    currentUserId={user.id}\n                />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                },
                {
                  "name": "global",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getFamilyByIdWithAllMembersData } from \"@/lib/data\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { FamilyGlobalView } from \"@/components/dashboard/family/family-global-view\";\nimport { FullFamily } from \"@/lib/types\";\n\nfunction GlobalViewLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n                 <Skeleton className=\"h-10 w-48\" />\n                 <Skeleton className=\"h-10 w-32\" />\n            </div>\n            <div className=\"border rounded-lg overflow-hidden\">\n                <Skeleton className=\"h-96 w-full\" />\n            </div>\n        </div>\n    );\n}\n\n\nexport default async function FamilyGlobalViewPage() {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember) {\n        redirect('/family');\n    }\n\n    const familyWithDetails = await getFamilyByIdWithAllMembersData(user.familyMember.familyId);\n\n    if (!familyWithDetails) {\n        return <p>Familia no encontrada.</p>;\n    }\n    \n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<GlobalViewLoading />}>\n                <FamilyGlobalView family={familyWithDetails as FullFamily} />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                },
                {
                  "name": "management",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getFamilyById } from \"@/lib/data\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { FamilyManagementView } from \"@/components/dashboard/family/family-management-view\";\nimport { FamilyRole } from \"@prisma/client\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\nfunction ManagementLoading() {\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n                <Skeleton className=\"h-10 w-64\" />\n                <Skeleton className=\"h-10 w-32\" />\n            </div>\n            <Skeleton className=\"h-24 w-full\" />\n            <Card>\n                <CardHeader>\n                    <Skeleton className=\"h-8 w-48\" />\n                </CardHeader>\n                <CardContent>\n                     <div className=\"border rounded-md\">\n                        <Skeleton className=\"h-12 w-full bg-muted/80\" />\n                        <div className=\"p-4 space-y-3\">\n                            <Skeleton className=\"h-10 w-full\" />\n                            <Skeleton className=\"h-10 w-full\" />\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nexport default async function FamilyManagementPage() {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember) {\n        redirect('/family');\n    }\n\n    const isLeader = user.familyMember.role === FamilyRole.LEADER;\n    if (!isLeader) {\n        redirect('/family');\n    }\n\n    const family = await getFamilyById(user.familyMember.familyId);\n\n    if (!family) {\n        redirect('/family');\n    }\n\n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<ManagementLoading />}>\n                <FamilyManagementView family={family} currentUserId={user.id} />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                },
                {
                  "name": "members",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getFamilyById } from \"@/lib/data\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { FamilyMembersView } from \"@/components/dashboard/family/family-members-view\";\n\nfunction MembersLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <Skeleton className=\"h-10 w-48\" />\n            <div className=\"border rounded-md\">\n                <Skeleton className=\"h-12 w-full bg-muted/80\" />\n                <div className=\"p-4 space-y-3\">\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default async function FamilyMembersPage({\n    searchParams,\n}: {\n    searchParams: { id?: string };\n}) {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const familyId = searchParams.id || user.familyMember?.familyId;\n    if (!familyId) {\n        redirect('/family');\n    }\n\n    const family = await getFamilyById(familyId);\n\n    if (!family) {\n        return <p>Familia no encontrada.</p>;\n    }\n\n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<MembersLoading />}>\n                <FamilyMembersView family={family} />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { CreateOrJoinFamilyView } from \"@/components/dashboard/family/create-or-join-family-view\";\nimport { FamilyDashboardView } from \"@/components/dashboard/family/family-dashboard-view\";\nimport { getFamilyById, getFamilyRequests, getUsers } from \"@/lib/data\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nfunction FamilyLoading() {\n    return (\n        <div className=\"space-y-6\">\n            <Skeleton className=\"h-48 w-full\" />\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <Skeleton className=\"h-64 lg:col-span-2 w-full\" />\n                <Skeleton className=\"h-48 w-full\" />\n            </div>\n        </div>\n    )\n}\n\nexport default async function FamilyPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    if (user.familyMember && user.familyMember.familyId) {\n         const [family, allUsers, requests] = await Promise.all([\n            getFamilyById(user.familyMember.familyId),\n            getUsers(),\n            getFamilyRequests(user.familyMember.familyId)\n         ]);\n\n        if (family) {\n             return (\n                <Suspense fallback={<FamilyLoading />}>\n                    <FamilyDashboardView \n                        family={family} \n                        currentUser={user} \n                        allUsers={allUsers}\n                        pendingRequests={requests.length}\n                    />\n                </Suspense>\n            );\n        }\n    }\n\n    // If not in a family, show the create/join view\n    return (\n        <Suspense fallback={<FamilyLoading />}>\n            <CreateOrJoinFamilyView />\n        </Suspense>\n    )\n}\n"
                },
                {
                  "name": "requests",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getFamilyRequests } from \"@/lib/data\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { FamilyRequestsView } from \"@/components/dashboard/family/family-requests-view\";\nimport { FamilyRole } from \"@prisma/client\";\n\nfunction RequestsLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <Skeleton className=\"h-10 w-48\" />\n            <div className=\"border rounded-md\">\n                <Skeleton className=\"h-12 w-full bg-muted/80\" />\n                <div className=\"p-4 space-y-3\">\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default async function FamilyRequestsPage() {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember) {\n        redirect('/family');\n    }\n\n    const canManage = user.familyMember.role === FamilyRole.LEADER || user.familyMember.role === FamilyRole.CO_LEADER;\n    if (!canManage) {\n        redirect('/family');\n    }\n\n    const requests = await getFamilyRequests(user.familyMember.familyId);\n\n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<RequestsLoading />}>\n                <FamilyRequestsView requests={requests} />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "name": "layout.tsx",
              "type": "file",
              "content": "import { getSessionUser } from '@/lib/auth';\nimport { redirect } from 'next/navigation';\nimport { ResourceBar } from '@/components/dashboard/resource-bar';\nimport { PropertyProvider } from '@/contexts/property-context';\nimport { DashboardClientLayout } from '@/components/dashboard/dashboard-client-layout';\nimport { Suspense } from 'react';\nimport { GameStateUpdater } from '@/components/game-state-updater';\n\nexport default async function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const user = await getSessionUser();\n  if (!user) {\n    redirect('/');\n  }\n\n  return (\n    <PropertyProvider properties={user.propiedades}>\n       <Suspense>\n        <GameStateUpdater />\n      </Suspense>\n      <DashboardClientLayout\n        user={user}\n        resourceBar={<ResourceBar user={user} />}\n      >\n        {children}\n      </DashboardClientLayout>\n    </PropertyProvider>\n  );\n}\n"
            },
            {
              "name": "map",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { MapView } from \"@/components/dashboard/map-view\";\nimport { getPropertiesByLocation } from \"@/lib/data\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\n\nfunction MapLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex justify-center items-center gap-4\">\n                <Skeleton className=\"h-10 w-48 shimmer\" />\n                <Skeleton className=\"h-10 w-48 shimmer\" />\n            </div>\n            <Skeleton className=\"w-full aspect-square rounded-lg shimmer\" />\n        </div>\n    )\n}\n\nasync function MapPageContent({ searchParams }: { searchParams?: { ciudad?: string; barrio?: string; }}) {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n    \n    const initialCiudad = searchParams?.ciudad ? parseInt(searchParams.ciudad, 10) : user.propiedades?.[0]?.ciudad || 1;\n    const initialBarrio = searchParams?.barrio ? parseInt(searchParams.barrio, 10) : user.propiedades?.[0]?.barrio || 1;\n\n    const properties = await getPropertiesByLocation(initialCiudad, initialBarrio);\n\n    return (\n        <MapView \n            initialCiudad={initialCiudad} \n            initialBarrio={initialBarrio} \n            initialProperties={properties} \n            currentUser={user}\n        />\n    )\n}\n\n\nexport default function MapPage({\n    searchParams\n}: {\n    searchParams?: {\n        ciudad?: string;\n        barrio?: string;\n    };\n}) {\n    return (\n        <div className=\"main-view\">\n            <h2 className=\"text-3xl font-bold tracking-tight mb-4 text-center\">Mapa de la Ciudad</h2>\n            <Suspense fallback={<MapLoading />}>\n                <MapPageContent searchParams={searchParams} />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "messages",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { MessagesView } from \"@/components/dashboard/messages/messages-view\";\nimport { getNotificationFeedForUser, getUsers } from \"@/lib/data\";\n\nfunction MessagesLoading() {\n    return (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"col-span-1\">\n                <Skeleton className=\"h-12 w-full mb-2\" />\n                <Skeleton className=\"h-12 w-full mb-2\" />\n                <Skeleton className=\"h-12 w-full mb-2\" />\n                <Skeleton className=\"h-12 w-full\" />\n            </div>\n            <div className=\"md:col-span-3\">\n                <Skeleton className=\"h-96 w-full\" />\n            </div>\n        </div>\n    )\n}\n\n\nexport default async function MessagesPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const [initialFeed, allUsers] = await Promise.all([\n        getNotificationFeedForUser(user.id),\n        getUsers()\n    ]);\n    \n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<MessagesLoading />}>\n                <MessagesView \n                    currentUser={user}\n                    initialFeed={initialFeed} \n                    allUsers={allUsers}\n                />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "missions",
              "type": "directory",
              "children": [
                {
                  "name": "details",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { MissionDetailsView } from \"@/components/dashboard/missions/mission-details-view\";\nimport { getTroopConfigurations } from \"@/lib/data\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\nimport { ArrowLeft } from \"lucide-react\";\n\nfunction MissionDetailsLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n                    <Skeleton className=\"h-4 w-80 shimmer\" />\n                </div>\n            </div>\n            <Skeleton className=\"h-10 w-full\" />\n            <div className=\"border rounded-lg p-0\">\n                <div className=\"divide-y\">\n                    {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"p-4 flex items-center space-x-4\">\n                            <div className=\"space-y-2 flex-1\">\n                                <Skeleton className=\"h-4 w-full shimmer\" />\n                                <Skeleton className=\"h-4 w-3/4 shimmer\" />\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default async function MissionDetailsPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const troopConfigs = await getTroopConfigurations();\n\n    return (\n        <div className=\"main-view\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Centro de Control de Misiones</h2>\n                    <p className=\"text-muted-foreground\">\n                        Supervisa todas tus flotas en movimiento.\n                    </p>\n                </div>\n                 <Button asChild variant=\"outline\">\n                    <Link href=\"/missions\">\n                        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                        Volver a Enviar Misiones\n                    </Link>\n                </Button>\n            </div>\n            <Suspense fallback={<MissionDetailsLoading />}>\n                <MissionDetailsView \n                    missions={user.misiones} \n                    incomingAttacks={user.incomingAttacks || []}\n                    troopConfigs={troopConfigs}\n                />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { MissionsView } from \"@/components/dashboard/missions-view\";\nimport { getTroopConfigurations } from \"@/lib/data\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\nimport { ClipboardList } from \"lucide-react\";\n\nfunction MissionsLoading() {\n    return (\n        <div className=\"space-y-6\">\n            <Skeleton className=\"h-8 w-48 mb-4 shimmer\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                    <Skeleton className=\"h-10 w-full shimmer\" />\n                    <Skeleton className=\"h-10 w-full shimmer\" />\n                    <Skeleton className=\"h-10 w-full shimmer\" />\n                </div>\n                <div className=\"space-y-4\">\n                    <Skeleton className=\"h-40 w-full shimmer\" />\n                    <Skeleton className=\"h-10 w-full shimmer\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default async function MissionsPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const troopConfigs = await getTroopConfigurations();\n    \n    return (\n        <div className=\"main-view\">\n             <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Centro de Mando</h2>\n                    <p className=\"text-muted-foreground\">\n                        Planifica y ejecuta tus operaciones.\n                    </p>\n                </div>\n                <Button asChild>\n                    <Link href=\"/missions/details\">\n                        <ClipboardList className=\"mr-2 h-4 w-4\" />\n                        Ver Flotas en Movimiento\n                    </Link>\n                </Button>\n            </div>\n            <Suspense fallback={<MissionsLoading />}>\n                <MissionsView user={user} troopConfigs={troopConfigs} />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "overview",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from 'react';\nimport { getSessionUser } from '@/lib/auth';\nimport { redirect } from 'next/navigation';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { PlayerCardServer } from '@/components/dashboard/overview/player-card-server';\nimport { FamilyCardServer } from '@/components/dashboard/overview/family-card-server';\nimport { QueueStatusServer } from '@/components/dashboard/overview/queue-status-server';\nimport { MissionOverviewServer } from '@/components/dashboard/overview/mission-overview-server';\nimport { GlobalStatsServer } from '@/components/dashboard/overview/global-stats-server';\nimport { IncomingAttacksServer } from '@/components/dashboard/overview/incoming-attacks-server';\n\nfunction OverviewLoading() {\n  return (\n    <div className=\"grid flex-grow grid-cols-1 gap-6 p-4 md:grid-cols-2 md:p-6 lg:grid-cols-4\">\n      <div className=\"lg:col-span-2 space-y-6\">\n        <Skeleton className=\"h-48 w-full rounded-lg\" />\n        <Skeleton className=\"h-64 w-full rounded-lg\" />\n      </div>\n      <div className=\"lg:col-span-2 space-y-6\">\n        <Skeleton className=\"h-48 w-full rounded-lg\" />\n        <Skeleton className=\"h-64 w-full rounded-lg\" />\n      </div>\n      <div className=\"md:col-span-2 lg:col-span-4\">\n        <Skeleton className=\"h-24 w-full rounded-lg\" />\n      </div>\n    </div>\n  );\n}\n\nexport default async function OverviewPage() {\n  const user = await getSessionUser();\n  if (!user) {\n    redirect('/');\n  }\n\n  const primaryPropertyId = user.propiedades[0]?.id;\n\n  return (\n    <div className=\"main-view h-full\">\n      <Suspense fallback={<OverviewLoading />}>\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          \n          <div className=\"md:col-span-2 lg:col-span-4\">\n            <Suspense fallback={<Skeleton className=\"h-32 w-full rounded-lg\" />}>\n              <IncomingAttacksServer userId={user.id} />\n            </Suspense>\n          </div>\n          \n          {/* Columna Izquierda */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <div className=\"animate-fade-in-up\" style={{ animationDelay: '0ms' }}>\n              <Suspense fallback={<Skeleton className=\"h-48 w-full rounded-lg\" />}>\n                <PlayerCardServer userId={user.id} />\n              </Suspense>\n            </div>\n            {primaryPropertyId && (\n              <div className=\"animate-fade-in-up\" style={{ animationDelay: '200ms' }}>\n                <Suspense fallback={<Skeleton className=\"h-48 w-full rounded-lg\" />}>\n                  <QueueStatusServer propertyId={primaryPropertyId} />\n                </Suspense>\n              </div>\n            )}\n          </div>\n\n          {/* Columna Derecha */}\n          <div className=\"lg:col-span-2 space-y-6\">\n             <div className=\"animate-fade-in-up\" style={{ animationDelay: '100ms' }}>\n              <Suspense fallback={<Skeleton className=\"h-48 w-full rounded-lg\" />}>\n                <FamilyCardServer userId={user.id} />\n              </Suspense>\n            </div>\n             <div className=\"animate-fade-in-up\" style={{ animationDelay: '300ms' }}>\n                <Suspense fallback={<Skeleton className=\"h-64 w-full rounded-lg\" />}>\n                    <MissionOverviewServer userId={user.id} />\n                </Suspense>\n            </div>\n          </div>\n          \n           {/* Fila Inferior */}\n           <div className=\"md:col-span-2 lg:col-span-4 animate-fade-in-up\" style={{ animationDelay: '400ms' }}>\n                 <Suspense fallback={<Skeleton className=\"h-24 w-full rounded-lg\" />}>\n                    <GlobalStatsServer userId={user.id} />\n                </Suspense>\n           </div>\n        </div>\n      </Suspense>\n    </div>\n  );\n}\n"
                }
              ]
            },
            {
              "name": "powerattack",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { PowerAttackView } from \"@/components/dashboard/powerattack-view\";\n\nfunction PowerAttackLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n            <Skeleton className=\"h-4 w-80 shimmer\" />\n            <Skeleton className=\"h-24 w-full shimmer\" />\n            <div className=\"border rounded-lg p-0\">\n                <Skeleton className=\"h-[400px] w-full shimmer\" />\n            </div>\n        </div>\n    );\n}\n\nexport default async function PowerAttackPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<PowerAttackLoading />}>\n                <PowerAttackView user={user} />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "profile",
              "type": "directory",
              "children": [
                {
                  "name": "[userId]",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { getUserProfileById } from \"@/lib/data\";\nimport { redirect } from \"next/navigation\";\nimport { ProfileView } from \"@/components/dashboard/profile/profile-view\";\nimport { PageProps } from \"@/lib/types\";\n\nfunction ProfileLoading() {\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-6\">\n                <Skeleton className=\"h-24 w-24 rounded-full\" />\n                <div className=\"space-y-2\">\n                    <Skeleton className=\"h-8 w-48\" />\n                    <Skeleton className=\"h-4 w-32\" />\n                </div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Skeleton className=\"h-48 w-full\" />\n                <Skeleton className=\"h-48 w-full\" />\n            </div>\n        </div>\n    );\n}\n\nexport default async function ProfilePage({ params }: PageProps<{ userId: string }>) {\n    const sessionUser = await getSessionUser();\n    if (!sessionUser) {\n        redirect('/');\n    }\n\n    const userProfile = await getUserProfileById(params.userId);\n\n    if (!userProfile) {\n        return (\n            <div className=\"main-view\">\n                <h2 className=\"text-3xl font-bold tracking-tight\">Perfil no encontrado</h2>\n                <p>El jugador que buscas no existe o ha sido eliminado.</p>\n            </div>\n        );\n    }\n    \n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<ProfileLoading />}>\n                <ProfileView user={userProfile} />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { ProfileView } from \"@/components/dashboard/profile/profile-view\";\n\nfunction ProfileLoading() {\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"relative h-40 w-full rounded-lg overflow-hidden\">\n                 <Skeleton className=\"h-full w-full\" />\n            </div>\n             <div className=\"flex flex-col items-center sm:flex-row sm:items-end gap-4 -mt-16 sm:-mt-20 z-10 relative px-4\">\n                 <Skeleton className=\"h-32 w-32 rounded-full border-4 border-background\" />\n                 <div className=\"flex-grow text-center sm:text-left space-y-2\">\n                     <Skeleton className=\"h-10 w-48\" />\n                     <Skeleton className=\"h-6 w-32\" />\n                 </div>\n                 <div className=\"text-center sm:text-right space-y-2\">\n                     <Skeleton className=\"h-4 w-24\" />\n                     <Skeleton className=\"h-10 w-32\" />\n                 </div>\n            </div>\n             <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 pt-4\">\n                <Skeleton className=\"h-64 md:col-span-2 w-full\" />\n                <Skeleton className=\"h-64 w-full\" />\n            </div>\n        </div>\n    );\n}\n\nexport default async function ProfilePage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/login');\n    }\n    \n    // Redirect from the generic /profile to the specific user's profile\n    redirect(`/profile/${user.id}`);\n}\n"
                }
              ]
            },
            {
              "name": "rankings",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getFamiliesForRanking, getUsersForRanking, getUsersForHonorRanking, getRecentBattleReports } from \"@/lib/data\";\nimport { PlayerRankingsView } from \"@/components/dashboard/rankings/player-rankings-view\";\nimport { RankingTypeSelector } from \"@/components/dashboard/rankings/ranking-type-selector\";\nimport { FamilyRankingsView } from \"@/components/dashboard/rankings/family-rankings-view\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { HonorRankingsView } from \"@/components/dashboard/rankings/honor-rankings-view\";\nimport { BattlesRankingsView } from \"@/components/dashboard/rankings/battles-rankings-view\";\n\nfunction RankingsLoading() {\n    return (\n        <div className=\"space-y-4 animate-pulse\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-between sm:items-center\">\n                <Skeleton className=\"h-8 w-48\" />\n                <Skeleton className=\"h-24 w-full\" />\n            </div>\n            <div className=\"rounded-lg border\">\n                <div className=\"w-full h-12 bg-muted/80 rounded-t-lg\" />\n                <div className=\"p-4 space-y-2\">\n                    {[...Array(10)].map((_, i) => (\n                        <Skeleton key={i} className=\"h-10 w-full shimmer\" />\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst PAGE_SIZE = 100;\n\nasync function RankingsContent({ searchParams }: { searchParams?: { type?: string, range?: string }}) {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const rankingType = searchParams?.type || '0';\n    const range = parseInt(searchParams?.range || '0', 10);\n    const skip = range * PAGE_SIZE;\n\n    const users = rankingType === '0' ? await getUsersForRanking(skip, PAGE_SIZE) : [];\n    const families = rankingType === '1' ? await getFamiliesForRanking(skip, PAGE_SIZE) : [];\n    const honorUsers = rankingType === '2' ? await getUsersForHonorRanking(skip, PAGE_SIZE) : [];\n    const recentBattles = rankingType === '3' ? await getRecentBattleReports() : [];\n\n    return (\n        <>\n            {rankingType === '0' && <PlayerRankingsView users={users} currentUserId={user.id} page={range} pageSize={PAGE_SIZE} />}\n            {rankingType === '1' && <FamilyRankingsView families={families} currentUserFamilyId={user.familyMember?.familyId} page={range} pageSize={PAGE_SIZE} />}\n            {rankingType === '2' && <HonorRankingsView users={honorUsers} currentUserId={user.id} page={range} pageSize={PAGE_SIZE} />}\n            {rankingType === '3' && <BattlesRankingsView reports={recentBattles} currentUserId={user.id} />}\n        </>\n    )\n}\n\nexport default function RankingsPage({\n    searchParams\n}: {\n    searchParams?: { type?: string, range?: string }\n}) {\n    return (\n        <div className=\"main-view\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-between sm:items-center\">\n              <h2 className=\"text-3xl font-bold tracking-tight\">Clasificaciones</h2>\n            </div>\n             <div className=\"mt-4\">\n                 <RankingTypeSelector />\n            </div>\n            <Suspense fallback={<RankingsLoading />}>\n                <RankingsContent searchParams={searchParams} />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "recruitment",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { RecruitmentView } from \"@/components/dashboard/recruitment-view\"\nimport { Suspense } from \"react\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { getTroopConfigurations } from \"@/lib/data\"\nimport { getSessionUser } from \"@/lib/auth\"\nimport { redirect } from \"next/navigation\"\nimport { calcularStatsTropaConBonus } from \"@/lib/formulas/troop-formulas\"\nimport type { UserWithProgress } from \"@/lib/types\"\n\nfunction RecruitmentLoading() {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n            <Skeleton className=\"h-4 w-80 shimmer\" />\n          </div>\n        </div>\n        <div className=\"border rounded-lg p-0\">\n            <div className=\"divide-y\">\n                {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"p-4 flex items-center space-x-4\">\n                        <Skeleton className=\"h-16 w-20 rounded-md shimmer\" />\n                        <div className=\"space-y-2 flex-1\">\n                            <Skeleton className=\"h-4 w-3/4 shimmer\" />\n                            <Skeleton className=\"h-4 w-1/2 shimmer\" />\n                        </div>\n                        <Skeleton className=\"h-10 w-32 rounded-md shimmer\" />\n                    </div>\n                ))}\n            </div>\n        </div>\n      </div>\n    )\n  }\n\nexport default async function RecruitmentPage() {\n  const user = await getSessionUser();\n  if (!user) {\n    redirect('/');\n  }\n\n  const troopConfigs = await getTroopConfigurations();\n\n  const troopsWithStats = troopConfigs.map(config => {\n      const { ataqueActual, defensaActual, capacidadActual, velocidadActual, salarioActual } = calcularStatsTropaConBonus(config, user.entrenamientos);\n      return {\n          ...config,\n          ataqueActual,\n          defensaActual,\n          capacidadActual,\n          velocidadActual,\n          salarioActual,\n      }\n  })\n\n  return (\n    <div className=\"main-view\">\n      <Suspense fallback={<RecruitmentLoading />}>\n          <RecruitmentView user={user} troopConfigsWithStats={troopsWithStats} />\n      </Suspense>\n    </div>\n  )\n}\n"
                }
              ]
            },
            {
              "name": "resources",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { ResourcesView } from \"@/components/dashboard/resources-view\"\nimport { getSessionUser } from \"@/lib/auth\";\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { redirect } from \"next/navigation\";\nimport { Suspense } from \"react\"\n\nfunction ResourcesLoading() {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n          <Skeleton className=\"h-4 w-80 shimmer\" />\n        </div>\n      </div>\n       <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Skeleton className=\"h-64 w-full shimmer\" />\n            <Skeleton className=\"h-64 w-full shimmer\" />\n            <Skeleton className=\"h-64 w-full shimmer\" />\n            <Skeleton className=\"h-64 w-full shimmer\" />\n        </div>\n    </div>\n  )\n}\n\nexport default async function ResourcesPage() {\n  const user = await getSessionUser();\n  if (!user) {\n    redirect('/');\n  }\n\n  return (\n    <div className=\"main-view\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n            <h2 className=\"text-3xl font-bold tracking-tight\">An\u00e1lisis de Recursos</h2>\n            <p className=\"text-muted-foreground\">\n                Visualiza la producci\u00f3n y proyecci\u00f3n de tus recursos.\n            </p>\n        </div>\n      </div>\n      <Suspense fallback={<ResourcesLoading />}>\n        <ResourcesView user={user} />\n      </Suspense>\n    </div>\n  )\n}\n"
                }
              ]
            },
            {
              "name": "rooms",
              "type": "directory",
              "children": [
                {
                  "name": "[propertyCoords]",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { RoomsView } from \"@/components/dashboard/rooms-view\"\nimport { Suspense } from \"react\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { getSessionUser } from \"@/lib/auth\"\nimport { getRoomConfigurations } from \"@/lib/data\"\nimport { redirect } from \"next/navigation\"\nimport { FullPropiedad, PageProps } from \"@/lib/types\"\nimport { PropertyProvider } from \"@/contexts/property-context\"\n\nfunction RoomsLoading() {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n            <Skeleton className=\"h-4 w-80 shimmer\" />\n          </div>\n        </div>\n        <div className=\"border rounded-lg p-0\">\n            <div className=\"divide-y\">\n                {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"p-4 flex items-center space-x-4\">\n                        <Skeleton className=\"h-16 w-20 rounded-md shimmer\" />\n                        <div className=\"space-y-2 flex-1\">\n                            <Skeleton className=\"h-4 w-3/4 shimmer\" />\n                            <Skeleton className=\"h-4 w-1/2 shimmer\" />\n                        </div>\n                        <Skeleton className=\"h-10 w-24 rounded-md shimmer\" />\n                    </div>\n                ))}\n            </div>\n        </div>\n      </div>\n    )\n  }\n\nexport default async function RoomsByCoordsPage({ params }: PageProps<{ propertyCoords: string }>) {\n  const user = await getSessionUser();\n  if (!user) {\n    redirect('/');\n  }\n\n  const allRoomConfigs = await getRoomConfigurations();\n\n  if (!user.propiedades || user.propiedades.length === 0) {\n    return (\n      <div className=\"main-view\">\n         <h2 className=\"text-3xl font-bold tracking-tight\">Gesti\u00f3n de Habitaciones</h2>\n         <p>No tienes propiedades para gestionar.</p>\n      </div>\n    )\n  }\n\n  const [ciudad, barrio, edificio] = params.propertyCoords.split(':').map(Number);\n  const propertyFromCoords = user.propiedades.find((p: FullPropiedad) => p.ciudad === ciudad && p.barrio === barrio && p.edificio === edificio);\n\n  return (\n    <div className=\"main-view\">\n        <PropertyProvider properties={user.propiedades}>\n            <Suspense fallback={<RoomsLoading />}>\n                <RoomsView \n                    user={user} \n                    allRoomConfigs={allRoomConfigs} \n                    initialProperty={propertyFromCoords}\n                />\n            </Suspense>\n        </PropertyProvider>\n    </div>\n  )\n}\n"
                    }
                  ]
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { RoomsView } from \"@/components/dashboard/rooms-view\"\nimport { Suspense } from \"react\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { getSessionUser } from \"@/lib/auth\"\nimport { getRoomConfigurations } from \"@/lib/data\"\nimport { redirect } from \"next/navigation\"\nimport { PropertyProvider } from \"@/contexts/property-context\"\n\nfunction RoomsLoading() {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold tracking-tight font-heading\"><Skeleton className=\"h-8 w-64 mb-2 shimmer\" /></h2>\n            <Skeleton className=\"h-4 w-80 shimmer\" />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(9)].map((_, i) => (\n                <Skeleton key={i} className=\"h-48 w-full shimmer\" />\n            ))}\n        </div>\n      </div>\n    )\n  }\n\nexport default async function RoomsPage() {\n  const user = await getSessionUser();\n  if (!user) {\n    redirect('/');\n  }\n\n  const allRoomConfigs = await getRoomConfigurations();\n\n  return (\n    <div className=\"main-view\">\n        <PropertyProvider properties={user.propiedades}>\n            <Suspense fallback={<RoomsLoading />}>\n                <RoomsView user={user} allRoomConfigs={allRoomConfigs} />\n            </Suspense>\n        </PropertyProvider>\n    </div>\n  )\n}\n"
                }
              ]
            },
            {
              "name": "search",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function SearchPage() {\n  return (\n    <div className=\"main-view\">\n      <h2 className=\"text-3xl font-bold tracking-tight\">Buscar</h2>\n      <Card>\n        <CardHeader>\n          <CardTitle>B\u00fasqueda Avanzada</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>Pr\u00f3ximamente: Aqu\u00ed podr\u00e1s buscar jugadores, familias y coordenadas.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                }
              ]
            },
            {
              "name": "security",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { SecurityView } from \"@/components/dashboard/security-view\";\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getTroopConfigurations } from \"@/lib/data\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { calcularStatsTropaConBonus } from \"@/lib/formulas/troop-formulas\";\nimport { SECURITY_TROOP_ORDER, TROOP_TYPE_DEFENSE } from \"@/lib/constants\";\nimport type { UserWithProgress } from \"@/lib/types\";\n\nfunction SecurityLoading() {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n            <Skeleton className=\"h-4 w-80 shimmer\" />\n          </div>\n        </div>\n        <Skeleton className=\"h-24 w-full\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-64 w-full shimmer\" />\n            ))}\n        </div>\n      </div>\n    )\n}\n\nexport default async function SecurityPage() {\n  const user = await getSessionUser();\n  if (!user) {\n    redirect('/');\n  }\n\n  const troopConfigs = await getTroopConfigurations();\n  \n  const defenseTroops = troopConfigs.filter(t => t.tipo === TROOP_TYPE_DEFENSE);\n\n  const sortedDefenseTroops = [...defenseTroops].sort((a, b) => {\n    const indexA = SECURITY_TROOP_ORDER.indexOf(a.id);\n    const indexB = SECURITY_TROOP_ORDER.indexOf(b.id);\n    if (indexA === -1) return 1;\n    if (indexB === -1) return -1;\n    return indexA - indexB;\n  });\n\n  const troopsWithStats = sortedDefenseTroops.map(config => {\n      const { ataqueActual, defensaActual, capacidadActual, velocidadActual, salarioActual } = calcularStatsTropaConBonus(config, user.entrenamientos);\n      return {\n          ...config,\n          ataqueActual,\n          defensaActual,\n          capacidadActual,\n          velocidadActual,\n          salarioActual,\n      }\n  })\n\n  return (\n    <div className=\"main-view\">\n      <Suspense fallback={<SecurityLoading />}>\n          <SecurityView user={user} defenseTroops={troopsWithStats} />\n      </Suspense>\n    </div>\n  )\n}\n"
                }
              ]
            },
            {
              "name": "settings",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { SettingsView } from \"@/components/dashboard/settings-view\";\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\n\nfunction SettingsLoading() {\n    return (\n        <div className=\"space-y-6\">\n            <Skeleton className=\"h-8 w-48 mb-4\" />\n            <Card>\n                <CardHeader>\n                    <Skeleton className=\"h-6 w-1/3\" />\n                    <Skeleton className=\"h-4 w-2/3\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-4\">\n                            <div className=\"space-y-2\">\n                                <Skeleton className=\"h-4 w-20\" />\n                                <Skeleton className=\"h-10 w-full\" />\n                            </div>\n                            <div className=\"space-y-2\">\n                                <Skeleton className=\"h-4 w-20\" />\n                                <Skeleton className=\"h-10 w-full\" />\n                            </div>\n                        </div>\n                         <div className=\"space-y-4\">\n                            <div className=\"space-y-2\">\n                                <Skeleton className=\"h-4 w-20\" />\n                                <Skeleton className=\"h-10 w-full\" />\n                            </div>\n                            <div className=\"flex justify-center pt-2\">\n                                <Skeleton className=\"h-24 w-24 rounded-full\" />\n                            </div>\n                        </div>\n                    </div>\n                </CardContent>\n                <CardFooter>\n                    <Skeleton className=\"h-10 w-32\" />\n                </CardFooter>\n            </Card>\n        </div>\n    )\n}\n\n\nexport default async function SettingsPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<SettingsLoading />}>\n                <SettingsView user={user} />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "simulator",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport React, { useEffect, useState, Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { getTroopConfigurations, getTrainingConfigurations, getRoomConfigurations } from \"@/lib/data\";\nimport { SimulatorView } from \"@/components/dashboard/simulator-view\";\nimport type { BattleReport } from '@/lib/types/simulation.types';\nimport type { UserWithProgress, FullConfiguracionTropa, FullConfiguracionEntrenamiento, FullConfiguracionHabitacion } from \"@/lib/types\";\n\nfunction SimulatorLoading() {\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n                <div className=\"space-y-2\">\n                    <Skeleton className=\"h-8 w-64\" />\n                    <Skeleton className=\"h-4 w-80\" />\n                </div>\n                <Skeleton className=\"h-10 w-32\" />\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Skeleton className=\"h-[70vh] w-full\" />\n                <Skeleton className=\"h-[70vh] w-full\" />\n            </div>\n            <Skeleton className=\"h-12 w-full mt-4\" />\n        </div>\n    )\n}\n\n// Este componente ahora es necesario para poder usar Suspense\nconst SimulatorPageContent = () => {\n    const [user, setUser] = useState<UserWithProgress | null>(null);\n    const [troopConfigs, setTroopConfigs] = useState<FullConfiguracionTropa[]>([]);\n    const [trainingConfigs, setTrainingConfigs] = useState<FullConfiguracionEntrenamiento[]>([]);\n    const [defenseConfigs, setDefenseConfigs] = useState<FullConfiguracionHabitacion[]>([]);\n    const [loading, setLoading] = useState(true);\n\n    React.useEffect(() => {\n        const fetchData = async () => {\n            const sessionUser = await getSessionUser();\n            if (!sessionUser) {\n                redirect('/');\n                return;\n            }\n            setUser(sessionUser);\n\n            const [troops, trainings, rooms] = await Promise.all([\n                getTroopConfigurations(),\n                getTrainingConfigurations(),\n                getRoomConfigurations()\n            ]);\n            setTroopConfigs(troops);\n            setTrainingConfigs(trainings);\n            setDefenseConfigs(rooms.filter(r => \n                ['seguridad', 'torreta_de_fuego_automatico', 'minas_ocultas'].includes(r.id)\n            ));\n            setLoading(false);\n        };\n        fetchData();\n    }, []);\n\n    if (loading) {\n        return <SimulatorLoading />;\n    }\n\n    if (!user) {\n        return null; // or a redirect, handled by useEffect\n    }\n    \n    return (\n        <SimulatorView \n            user={user}\n            troopConfigs={troopConfigs}\n            trainingConfigs={trainingConfigs}\n            defenseConfigs={defenseConfigs}\n        />\n    )\n}\n\nexport default function SimulatorPage() {\n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<SimulatorLoading />}>\n                <SimulatorPageContent />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "statistics",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { getGlobalStatistics, getMaximumResourceCapacity, UserWithProgress } from \"@/lib/data\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { StatisticsView } from \"@/components/dashboard/statistics/statistics-view\";\n\nfunction StatisticsLoading() {\n    return (\n        <div className=\"space-y-6\">\n             <div className=\"flex items-center justify-between\">\n                <div>\n                    <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n                    <Skeleton className=\"h-4 w-80 shimmer\" />\n                </div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Skeleton className=\"h-64 w-full shimmer\" />\n                <Skeleton className=\"h-64 w-full shimmer\" />\n                <Skeleton className=\"h-64 w-full shimmer\" />\n                <Skeleton className=\"h-64 w-full shimmer\" />\n            </div>\n        </div>\n    )\n}\n\nexport default async function StatisticsPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n\n    const [\n        globalStats,\n        resourceStats\n    ] = await Promise.all([\n        getGlobalStatistics(),\n        getMaximumResourceCapacity()\n    ]);\n    \n    const { \n        allRoomConfigs, \n        allTrainingConfigs, \n        allTroopConfigs, \n        roomStats, \n        trainingStats, \n        troopStats \n    } = globalStats;\n    \n\n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<StatisticsLoading />}>\n                <StatisticsView \n                    currentUser={user}\n                    allRoomConfigs={allRoomConfigs}\n                    allTrainingConfigs={allTrainingConfigs}\n                    allTroopConfigs={allTroopConfigs}\n                    roomStats={roomStats}\n                    trainingStats={trainingStats}\n                    troopStats={troopStats}\n                    resourceStats={resourceStats}\n                />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "technologies",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { Suspense } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { getRoomConfigurations, getTrainingConfigurations, getTroopConfigurations, UserWithProgress } from \"@/lib/data\";\nimport { TechnologyTreeView } from \"@/components/dashboard/technologies/technology-tree-view\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\n\nfunction TechnologiesLoading() {\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n                    <Skeleton className=\"h-4 w-80 shimmer\" />\n                </div>\n            </div>\n             <div className=\"flex gap-2 mb-4\">\n                <Skeleton className=\"h-10 w-32\" />\n                <Skeleton className=\"h-10 w-32\" />\n                <Skeleton className=\"h-10 w-32\" />\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {[...Array(9)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-48 w-full shimmer\" />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default async function TechnologiesPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/');\n    }\n    \n    const [rooms, trainings, troops] = await Promise.all([\n        getRoomConfigurations(),\n        getTrainingConfigurations(),\n        getTroopConfigurations()\n    ]);\n    \n    return (\n        <div className=\"main-view\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Gu\u00eda de Desbloqueo</h2>\n                    <p className=\"text-muted-foreground\">\n                        Consulta el \u00e1rbol tecnol\u00f3gico para planificar tus pr\u00f3ximos movimientos.\n                    </p>\n                </div>\n            </div>\n            <Suspense fallback={<TechnologiesLoading />}>\n                <TechnologyTreeView\n                    user={user}\n                    rooms={rooms}\n                    trainings={trainings}\n                    troops={troops}\n                />\n            </Suspense>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "training",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "\nimport { TrainingView } from \"@/components/dashboard/training-view\"\nimport { Suspense } from \"react\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { getSessionUser } from \"@/lib/auth\"\nimport { redirect } from \"next/navigation\"\nimport { getTrainingConfigurations } from \"@/lib/data\"\nimport { calcularCostosEntrenamiento, calcularTiempoEntrenamiento } from \"@/lib/formulas/training-formulas\"\nimport { ID_ESCUELA_ESPECIALIZACION, TRAINING_ORDER } from \"@/lib/constants\"\n\nfunction TrainingLoading() {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Skeleton className=\"h-8 w-64 mb-2 shimmer\" />\n            <Skeleton className=\"h-4 w-80 shimmer\" />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n            {[...Array(9)].map((_, i) => (\n                <Skeleton key={i} className=\"h-48 w-full shimmer\" />\n            ))}\n        </div>\n      </div>\n    )\n  }\n\nexport default async function TrainingPage() {\n  const user = await getSessionUser();\n  if (!user) {\n    redirect('/');\n  }\n\n  const allTrainingConfigs = await getTrainingConfigurations();\n\n  // Pre-calculate data on the server\n  const userTrainingsMap = new Map(user.entrenamientos.map(t => [t.configuracionEntrenamientoId, t.nivel]));\n  const nivelEscuela = user.propiedades.flatMap(p => p.habitaciones).find(h => h.configuracionHabitacionId === ID_ESCUELA_ESPECIALIZACION)?.nivel || 0;\n  \n  const sortedTrainingsData = TRAINING_ORDER.map(id => {\n      const config = allTrainingConfigs.find(c => c.id === id);\n      if (!config) return null;\n\n      const userTraining = userTrainingsMap.get(id);\n      const nivel = userTraining || 0;\n      \n      const costosSiguienteNivel = calcularCostosEntrenamiento(nivel + 1, config);\n      const tiempoSiguienteNivel = calcularTiempoEntrenamiento(nivel + 1, config, nivelEscuela);\n      \n      const requisitos = config.requisitos || [];\n      const meetsRequirements = requisitos.every(req => (userTrainingsMap.get(req.requiredTrainingId) || 0) >= req.requiredLevel);\n      const requirementsText = !meetsRequirements \n        ? requisitos\n            .map(req => {\n                const reqConfig = allTrainingConfigs.find(c => c.id === req.requiredTrainingId);\n                return `${reqConfig?.nombre || req.requiredTrainingId} (Nvl ${req.requiredLevel})`\n            })\n            .join(', ')\n        : null;\n\n\n      return {\n          ...config,\n          nivel,\n          costos: costosSiguienteNivel,\n          tiempo: tiempoSiguienteNivel,\n          meetsRequirements,\n          requirementsText\n      };\n  }).filter((t): t is NonNullable<typeof t> => t !== null);\n\n\n  return (\n    <div className=\"main-view\">\n      <Suspense fallback={<TrainingLoading />}>\n          <TrainingView user={user} trainingsData={sortedTrainingsData} />\n      </Suspense>\n    </div>\n  );\n}\n"
                }
              ]
            },
            {
              "name": "vision",
              "type": "directory",
              "children": [
                {
                  "name": "global",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Suspense } from \"react\";\nimport { getSessionUser } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { GlobalVisionView } from \"@/components/dashboard/vision/global-view\";\n\nfunction GlobalVisionLoading() {\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                    <Skeleton className=\"h-8 w-64\" />\n                    <Skeleton className=\"h-4 w-80\" />\n                </div>\n            </div>\n            <Skeleton className=\"h-48 w-full\" />\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Skeleton className=\"h-64 w-full\" />\n                <Skeleton className=\"h-64 w-full\" />\n            </div>\n        </div>\n    );\n}\n\n\nexport default async function GlobalVisionPage() {\n    const user = await getSessionUser();\n    if (!user) {\n        redirect('/login');\n    }\n\n    return (\n        <div className=\"main-view\">\n            <Suspense fallback={<GlobalVisionLoading />}>\n                <GlobalVisionView user={user} />\n            </Suspense>\n        </div>\n    );\n}\n"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "favicon.ico",
          "type": "file"
        },
        {
          "name": "globals.css",
          "type": "file"
        },
        {
          "name": "layout.tsx",
          "type": "file",
          "content": "import type { Metadata } from 'next';\nimport { Toaster } from '@/components/ui/toaster';\nimport './globals.css';\nimport { Inter, Bebas_Neue } from 'next/font/google';\nimport { cn } from '@/lib/utils';\n\nconst fontSans = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n});\n\nconst fontHeading = Bebas_Neue({\n  subsets: ['latin'],\n  weight: '400',\n  variable: '--font-bebas-neue',\n});\n\nexport const metadata: Metadata = {\n  title: 'AutoAuth',\n  description: 'Automatic authentication and redirection application.',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          'min-h-screen bg-background font-sans antialiased',\n          fontSans.variable,\n          fontHeading.variable\n        )}\n      >\n        {children}\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n"
        },
        {
          "name": "page.tsx",
          "type": "file",
          "content": "\"use client\";\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Loader2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\n// Mock authentication function to simulate an API call\nasync function attemptLogin(user: string, pass: string): Promise<boolean> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(user === 'bomberox' && pass === '123456789');\n    }, 1500); // Simulate a 1.5-second network delay\n  });\n}\n\nexport default function AutoAuthPage() {\n  const router = useRouter();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const authenticateAndRedirect = async () => {\n      const isAuthenticated = await attemptLogin('bomberox', '123456789');\n\n      if (isAuthenticated) {\n        router.replace('/overview');\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Authentication Failed\",\n          description: \"The provided credentials are incorrect.\",\n        });\n      }\n    };\n\n    authenticateAndRedirect();\n  }, [router, toast]);\n\n  return (\n    <main className=\"flex min-h-screen w-full items-center justify-center p-4\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n        <div className=\"text-center\">\n          <h1 className=\"text-xl font-semibold tracking-tight text-foreground\">\n            Securely signing you in\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Please wait while we verify your credentials.\n          </p>\n        </div>\n      </div>\n    </main>\n  );\n}\n"
        }
      ]
    },
    {
      "name": "components",
      "type": "directory",
      "children": [
        {
          "name": "admin",
          "type": "directory",
          "children": [
            {
              "name": "admin-login-form.tsx",
              "type": "file",
              "content": "\n\n'use client';\n\nimport { useState, useTransition } from \"react\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"../ui/card\";\nimport { Label } from \"../ui/label\";\nimport { Input } from \"../ui/input\";\nimport { Button } from \"../ui/button\";\nimport { loginAdmin } from \"@/lib/auth-admin\";\nimport { Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Image from \"next/image\";\n\nexport function AdminLoginForm() {\n    const [password, setPassword] = useState('');\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        startTransition(async () => {\n            const result = await loginAdmin(password);\n            if (!result.success) {\n                toast({\n                    variant: 'destructive',\n                    title: 'Error',\n                    description: result.error,\n                });\n            }\n        });\n    }\n\n    return (\n        <Card className=\"w-full max-w-sm\">\n            <CardHeader className=\"text-center\">\n                 <Image \n                    src=\"/logo.jpg\"\n                    alt=\"Vendetta Logo\"\n                    width={96} // w-24\n                    height={48}\n                    className=\"object-contain mx-auto mb-4\"\n                    data-ai-hint=\"game logo\"\n                />\n                <CardTitle>Acceso de Administrador</CardTitle>\n                <CardDescription>Introduce la contrase\u00f1a para acceder al panel.</CardDescription>\n            </CardHeader>\n            <form onSubmit={handleSubmit}>\n                <CardContent>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"password\">Contrase\u00f1a</Label>\n                        <Input \n                            id=\"password\" \n                            type=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                            disabled={isPending}\n                        />\n                    </div>\n                </CardContent>\n                <CardFooter>\n                    <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n                        {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Entrar\n                    </Button>\n                </CardFooter>\n            </form>\n        </Card>\n    );\n}\n"
            },
            {
              "name": "bonus-config-matrix.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useState, useTransition } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"../ui/card\";\nimport { Button } from \"../ui/button\";\nimport { Input } from \"../ui/input\";\nimport { Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { saveTroopBonusConfig } from \"@/lib/actions/admin.actions\";\nimport { ConfiguracionTropa, TropaBonusContrincante } from \"@prisma/client\";\nimport { ScrollArea } from \"../ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BonusConfigMatrixProps {\n    attackTroops: ConfiguracionTropa[];\n    defenseTroops: ConfiguracionTropa[];\n    initialBonusConfig: TropaBonusContrincante[];\n}\n\nexport function BonusConfigMatrix({ attackTroops, defenseTroops, initialBonusConfig }: BonusConfigMatrixProps) {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n\n    const initialMatrixState = () => {\n        const matrix = new Map<string, Map<string, number>>();\n        for (const bonus of initialBonusConfig) {\n            if (!matrix.has(bonus.tropaAtacanteId)) {\n                matrix.set(bonus.tropaAtacanteId, new Map());\n            }\n            matrix.get(bonus.tropaAtacanteId)!.set(bonus.tropaDefensoraId, bonus.factorPrioridad);\n        }\n        return matrix;\n    };\n\n    const [matrix, setMatrix] = useState(initialMatrixState);\n\n    const handleInputChange = (attackerId: string, defenderId: string, value: string) => {\n        const newMatrix = new Map(matrix);\n        if (!newMatrix.has(attackerId)) {\n            newMatrix.set(attackerId, new Map());\n        }\n        \n        const numValue = parseFloat(value);\n        if (value === '' || isNaN(numValue)) {\n            newMatrix.get(attackerId)!.delete(defenderId);\n        } else {\n            newMatrix.get(attackerId)!.set(defenderId, numValue);\n        }\n        setMatrix(newMatrix);\n    };\n\n    const handleSubmit = () => {\n        const bonusData: { tropaAtacanteId: string; tropaDefensoraId: string; factorPrioridad: number }[] = [];\n        matrix.forEach((defenderMap, attackerId) => {\n            defenderMap.forEach((factor, defenderId) => {\n                // Solo guardamos si el factor es diferente de 1 para no llenar la DB\n                if (factor !== 1) { \n                    bonusData.push({\n                        tropaAtacanteId: attackerId,\n                        tropaDefensoraId: defenderId,\n                        factorPrioridad: factor,\n                    });\n                }\n            });\n        });\n\n        startTransition(async () => {\n            const result = await saveTroopBonusConfig(bonusData);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: 'Configuraci\u00f3n de bonus guardada.' });\n            }\n        });\n    };\n    \n    const allDefenders = [...attackTroops, ...defenseTroops];\n\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle>Matriz de Bonus de Ataque vs Tropas</CardTitle>\n                <CardDescription>\n                    Define el factor de prioridad de ataque. Un valor de 1.5 significa un 50% m\u00e1s de da\u00f1o contra esa unidad. Un valor de 1 es el normal.\n                </CardDescription>\n            </CardHeader>\n            <CardContent>\n                <ScrollArea className=\"w-full whitespace-nowrap rounded-md border h-[75vh]\">\n                    <table className=\"min-w-full border-collapse text-sm\">\n                        <thead>\n                            <tr className=\"bg-muted/50\">\n                                <th className=\"sticky top-0 left-0 z-20 bg-muted/80 p-2 border-b border-r text-xs font-semibold w-[150px] backdrop-blur-sm\">Atacante / Defensor</th>\n                                {attackTroops.map(defender => (\n                                     <th key={defender.id} className=\"sticky top-0 z-10 p-2 border-b border-r text-xs font-semibold w-28 h-28 bg-blue-950/40 backdrop-blur-sm\">\n                                        <div className=\"[writing-mode:vertical-rl] origin-center -rotate-180\">\n                                            <span className=\"truncate block\">{defender.nombre}</span>\n                                        </div>\n                                    </th>\n                                ))}\n                                {defenseTroops.map(defender => (\n                                     <th key={defender.id} className=\"sticky top-0 z-10 p-2 border-b border-r text-xs font-semibold w-28 h-28 bg-red-950/40 backdrop-blur-sm\">\n                                        <div className=\"[writing-mode:vertical-rl] origin-center -rotate-180\">\n                                            <span className=\"truncate block\">{defender.nombre}</span>\n                                        </div>\n                                    </th>\n                                ))}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {attackTroops.map(attacker => (\n                                <tr key={attacker.id} className=\"even:bg-muted/20\">\n                                    <td className=\"sticky left-0 z-10 bg-card p-2 border-b border-r font-semibold w-[150px]\">{attacker.nombre}</td>\n                                    {allDefenders.map(defender => (\n                                        <td key={defender.id} className={cn(\"p-1 border-b border-r text-center\", attacker.id === defender.id && \"bg-muted/30\")}>\n                                            <Input\n                                                type=\"number\"\n                                                step=\"0.1\"\n                                                className=\"w-20 h-8 mx-auto text-center tabular-nums\"\n                                                placeholder=\"1\"\n                                                value={matrix.get(attacker.id)?.get(defender.id) ?? ''}\n                                                onChange={(e) => handleInputChange(attacker.id, defender.id, e.target.value)}\n                                            />\n                                        </td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </ScrollArea>\n                <div className=\"flex justify-end mt-4\">\n                    <Button onClick={handleSubmit} disabled={isPending}>\n                        {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Guardar Cambios\n                    </Button>\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\n"
            },
            {
              "name": "delete-config-button.tsx",
              "type": "file",
              "content": "\n'use client';\nimport { useTransition } from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface DeleteConfigButtonProps {\n    id: string;\n    action: (id: string) => Promise<{ success?: boolean; error?: string }>;\n}\n\nexport function DeleteConfigButton({ id, action }: DeleteConfigButtonProps) {\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n\n    const handleDelete = () => {\n        startTransition(async () => {\n            const result = await action(id);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: 'Elemento eliminado correctamente.' });\n            }\n        });\n    }\n\n    return (\n        <AlertDialog>\n            <AlertDialogTrigger asChild>\n                <Button variant=\"destructive\" size=\"sm\" disabled={isPending}>Eliminar</Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n                <AlertDialogHeader>\n                    <AlertDialogTitle>\u00bfEst\u00e1s seguro?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                        Esta acci\u00f3n no se puede deshacer. Esto eliminar\u00e1 permanentemente la configuraci\u00f3n de la base de datos.\n                    </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                    <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleDelete} disabled={isPending}>\n                         {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Continuar\n                    </AlertDialogAction>\n                </AlertDialogFooter>\n            </AlertDialogContent>\n        </AlertDialog>\n    );\n}\n"
            },
            {
              "name": "forms",
              "type": "directory",
              "children": [
                {
                  "name": "room-config-form.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { useTransition, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { saveRoomConfig } from \"@/lib/actions/admin.actions\";\nimport { Loader2 } from \"lucide-react\";\nimport type { ConfiguracionHabitacion } from \"@prisma/client\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface RoomConfigFormProps {\n    room: (ConfiguracionHabitacion & { requisitos: { requiredRoomId: string; requiredLevel: number }[] }) | null;\n    allRooms: ConfiguracionHabitacion[];\n    onFinished: () => void;\n}\n\nexport function RoomConfigForm({ room, allRooms, onFinished }: RoomConfigFormProps) {\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n\n    // Use state to manage form fields for controlled components\n    const [formData, setFormData] = useState({\n        id: room?.id || '',\n        nombre: room?.nombre || '',\n        descripcion: room?.descripcion || '',\n        urlImagen: room?.urlImagen || '',\n        costoArmas: room?.costoArmas || 0,\n        costoMunicion: room?.costoMunicion || 0,\n        costoDolares: room?.costoDolares || 0,\n        duracion: room?.duracion || 0,\n        puntos: room?.puntos || 0,\n        produccionBase: room?.produccionBase || 0,\n        produccionRecurso: room?.produccionRecurso || '',\n    });\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name, value, type } = e.target;\n        const isNumber = type === 'number';\n        setFormData(prev => ({\n            ...prev,\n            [name]: isNumber ? (parseInt(value, 10) || 0) : value\n        }));\n    };\n    \n    const initialRequirements = new Map(\n        (room?.requisitos || []).map(req => [req.requiredRoomId, req.requiredLevel])\n    );\n    const [requirements, setRequirements] = useState<Map<string, number>>(initialRequirements);\n\n    const handleRequirementChange = (roomId: string, checked: boolean) => {\n        const newRequirements = new Map(requirements);\n        if (checked) {\n            newRequirements.set(roomId, 1);\n        } else {\n            newRequirements.delete(roomId);\n        }\n        setRequirements(newRequirements);\n    };\n\n    const handleLevelChange = (roomId: string, level: number) => {\n        const newRequirements = new Map(requirements);\n        if (level > 0) {\n            newRequirements.set(roomId, level);\n        } else {\n            newRequirements.delete(roomId);\n        }\n        setRequirements(newRequirements);\n    };\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const form = new FormData(e.currentTarget);\n        \n        requirements.forEach((level, id) => {\n            form.append('requirement_ids', id);\n            form.append(`requirement_level_${id}`, level.toString());\n        });\n        \n        startTransition(async () => {\n            const result = await saveRoomConfig(form);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: 'Configuraci\u00f3n guardada.' });\n                onFinished();\n            }\n        });\n    }\n    \n    const availableRequirements = allRooms.filter(r => r.id !== room?.id);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <ScrollArea className=\"max-h-[70vh] p-1 pr-6\">\n                <div className=\"space-y-4\">\n                    <input type=\"hidden\" name=\"originalId\" value={room?.id || ''} />\n                    <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"id\">ID</Label>\n                            <Input id=\"id\" name=\"id\" value={formData.id} onChange={handleInputChange} required disabled={!!room} />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"nombre\">Nombre</Label>\n                            <Input id=\"nombre\" name=\"nombre\" value={formData.nombre} onChange={handleInputChange} required />\n                        </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"descripcion\">Descripci\u00f3n</Label>\n                        <Textarea id=\"descripcion\" name=\"descripcion\" value={formData.descripcion} onChange={handleInputChange} />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"urlImagen\">URL de Imagen</Label>\n                        <Input id=\"urlImagen\" name=\"urlImagen\" value={formData.urlImagen} onChange={handleInputChange} />\n                    </div>\n                    <div className=\"grid grid-cols-4 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoArmas\">Armas</Label>\n                            <Input id=\"costoArmas\" name=\"costoArmas\" type=\"number\" value={formData.costoArmas || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoMunicion\">Munici\u00f3n</Label>\n                            <Input id=\"costoMunicion\" name=\"costoMunicion\" type=\"number\" value={formData.costoMunicion || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoDolares\">D\u00f3lares</Label>\n                            <Input id=\"costoDolares\" name=\"costoDolares\" type=\"number\" value={formData.costoDolares || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"duracion\">Duraci\u00f3n (s)</Label>\n                            <Input id=\"duracion\" name=\"duracion\" type=\"number\" value={formData.duracion || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"puntos\">Puntos</Label>\n                            <Input id=\"puntos\" name=\"puntos\" type=\"number\" step=\"0.01\" value={formData.puntos || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"produccionBase\">Producci\u00f3n Base</Label>\n                            <Input id=\"produccionBase\" name=\"produccionBase\" type=\"number\" value={formData.produccionBase || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"produccionRecurso\">Recurso Producido</Label>\n                            <Input id=\"produccionRecurso\" name=\"produccionRecurso\" value={formData.produccionRecurso || ''} onChange={handleInputChange} placeholder=\"armas, municion...\" />\n                        </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label>Requisitos</Label>\n                        <div className=\"border rounded-md p-4 space-y-2 max-h-48 overflow-y-auto\">\n                            {availableRequirements.map(reqRoom => {\n                                const isChecked = requirements.has(reqRoom.id);\n                                return (\n                                    <div key={reqRoom.id} className=\"flex items-center gap-4\">\n                                        <div className=\"flex items-center gap-2 flex-1\">\n                                            <Checkbox\n                                                id={`req-${reqRoom.id}`}\n                                                checked={isChecked}\n                                                onCheckedChange={(checked) => handleRequirementChange(reqRoom.id, !!checked)}\n                                            />\n                                            <Label htmlFor={`req-${reqRoom.id}`} className=\"font-normal\">\n                                                {reqRoom.nombre}\n                                            </Label>\n                                        </div>\n                                        {isChecked && (\n                                            <div className=\"flex items-center gap-2\">\n                                                <Label htmlFor={`level-${reqRoom.id}`} className=\"text-xs\">Nivel:</Label>\n                                                <Input\n                                                    id={`level-${reqRoom.id}`}\n                                                    type=\"number\"\n                                                    value={requirements.get(reqRoom.id) || ''}\n                                                    onChange={(e) => handleLevelChange(reqRoom.id, parseInt(e.target.value, 10))}\n                                                    className=\"h-8 w-20\"\n                                                    min=\"1\"\n                                                    placeholder=\"1\"\n                                                />\n                                            </div>\n                                        )}\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </ScrollArea>\n            <div className=\"flex justify-end gap-2 pt-4 border-t mt-4\">\n                <Button type=\"button\" variant=\"ghost\" onClick={onFinished}>Cancelar</Button>\n                <Button type=\"submit\" disabled={isPending}>\n                    {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Guardar\n                </Button>\n            </div>\n        </form>\n    );\n}\n"
                },
                {
                  "name": "training-config-form.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { useState, useTransition } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { saveTrainingConfig } from \"@/lib/actions/admin.actions\";\nimport { Loader2 } from \"lucide-react\";\nimport type { FullConfiguracionEntrenamiento } from \"@/lib/data\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface TrainingConfigFormProps {\n    training: FullConfiguracionEntrenamiento | null;\n    allTrainings: FullConfiguracionEntrenamiento[];\n    onFinished: () => void;\n}\n\nexport function TrainingConfigForm({ training, allTrainings, onFinished }: TrainingConfigFormProps) {\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n\n    const [formData, setFormData] = useState({\n        id: training?.id || '',\n        nombre: training?.nombre || '',\n        urlImagen: training?.urlImagen || '',\n        costoArmas: training?.costoArmas || 0,\n        costoMunicion: training?.costoMunicion || 0,\n        costoDolares: training?.costoDolares || 0,\n        duracion: training?.duracion || 0,\n        puntos: training?.puntos || 0,\n    });\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value, type } = e.target;\n        const isNumber = type === 'number';\n        setFormData(prev => ({\n            ...prev,\n            [name]: isNumber ? (parseFloat(value) || 0) : value\n        }));\n    };\n\n    const initialRequirements = new Map(\n        training?.requisitos.map(req => [req.requiredTrainingId, req.requiredLevel])\n    );\n    const [requirements, setRequirements] = useState<Map<string, number>>(initialRequirements);\n\n    const handleRequirementChange = (trainingId: string, checked: boolean) => {\n        const newRequirements = new Map(requirements);\n        if (checked) {\n            newRequirements.set(trainingId, 1);\n        } else {\n            newRequirements.delete(trainingId);\n        }\n        setRequirements(newRequirements);\n    };\n\n    const handleLevelChange = (trainingId: string, level: number) => {\n        const newRequirements = new Map(requirements);\n        if (level > 0) {\n            newRequirements.set(trainingId, level);\n        } else {\n            newRequirements.delete(trainingId);\n        }\n        setRequirements(newRequirements);\n    };\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const form = new FormData(e.currentTarget);\n        \n        requirements.forEach((level, id) => {\n            form.append('requirement_ids', id);\n            form.append(`requirement_level_${id}`, level.toString());\n        });\n\n        startTransition(async () => {\n            const result = await saveTrainingConfig(form);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: 'Configuraci\u00f3n guardada.' });\n                onFinished();\n            }\n        });\n    }\n\n    const availableRequirements = allTrainings.filter(t => t.id !== training?.id);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <ScrollArea className=\"max-h-[70vh] p-1 pr-6\">\n                <div className=\"space-y-4\">\n                    <input type=\"hidden\" name=\"originalId\" value={training?.id || ''} />\n                    <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"id\">ID</Label>\n                            <Input id=\"id\" name=\"id\" value={formData.id} onChange={handleInputChange} required disabled={!!training} />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"nombre\">Nombre</Label>\n                            <Input id=\"nombre\" name=\"nombre\" value={formData.nombre} onChange={handleInputChange} required />\n                        </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"urlImagen\">URL de Imagen</Label>\n                        <Input id=\"urlImagen\" name=\"urlImagen\" value={formData.urlImagen} onChange={handleInputChange} />\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoArmas\">Armas</Label>\n                            <Input id=\"costoArmas\" name=\"costoArmas\" type=\"number\" value={formData.costoArmas || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoMunicion\">Munici\u00f3n</Label>\n                            <Input id=\"costoMunicion\" name=\"costoMunicion\" type=\"number\" value={formData.costoMunicion || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoDolares\">D\u00f3lares</Label>\n                            <Input id=\"costoDolares\" name=\"costoDolares\" type=\"number\" value={formData.costoDolares || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"puntos\">Puntos</Label>\n                            <Input id=\"puntos\" name=\"puntos\" type=\"number\" step=\"0.01\" value={formData.puntos || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"duracion\">Duraci\u00f3n (s)</Label>\n                            <Input id=\"duracion\" name=\"duracion\" type=\"number\" value={formData.duracion || ''} onChange={handleInputChange} placeholder=\"0\" />\n                        </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label>Requisitos</Label>\n                        <div className=\"border rounded-md p-4 space-y-2 max-h-48 overflow-y-auto\">\n                            {availableRequirements.map(reqTraining => {\n                                const isChecked = requirements.has(reqTraining.id);\n                                return (\n                                    <div key={reqTraining.id} className=\"flex items-center gap-4\">\n                                        <div className=\"flex items-center gap-2 flex-1\">\n                                            <Checkbox\n                                                id={`req-${reqTraining.id}`}\n                                                checked={isChecked}\n                                                onCheckedChange={(checked) => handleRequirementChange(reqTraining.id, !!checked)}\n                                            />\n                                            <Label htmlFor={`req-${reqTraining.id}`} className=\"font-normal\">\n                                                {reqTraining.nombre}\n                                            </Label>\n                                        </div>\n                                        {isChecked && (\n                                            <div className=\"flex items-center gap-2\">\n                                                <Label htmlFor={`level-${reqTraining.id}`} className=\"text-xs\">Nivel:</Label>\n                                                <Input\n                                                    id={`level-${reqTraining.id}`}\n                                                    type=\"number\"\n                                                    value={requirements.get(reqTraining.id) || ''}\n                                                    onChange={(e) => handleLevelChange(reqTraining.id, parseInt(e.target.value, 10))}\n                                                    className=\"h-8 w-20\"\n                                                    min=\"1\"\n                                                    placeholder=\"1\"\n                                                />\n                                            </div>\n                                        )}\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </ScrollArea>\n            <div className=\"flex justify-end gap-2 pt-4 border-t mt-4\">\n                <Button type=\"button\" variant=\"ghost\" onClick={onFinished}>Cancelar</Button>\n                <Button type=\"submit\" disabled={isPending}>\n                    {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Guardar\n                </Button>\n            </div>\n        </form>\n    );\n}\n"
                },
                {
                  "name": "troop-config-form.tsx",
                  "type": "file",
                  "content": "\n\n'use client';\n\nimport { useTransition, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { saveTroopConfig } from \"@/lib/actions/admin.actions\";\nimport { Loader2, PlusCircle, Trash2 } from \"lucide-react\";\nimport type { ConfiguracionTropa, TipoTropa } from \"@prisma/client\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FullConfiguracionEntrenamiento, FullConfiguracionTropa } from \"@/lib/data\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useRouter } from \"next/navigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface TroopConfigFormProps {\n    troop: FullConfiguracionTropa | null;\n    allTrainings: FullConfiguracionEntrenamiento[];\n    allTroops: ConfiguracionTropa[];\n    tiposTropa: string[];\n}\n\nfunction CheckboxList({ title, items, selectedItems, onSelectionChange }: { title: string, items: {id: string, nombre: string}[], selectedItems: Set<string>, onSelectionChange: (id: string, checked: boolean) => void}) {\n    return (\n        <div className=\"space-y-2\">\n            <Label>{title}</Label>\n            <ScrollArea className=\"h-40 w-full rounded-md border p-4\">\n                 <div className=\"space-y-2\">\n                    {items.map(item => (\n                        <div key={item.id} className=\"flex items-center gap-2\">\n                            <Checkbox\n                                id={`${title}-${item.id}`}\n                                checked={selectedItems.has(item.id)}\n                                onCheckedChange={(checked) => onSelectionChange(item.id, !!checked)}\n                            />\n                            <Label htmlFor={`${title}-${item.id}`} className=\"font-normal\">\n                                {item.nombre}\n                            </Label>\n                        </div>\n                    ))}\n                 </div>\n            </ScrollArea>\n        </div>\n    )\n}\n\nexport function TroopConfigForm({ troop, allTrainings, allTroops, tiposTropa }: TroopConfigFormProps) {\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n    const router = useRouter();\n\n    const [formData, setFormData] = useState({\n        id: troop?.id || '',\n        nombre: troop?.nombre || '',\n        descripcion: troop?.descripcion || '',\n        urlImagen: troop?.urlImagen || '',\n        costoArmas: troop?.costoArmas || 0,\n        costoMunicion: troop?.costoMunicion || 0,\n        costoDolares: troop?.costoDolares || 0,\n        ataque: troop?.ataque || 0,\n        defensa: troop?.defensa || 0,\n        puntos: troop?.puntos || 0,\n        capacidad: troop?.capacidad || 0,\n        velocidad: troop?.velocidad.toString() || '0',\n        salario: troop?.salario || 0,\n        duracion: troop?.duracion || 0,\n        tipo: troop?.tipo || 'ATAQUE',\n    });\n    \n    const [bonusContrincantes, setBonusContrincantes] = useState(troop?.bonusContrincante || []);\n\n    const handleAddBonus = () => {\n        setBonusContrincantes([...bonusContrincantes, { id: Date.now().toString(), tropaAtacanteId: troop?.id || '', tropaDefensoraId: '', factorPrioridad: 1.0 }]);\n    };\n\n    const handleRemoveBonus = (id: string) => {\n        setBonusContrincantes(bonusContrincantes.filter(b => b.id !== id));\n    };\n\n    const handleBonusChange = (id: string, field: 'tropaDefensoraId' | 'factorPrioridad', value: string | number) => {\n        setBonusContrincantes(bonusContrincantes.map(b => b.id === id ? { ...b, [field]: value } : b));\n    };\n\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name, value, type } = e.target;\n        const isNumber = type === 'number';\n        setFormData(prev => ({\n            ...prev,\n            [name]: isNumber ? (parseFloat(value) || 0) : value\n        }));\n    };\n\n    const handleSelectChange = (name: string, value: string) => {\n        setFormData(prev => ({ ...prev, [name]: value }));\n    }\n    \n    const [bonusAtaque, setBonusAtaque] = useState(new Set(troop?.bonusAtaque || []));\n    const [bonusDefensa, setBonusDefensa] = useState(new Set(troop?.bonusDefensa || []));\n    const [requisitos, setRequisitos] = useState(new Set(troop?.requisitos || []));\n\n    const handleSelectionChange = (setter: React.Dispatch<React.SetStateAction<Set<string>>>, id: string, checked: boolean) => {\n        setter(prev => {\n            const newSet = new Set(prev);\n            if (checked) {\n                newSet.add(id);\n            } else {\n                newSet.delete(id);\n            }\n            return newSet;\n        });\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const form = new FormData(e.currentTarget);\n        form.append('bonusAtaque', Array.from(bonusAtaque).join(','));\n        form.append('bonusDefensa', Array.from(bonusDefensa).join(','));\n        form.append('requisitos', Array.from(requisitos).join(','));\n        form.append('bonusContrincantes', JSON.stringify(\n            bonusContrincantes.map(({id, tropaAtacanteId, ...rest}) => rest))\n        );\n        \n        startTransition(async () => {\n            const result = await saveTroopConfig(form);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: 'Configuraci\u00f3n guardada.' });\n                router.push('/admin/panel/troops');\n            }\n        });\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"flex flex-col h-full\">\n            <ScrollArea className=\"flex-grow p-1 pr-4\">\n                <div className=\"space-y-6\">\n                    <input type=\"hidden\" name=\"id\" value={troop?.id || ''} />\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"idForm\">ID (Editable solo al crear)</Label>\n                            <Input id=\"idForm\" name=\"idForm\" value={formData.id} onChange={handleInputChange} required disabled={!!troop} />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"nombre\">Nombre</Label>\n                            <Input id=\"nombre\" name=\"nombre\" value={formData.nombre} onChange={handleInputChange} required />\n                        </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"descripcion\">Descripci\u00f3n</Label>\n                        <Textarea id=\"descripcion\" name=\"descripcion\" value={formData.descripcion} onChange={handleInputChange} />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"urlImagen\">URL de Imagen</Label>\n                        <Input id=\"urlImagen\" name=\"urlImagen\" value={formData.urlImagen} onChange={handleInputChange} />\n                    </div>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoArmas\">Armas</Label>\n                            <Input id=\"costoArmas\" name=\"costoArmas\" type=\"number\" value={formData.costoArmas || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoMunicion\">Munici\u00f3n</Label>\n                            <Input id=\"costoMunicion\" name=\"costoMunicion\" type=\"number\" value={formData.costoMunicion || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"costoDolares\">D\u00f3lares</Label>\n                            <Input id=\"costoDolares\" name=\"costoDolares\" type=\"number\" value={formData.costoDolares || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"ataque\">Ataque</Label>\n                            <Input id=\"ataque\" name=\"ataque\" type=\"number\" value={formData.ataque || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"defensa\">Defensa</Label>\n                            <Input id=\"defensa\" name=\"defensa\" type=\"number\" value={formData.defensa || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"puntos\">Puntos</Label>\n                            <Input id=\"puntos\" name=\"puntos\" type=\"number\" step=\"0.01\" value={formData.puntos || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-4 gap-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"capacidad\">Capacidad</Label>\n                            <Input id=\"capacidad\" name=\"capacidad\" type=\"number\" value={formData.capacidad || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"velocidad\">Velocidad</Label>\n                            <Input id=\"velocidad\" name=\"velocidad\" type=\"text\" value={formData.velocidad} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"salario\">Salario</Label>\n                            <Input id=\"salario\" name=\"salario\" type=\"number\" value={formData.salario || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"duracion\">Duraci\u00f3n (s)</Label>\n                            <Input id=\"duracion\" name=\"duracion\" type=\"number\" value={formData.duracion || ''} onChange={handleInputChange} placeholder=\"0\"/>\n                        </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"tipo\">Tipo de Tropa</Label>\n                        <Select name=\"tipo\" value={formData.tipo} onValueChange={(value) => handleSelectChange('tipo', value)}>\n                            <SelectTrigger>\n                                <SelectValue placeholder=\"Selecciona un tipo\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                {tiposTropa.map(tipo => (\n                                    <SelectItem key={tipo} value={tipo}>{tipo}</SelectItem>\n                                ))}\n                            </SelectContent>\n                        </Select>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                        <CheckboxList \n                            title=\"Bonus Ataque (Entrenamientos)\"\n                            items={allTrainings}\n                            selectedItems={bonusAtaque}\n                            onSelectionChange={(id, checked) => handleSelectionChange(setBonusAtaque, id, checked)}\n                        />\n\n                        <CheckboxList \n                            title=\"Bonus Defensa (Entrenamientos)\"\n                            items={allTrainings}\n                            selectedItems={bonusDefensa}\n                            onSelectionChange={(id, checked) => handleSelectionChange(setBonusDefensa, id, checked)}\n                        />\n\n                        <CheckboxList \n                            title=\"Requisitos de Entrenamiento\"\n                            items={allTrainings}\n                            selectedItems={requisitos}\n                            onSelectionChange={(id, checked) => handleSelectionChange(setRequisitos, id, checked)}\n                        />\n                    </div>\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Bonificaciones de Ataque Espec\u00edficas</CardTitle>\n                            <CardDescription>\n                                Define un multiplicador de da\u00f1o contra tipos de tropa espec\u00edficos. El valor por defecto es 1.\n                            </CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2\">\n                            {bonusContrincantes.map((bonus, index) => (\n                                <div key={bonus.id} className=\"flex items-center gap-2 p-2 border rounded-md\">\n                                    <Select \n                                        value={bonus.tropaDefensoraId} \n                                        onValueChange={(value) => handleBonusChange(bonus.id, 'tropaDefensoraId', value)}\n                                    >\n                                        <SelectTrigger>\n                                            <SelectValue placeholder=\"Selecciona Tropa Defensora...\" />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                            {allTroops.map(t => (\n                                                <SelectItem key={t.id} value={t.id}>{t.nombre}</SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n                                    <Input\n                                        type=\"number\"\n                                        step=\"0.1\"\n                                        min=\"0.1\"\n                                        max=\"2.9\"\n                                        value={bonus.factorPrioridad}\n                                        onChange={(e) => handleBonusChange(bonus.id, 'factorPrioridad', parseFloat(e.target.value))}\n                                        className=\"w-24\"\n                                    />\n                                    <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={() => handleRemoveBonus(bonus.id)}>\n                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                    </Button>\n                                </div>\n                            ))}\n                            <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={handleAddBonus}>\n                                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                                A\u00f1adir Bonificaci\u00f3n de Ataque\n                            </Button>\n                        </CardContent>\n                    </Card>\n                </div>\n            </ScrollArea>\n            <div className=\"flex justify-end gap-2 pt-6 border-t mt-6 shrink-0\">\n                <Button type=\"button\" variant=\"ghost\" onClick={() => router.push('/admin/panel/troops')}>Cancelar</Button>\n                <Button type=\"submit\" disabled={isPending}>\n                    {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Guardar\n                </Button>\n            </div>\n        </form>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "room-config-table.tsx",
              "type": "file",
              "content": "\n\n'use client';\nimport { useState } from \"react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../ui/card\";\nimport { Button } from \"../ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"../ui/dialog\";\nimport { RoomConfigForm } from \"./forms/room-config-form\";\nimport { deleteRoomConfig } from \"@/lib/actions/admin.actions\";\nimport { DeleteConfigButton } from \"./delete-config-button\";\nimport { ConfiguracionHabitacion } from \"@prisma/client\";\nimport { PlusCircle } from \"lucide-react\";\nimport { ScrollArea } from \"../ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\ninterface RoomConfigTableProps {\n    initialData: (ConfiguracionHabitacion & { requisitos: { requiredRoomId: string; requiredLevel: number }[] })[];\n}\n\nfunction formatRequirements(requisitos: RoomConfigTableProps['initialData'][0]['requisitos'], allRooms: RoomConfigTableProps['initialData']) {\n    if (!requisitos || requisitos.length === 0) return '-';\n    const allRoomsMap = new Map(allRooms.map(r => [r.id, r.nombre]));\n    return requisitos.map(req => `${allRoomsMap.get(req.requiredRoomId) || req.requiredRoomId} (Nvl ${req.requiredLevel})`).join(', ');\n}\n\n\nexport function RoomConfigTable({ initialData }: RoomConfigTableProps) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [selectedRoom, setSelectedRoom] = useState<(ConfiguracionHabitacion & { requisitos: { requiredRoomId: string; requiredLevel: number }[] }) | null>(null);\n\n    const handleEdit = (room: ConfiguracionHabitacion & { requisitos: { requiredRoomId: string; requiredLevel: number }[] }) => {\n        setSelectedRoom(room);\n        setIsOpen(true);\n    };\n\n    const handleCreate = () => {\n        setSelectedRoom(null);\n        setIsOpen(true);\n    }\n    \n    return (\n        <>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n                <div>\n                     <CardTitle>Configuraci\u00f3n de Habitaciones</CardTitle>\n                </div>\n                <Button onClick={handleCreate} size=\"sm\">\n                    <PlusCircle className=\"mr-2 h-4 w-4\" />\n                    Crear Nueva Habitacion\n                </Button>\n            </CardHeader>\n            <CardContent>\n                <ScrollArea className=\"h-[70vh] w-full rounded-md border\">\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead className=\"sticky top-0 bg-muted z-10\">ID</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10\">Nombre</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10 hidden sm:table-cell\">Requisitos</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10 text-right\">Puntos</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10 text-right\">Armas</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10 text-right\">Acciones</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {initialData.map(room => (\n                                <TableRow key={room.id} className=\"even:bg-muted/50\">\n                                    <TableCell className=\"font-mono text-xs\">{room.id}</TableCell>\n                                    <TableCell className=\"font-medium\">{room.nombre}</TableCell>\n                                    <TableCell className=\"text-xs hidden sm:table-cell\">{formatRequirements(room.requisitos, initialData)}</TableCell>\n                                    <TableCell className=\"text-right\">{room.puntos}</TableCell>\n                                    <TableCell className=\"text-right\">{room.costoArmas.toLocaleString('de-DE')}</TableCell>\n                                    <TableCell className=\"text-right space-x-2\">\n                                        <Button variant=\"outline\" size=\"sm\" onClick={() => handleEdit(room)}>Editar</Button>\n                                        <DeleteConfigButton id={room.id} action={deleteRoomConfig} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </ScrollArea>\n            </CardContent>\n            <Dialog open={isOpen} onOpenChange={setIsOpen}>\n                <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                        <DialogTitle>{selectedRoom ? 'Editar' : 'Crear'} Habitaci\u00f3n</DialogTitle>\n                    </DialogHeader>\n                    <RoomConfigForm \n                        room={selectedRoom} \n                        allRooms={initialData}\n                        onFinished={() => setIsOpen(false)} \n                    />\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n"
            },
            {
              "name": "training-config-table.tsx",
              "type": "file",
              "content": "\n\n'use client';\nimport { useState } from \"react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../ui/card\";\nimport { Button } from \"../ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"../ui/dialog\";\nimport { TrainingConfigForm } from \"./forms/training-config-form\";\nimport { deleteTrainingConfig } from \"@/lib/actions/admin.actions\";\nimport { DeleteConfigButton } from \"./delete-config-button\";\nimport { FullConfiguracionEntrenamiento } from \"@/lib/data\";\nimport { PlusCircle } from \"lucide-react\";\nimport { ScrollArea } from \"../ui/scroll-area\";\n\ninterface TrainingConfigTableProps {\n    initialData: FullConfiguracionEntrenamiento[];\n}\n\nfunction formatRequirements(requisitos: FullConfiguracionEntrenamiento['requisitos'], allTrainings: FullConfiguracionEntrenamiento[]) {\n    if (!requisitos || requisitos.length === 0) return '-';\n    const allTrainingsMap = new Map(allTrainings.map(t => [t.id, t.nombre]));\n    return requisitos.map(req => `${allTrainingsMap.get(req.requiredTrainingId) || req.requiredTrainingId} (Nvl ${req.requiredLevel})`).join(', ');\n}\n\n\nexport function TrainingConfigTable({ initialData }: TrainingConfigTableProps) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [selectedItem, setSelectedItem] = useState<FullConfiguracionEntrenamiento | null>(null);\n\n    const handleEdit = (item: FullConfiguracionEntrenamiento) => {\n        setSelectedItem(item);\n        setIsOpen(true);\n    };\n\n    const handleCreate = () => {\n        setSelectedItem(null);\n        setIsOpen(true);\n    }\n    \n    return (\n        <>\n             <CardHeader className=\"flex flex-row items-center justify-between\">\n                <div>\n                     <CardTitle>Configuraci\u00f3n de Entrenamientos</CardTitle>\n                </div>\n                <Button onClick={handleCreate} size=\"sm\">\n                    <PlusCircle className=\"mr-2 h-4 w-4\" />\n                    Crear Nuevo Entrenamiento\n                </Button>\n            </CardHeader>\n             <CardContent>\n                <ScrollArea className=\"h-[70vh] w-full rounded-md border\">\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead className=\"sticky top-0 bg-muted z-10\">ID</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10\">Nombre</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10 hidden sm:table-cell\">Requisitos</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10 text-right\">Puntos</TableHead>\n                                <TableHead className=\"sticky top-0 bg-muted z-10 text-right\">Acciones</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {initialData.map(training => (\n                                <TableRow key={training.id} className=\"even:bg-muted/50\">\n                                    <TableCell className=\"font-mono text-xs\">{training.id}</TableCell>\n                                    <TableCell className=\"font-medium\">{training.nombre}</TableCell>\n                                    <TableCell className=\"text-xs hidden sm:table-cell\">{formatRequirements(training.requisitos, initialData)}</TableCell>\n                                    <TableCell className=\"text-right\">{training.puntos}</TableCell>\n                                    <TableCell className=\"text-right space-x-2\">\n                                        <Button variant=\"outline\" size=\"sm\" onClick={() => handleEdit(training)}>Editar</Button>\n                                        <DeleteConfigButton id={training.id} action={deleteTrainingConfig} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </ScrollArea>\n             </CardContent>\n            <Dialog open={isOpen} onOpenChange={setIsOpen}>\n                <DialogContent>\n                    <DialogHeader>\n                        <DialogTitle>{selectedItem ? 'Editar' : 'Crear'} Entrenamiento</DialogTitle>\n                    </DialogHeader>\n                    <TrainingConfigForm \n                        training={selectedItem} \n                        allTrainings={initialData}\n                        onFinished={() => setIsOpen(false)} \n                    />\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n"
            },
            {
              "name": "troop-config-table.tsx",
              "type": "file",
              "content": "\n\n'use client';\nimport { useState } from \"react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"../ui/table\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"../ui/card\";\nimport { Button } from \"../ui/button\";\nimport type { TipoTropa } from \"@prisma/client\";\nimport { DeleteConfigButton } from \"./delete-config-button\";\nimport { deleteTroopConfig } from \"@/lib/actions/admin.actions\";\nimport { FullConfiguracionEntrenamiento, FullConfiguracionTropa } from \"@/lib/data\";\nimport Link from \"next/link\";\nimport { PlusCircle } from \"lucide-react\";\n\ninterface TroopConfigTableProps {\n    initialData: FullConfiguracionTropa[];\n    allTrainings: FullConfiguracionEntrenamiento[];\n    tiposTropa: string[];\n}\n\nexport function TroopConfigTable({ initialData, allTrainings, tiposTropa }: TroopConfigTableProps) {\n    \n    return (\n        <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n                <div>\n                     <CardTitle>Configuraci\u00f3n de Tropas</CardTitle>\n                    <CardDescription>\n                        Define las estad\u00edsticas, costos y requisitos de todas las unidades del juego.\n                    </CardDescription>\n                </div>\n                <Button asChild size=\"sm\">\n                    <Link href=\"/admin/panel/troops/new\">\n                        <PlusCircle className=\"mr-2 h-4 w-4\" />\n                        Crear Nueva Tropa\n                    </Link>\n                </Button>\n            </CardHeader>\n            <CardContent>\n                <div className=\"rounded-md border\">\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead>Nombre</TableHead>\n                                <TableHead className=\"hidden sm:table-cell\">Puntos</TableHead>\n                                <TableHead className=\"text-right\">Ataque</TableHead>\n                                <TableHead className=\"text-right\">Defensa</TableHead>\n                                <TableHead className=\"hidden md:table-cell\">Tipo</TableHead>\n                                <TableHead className=\"text-right\">Acciones</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {initialData.map(troop => (\n                                <TableRow key={troop.id}>\n                                    <TableCell className=\"font-medium\">{troop.nombre}</TableCell>\n                                    <TableCell className=\"hidden sm:table-cell\">{troop.puntos}</TableCell>\n                                    <TableCell className=\"text-right\">{troop.ataque.toLocaleString('de-DE')}</TableCell>\n                                    <TableCell className=\"text-right\">{troop.defensa.toLocaleString('de-DE')}</TableCell>\n                                    <TableCell className=\"hidden md:table-cell\">{troop.tipo}</TableCell>\n                                    <TableCell className=\"text-right space-x-2\">\n                                        <Button asChild variant=\"outline\" size=\"sm\">\n                                            <Link href={`/admin/panel/troops/${troop.id}`}>Editar</Link>\n                                        </Button>\n                                        <DeleteConfigButton id={troop.id} action={deleteTroopConfig} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\n"
            }
          ]
        },
        {
          "name": "dashboard",
          "type": "directory",
          "children": [
            {
              "name": "brawls",
              "type": "directory",
              "children": [
                {
                  "name": "battle-report-display.tsx",
                  "type": "file",
                  "content": "// src/components/lab/battle-report-display.tsx\n'use client';\n\nimport type { BattleReport, BattleRound, CombatStats } from '@/lib/types/simulation.types';\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardHeader,\n    CardTitle,\n} from '@/components/ui/card';\nimport {\n    Accordion,\n    AccordionContent,\n    AccordionItem,\n    AccordionTrigger,\n} from '@/components/ui/accordion';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from '@/components/ui/table';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { resourceIcons } from '@/lib/constants';\nimport Image from 'next/image';\n\ninterface BattleReportDisplayProps {\n    report: BattleReport | null;\n}\n\nfunction formatNumber(num: number): string {\n    if(num === undefined || num === null) return \"0\";\n    return Math.floor(num).toLocaleString('de-DE');\n}\n\nconst getWinnerBadgeVariant = (winner: 'attacker' | 'defender' | 'draw') => {\n    switch (winner) {\n        case 'attacker':\n            return 'default';\n        case 'defender':\n            return 'destructive';\n        case 'draw':\n        default:\n            return 'outline';\n    }\n};\n\nconst StatsCard = ({ title, stats, lootedResources }: { title: string, stats: CombatStats[keyof CombatStats], lootedResources?: CombatStats['attacker']['lootedResources'] }) => (\n    <div className=\"space-y-2 rounded-lg border p-4\">\n        <h4 className=\"font-semibold text-center\">{title}</h4>\n        <Separator />\n        <div className=\"text-sm\">\n            <div className=\"flex justify-between\"><span>Tropas Perdidas:</span> <span className=\"font-mono\">{stats.troopsLost.toLocaleString()}</span></div>\n            <div className=\"flex justify-between\"><span>Puntos Perdidos:</span> <span className=\"font-mono\">{stats.pointsLost.toLocaleString()}</span></div>\n        </div>\n        <div>\n            <h5 className=\"text-xs text-muted-foreground mb-1\">Recursos Perdidos:</h5>\n            <div className=\"text-sm space-y-1\">\n                <div className=\"flex justify-between\"><span>Armas:</span> <span className=\"font-mono\">{stats.resourcesLost.armas.toLocaleString()}</span></div>\n                <div className=\"flex justify-between\"><span>Munici\u00f3n:</span> <span className=\"font-mono\">{stats.resourcesLost.municion.toLocaleString()}</span></div>\n                <div className=\"flex justify-between\"><span>D\u00f3lares:</span> <span className=\"font-mono\">{stats.resourcesLost.dolares.toLocaleString()}</span></div>\n            </div>\n        </div>\n        {lootedResources && (\n            <div className='mt-2'>\n                <h5 className=\"text-xs text-green-400 mb-1\">Bot\u00edn Obtenido:</h5>\n                 <div className=\"text-sm space-y-1\">\n                    {Object.entries(lootedResources).map(([key, value]) => (\n                        value > 0 && (\n                            <div key={key} className=\"flex justify-between\">\n                                <span className='capitalize flex items-center gap-1.5'><Image src={resourceIcons[key]} alt={key} width={12} height={12}/>{key}:</span> \n                                <span className=\"font-mono text-green-400\">+{value.toLocaleString()}</span>\n                            </div>\n                        )\n                    ))}\n                </div>\n            </div>\n        )}\n    </div>\n);\n\n\nconst RoundDetails = ({ round }: { round: BattleRound }) => {\n    const combinedTroops = round.attacker.troops.map(attackerTroop => {\n        const defenderTroop = round.defender.troops.find(t => t.id === attackerTroop.id);\n        return {\n            id: attackerTroop.id,\n            nombre: attackerTroop.nombre,\n            attackerInitial: attackerTroop.initialQuantity,\n            attackerLost: attackerTroop.lostQuantity,\n            defenderInitial: defenderTroop?.initialQuantity || 0,\n            defenderLost: defenderTroop?.lostQuantity || 0,\n        };\n    });\n\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"rounded-md border\">\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Tropa</TableHead>\n                            <TableHead className=\"text-center\">Atacante</TableHead>\n                            <TableHead className=\"text-center text-destructive\">P\u00e9rdidas</TableHead>\n                            <TableHead className=\"text-center\">Defensor</TableHead>\n                            <TableHead className=\"text-center text-destructive\">P\u00e9rdidas</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        {combinedTroops.map(t => (\n                            <TableRow key={t.id}>\n                                <TableCell className=\"font-medium\">{t.nombre}</TableCell>\n                                <TableCell className=\"text-center font-mono\">{formatNumber(t.attackerInitial)}</TableCell>\n                                <TableCell className=\"text-center font-mono text-destructive\">{formatNumber(t.attackerLost)}</TableCell>\n                                <TableCell className=\"text-center font-mono\">{formatNumber(t.defenderInitial)}</TableCell>\n                                <TableCell className=\"text-center font-mono text-destructive\">{formatNumber(t.defenderLost)}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n    );\n};\n\nexport function BattleReportDisplay({ report }: BattleReportDisplayProps) {\n    if (!report) {\n        return (\n             <Card className=\"mt-6\">\n                <CardHeader>\n                    <CardTitle>Reporte de Batalla</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <p className=\"text-muted-foreground text-center py-8\">\n                        Realiza una simulaci\u00f3n para ver aqu\u00ed el reporte de batalla.\n                    </p>\n                </CardContent>\n            </Card>\n        );\n    }\n\n    return (\n        <Card className=\"mt-6 animate-fade-in\">\n            <CardHeader>\n                <CardTitle className=\"flex justify-between items-center\">\n                    <span>Reporte de Batalla</span>\n                     <Badge variant={getWinnerBadgeVariant(report.winner)} className=\"capitalize text-base px-3 py-1\">\n                        {report.winner === 'draw' ? 'Empate' : `Victoria: ${report.winner}`}\n                    </Badge>\n                </CardTitle>\n                <CardDescription>{report.finalMessage}</CardDescription>\n            </CardHeader>\n            <CardContent>\n                 <Accordion type=\"single\" collapsible className=\"w-full\" defaultValue=\"round-1\">\n                    {report.rounds.map(round => (\n                         <AccordionItem value={`round-${round.round}`} key={round.round}>\n                            <AccordionTrigger className=\"text-lg font-semibold\">\n                                RONDA DE BATALLA {round.round}\n                            </AccordionTrigger>\n                            <AccordionContent>\n                                <RoundDetails round={round} />\n                            </AccordionContent>\n                        </AccordionItem>\n                    ))}\n                </Accordion>\n                \n                <Separator className=\"my-6\" />\n\n                <div className=\"space-y-4\">\n                    <h3 className=\"text-xl font-semibold text-center\">ESTAD\u00cdSTICAS FINALES DE COMBATE</h3>\n                     <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <StatsCard title=\"P\u00e9rdidas del Atacante\" stats={report.finalStats.attacker} lootedResources={report.finalStats.attacker.lootedResources} />\n                        <StatsCard title=\"P\u00e9rdidas del Defensor\" stats={report.finalStats.defender} />\n                    </div>\n                </div>\n\n            </CardContent>\n        </Card>\n    );\n}\n"
                },
                {
                  "name": "brawl-detail.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { BattleReport } from \"@/lib/types/simulation.types\";\nimport type { FullBattleReport } from \"@/lib/types\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, CheckCircle, XCircle } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/navigation\";\n\ninterface BrawlDetailProps {\n    report: FullBattleReport;\n    currentUserId: string;\n}\n\nfunction formatNumber(num: number): string {\n    if(num === undefined || num === null) return \"0\";\n    return Math.floor(num).toLocaleString('de-DE');\n}\n\nconst StatLossBar = ({ label, attackerValue, defenderValue }: { label: string, attackerValue: number, defenderValue: number}) => {\n    const total = attackerValue + defenderValue;\n    const attackerPercent = total > 0 ? (attackerValue / total) * 100 : 0;\n    const defenderPercent = total > 0 ? (defenderValue / total) * 100 : 0;\n    \n    return (\n        <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-baseline text-sm\">\n                <span className=\"text-blue-400 font-semibold\">{formatNumber(attackerValue)}</span>\n                <span className=\"text-muted-foreground\">{label}</span>\n                <span className=\"text-red-400 font-semibold\">{formatNumber(defenderValue)}</span>\n            </div>\n            <div className=\"flex w-full h-3 rounded-full bg-muted overflow-hidden\">\n                <div style={{ width: `${attackerPercent}%`}} className=\"bg-blue-600/80 transition-all duration-500 ease-in-out\" />\n                <div style={{ width: `${defenderPercent}%`}} className=\"bg-red-800/80 transition-all duration-500 ease-in-out\" />\n            </div>\n        </div>\n    )\n}\n\nexport function BrawlDetail({ report, currentUserId }: BrawlDetailProps) {\n    const router = useRouter();\n    if (!report.details) return null;\n    \n    const details = report.details as unknown as BattleReport;\n\n    return (\n        <div className=\"w-full max-w-4xl mx-auto bg-black/80 border-primary border text-white font-mono flex flex-col h-full rounded-lg\">\n            <div className=\"p-6 pb-2 shrink-0 text-center\">\n                <h2 className=\"text-2xl text-primary tracking-widest font-heading\">\n                    INFORME DE BATALLA\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                    {new Date(report.createdAt).toLocaleString('es-ES')}\n                </p>\n            </div>\n             <div className=\"flex flex-row items-center justify-around p-4 border-y border-dashed border-white/20 gap-4 shrink-0\">\n                <Link href={`/profile/${report.attacker.id}`} className={cn(\"flex flex-col items-center gap-2\", details.winner === 'attacker' && \"border-2 border-amber-400 p-2 rounded-lg\")}>\n                    <Avatar className=\"h-16 w-16 md:h-20 md:w-20\">\n                        <AvatarImage src={report.attacker.avatarUrl || ''} alt={report.attacker.name} />\n                        <AvatarFallback>{report.attacker.name.charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <span className=\"font-bold text-base md:text-lg\">{report.attacker.name}</span>\n                    <span className=\"text-xs text-red-400\">P\u00e9rdidas: {formatNumber(details.finalStats.attacker.troopsLost)}</span>\n                </Link>\n                <span className=\"text-3xl md:text-5xl font-black text-destructive\">VS</span>\n                <Link href={`/profile/${report.defender.id}`} className={cn(\"flex flex-col items-center gap-2\", details.winner === 'defender' && \"border-2 border-amber-400 p-2 rounded-lg\")}>\n                    <Avatar className=\"h-16 w-16 md:h-20 md:w-20\">\n                        <AvatarImage src={report.defender.avatarUrl || ''} alt={report.defender.name} />\n                        <AvatarFallback>{report.defender.name.charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <span className=\"font-bold text-base md:text-lg\">{report.defender.name}</span>\n                    <span className=\"text-xs text-red-400\">P\u00e9rdidas: {formatNumber(details.finalStats.defender.troopsLost)}</span>\n                </Link>\n            </div>\n            <ScrollArea className=\"flex-grow min-h-0\">\n                <div className=\"space-y-4 p-4\">\n                    <Card className={cn(\"p-4 text-center transition-all duration-300 ease-in-out\", \n                        details.winner === 'attacker' && \"bg-green-900/50 border-green-500/50\",\n                        details.winner === 'defender' && \"bg-red-900/50 border-red-500/50\",\n                        details.winner === 'draw' && \"bg-muted/50\"\n                    )}>\n                        <h3 className={cn(\"text-xl font-bold flex items-center justify-center gap-2\",\n                            details.winner === 'attacker' && \"text-green-400\",\n                            details.winner === 'defender' && \"text-red-400\"\n                        )}>\n                            {details.winner === 'attacker' && <CheckCircle />}\n                            {details.winner === 'defender' && <XCircle />}\n                            {details.finalMessage}\n                        </h3>\n                        <Separator className=\"my-2 bg-white/10\"/>\n                        <div className=\"flex justify-around text-sm\">\n                            <div>\n                                <p className=\"text-muted-foreground\">Puntos Perdidos (Atacante)</p>\n                                <p className=\"font-bold text-lg text-red-400\">{formatNumber(details.finalStats.attacker.pointsLost)}</p>\n                            </div>\n                                <div>\n                                <p className=\"text-muted-foreground\">Puntos Perdidos (Defensor)</p>\n                                <p className=\"font-bold text-lg text-red-400\">{formatNumber(details.finalStats.defender.pointsLost)}</p>\n                            </div>\n                        </div>\n                    </Card>\n                    <Card>\n                        <CardHeader><CardTitle className=\"text-lg\">Resumen de P\u00e9rdidas</CardTitle></CardHeader>\n                        <CardContent className=\"space-y-4\">\n                            <div className=\"flex justify-between text-sm font-bold\">\n                                <span className=\"text-blue-400\">Atacante</span>\n                                <span className=\"text-red-400\">Defensor</span>\n                            </div>\n                            <Separator className=\"bg-white/10\" />\n                            <StatLossBar label=\"Tropas\" attackerValue={details.finalStats.attacker.troopsLost} defenderValue={details.finalStats.defender.troopsLost} />\n                            <StatLossBar label=\"Armas\" attackerValue={details.finalStats.attacker.resourcesLost.armas} defenderValue={details.finalStats.defender.resourcesLost.armas} />\n                            <StatLossBar label=\"Munici\u00f3n\" attackerValue={details.finalStats.attacker.resourcesLost.municion} defenderValue={details.finalStats.defender.resourcesLost.municion} />\n                            <StatLossBar label=\"D\u00f3lares\" attackerValue={details.finalStats.attacker.resourcesLost.dolares} defenderValue={details.finalStats.defender.resourcesLost.dolares} />\n                        </CardContent>\n                    </Card>\n\n                    {details.rounds.map(round => (\n                        <div key={round.round} className=\"space-y-2\">\n                            <div className=\"bg-primary/80 text-primary-foreground text-center font-bold font-heading py-1\">\n                                RONDA DE BATALLA {round.round}\n                            </div>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                {/* Atacante */}\n                                <div>\n                                    <h4 className='font-bold text-center mb-1 font-heading'>Atacante</h4>\n                                    <Table>\n                                        <TableHeader>\n                                            <TableRow className=\"border-b-primary/50\">\n                                                <TableHead className=\"text-white\">Tropa</TableHead>\n                                                <TableHead className=\"text-right text-white\">Cant.</TableHead>\n                                                <TableHead className=\"text-right text-red-500\">P\u00e9rdidas</TableHead>\n                                            </TableRow>\n                                        </TableHeader>\n                                        <TableBody>\n                                            {round.attacker.troops.map(t => (\n                                                <TableRow key={t.id} className=\"border-b-primary/20\">\n                                                    <TableCell>{t.nombre}</TableCell>\n                                                    <TableCell className=\"text-right\">{formatNumber(t.initialQuantity)}</TableCell>\n                                                    <TableCell className=\"text-right text-red-500\">{formatNumber(t.lostQuantity)}</TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </div>\n                                 {/* Defensor */}\n                                <div>\n                                     <h4 className='font-bold text-center mb-1 font-heading'>Defensor</h4>\n                                    <Table>\n                                        <TableHeader>\n                                            <TableRow className=\"border-b-primary/50\">\n                                                <TableHead className=\"text-white\">Tropa</TableHead>\n                                                <TableHead className=\"text-right text-white\">Cant.</TableHead>\n                                                <TableHead className=\"text-right text-red-500\">P\u00e9rdidas</TableHead>\n                                            </TableRow>\n                                        </TableHeader>\n                                        <TableBody>\n                                            {round.defender.troops.map(t => (\n                                                <TableRow key={t.id} className=\"border-b-primary/20\">\n                                                    <TableCell>{t.nombre}</TableCell>\n                                                    <TableCell className=\"text-right\">{formatNumber(t.initialQuantity)}</TableCell>\n                                                    <TableCell className=\"text-right text-red-500\">{formatNumber(t.lostQuantity)}</TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </div>\n                            </div>\n                            \n                            <div className=\"bg-primary/80 text-primary-foreground text-center font-bold font-heading py-1 mt-2\">\n                                ESTADO RONDA {round.round}\n                            </div>\n                            <div className=\"grid grid-cols-2 gap-x-4 p-2 text-sm font-mono\">\n                                 <div><span className=\"font-bold\">Ataque Atacante:</span> {formatNumber(round.attacker.totalAttackConBonus)} {round.attacker.poderAtaquePercent ? `(${round.attacker.poderAtaquePercent.toFixed(2)}%)` : ''}</div>\n                                 <div className=\"text-right\"><span className=\"font-bold\">Defensa Defensor:</span> {formatNumber(round.defender.totalDefense)}</div>\n                                 <div><span className=\"font-bold\">Ataque Defensor:</span> {formatNumber(round.defender.totalAttackConBonus)} {round.defender.poderAtaquePercent ? `(${round.defender.poderAtaquePercent.toFixed(2)}%)` : ''}</div>\n                                 <div className=\"text-right\"><span className=\"font-bold\">Defensa Atacante:</span> {formatNumber(round.attacker.totalDefense)}</div>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </ScrollArea>\n            <div className=\"p-4 pt-4 border-t shrink-0\">\n                <Button onClick={() => router.back()} className=\"w-full\" variant=\"outline\">\n                    <ArrowLeft className=\"mr-2 h-4 w-4\"/>\n                    Volver a Informes\n                </Button>\n            </div>\n        </div>\n    );\n}\n"
                },
                {
                  "name": "brawls-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from '@/lib/utils';\nimport { Swords, Shield, ChevronsRight } from \"lucide-react\";\nimport { Button } from '@/components/ui/button';\nimport type { FullBattleReport } from '@/lib/types';\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useRouter } from 'next/navigation';\n\ninterface BrawlsViewProps {\n    initialReports: FullBattleReport[];\n    currentUserId: string;\n}\n\ntype FilterType = 'all' | 'attacks' | 'defenses' | 'victories' | 'defeats';\n\nexport function BrawlsView({ initialReports, currentUserId }: BrawlsViewProps) {\n    const router = useRouter();\n    const [filter, setFilter] = useState<FilterType>('all');\n\n    const filteredReports = initialReports.filter(report => {\n        const isAttacker = report.attackerId === currentUserId;\n        const wasVictory = (isAttacker && report.winner === 'attacker') || (!isAttacker && report.winner === 'defender');\n\n        if (filter === 'all') return true;\n        if (filter === 'attacks' && isAttacker) return true;\n        if (filter === 'defenses' && !isAttacker) return true;\n        if (filter === 'victories' && wasVictory) return true;\n        if (filter === 'defeats' && !wasVictory) return true;\n        return false;\n    }).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n    return (\n        <>\n            <div className=\"flex justify-center mb-4 flex-wrap\">\n                 <ToggleGroup type=\"single\" value={filter} onValueChange={(value: FilterType) => value && setFilter(value)} className=\"flex-wrap justify-center\">\n                    <ToggleGroupItem value=\"all\" aria-label=\"Todas\">Todas</ToggleGroupItem>\n                    <ToggleGroupItem value=\"attacks\" aria-label=\"Ataques\">Ataques</ToggleGroupItem>\n                    <ToggleGroupItem value=\"defenses\" aria-label=\"Defensas\">Defensas</ToggleGroupItem>\n                    <ToggleGroupItem value=\"victories\" aria-label=\"Victorias\">Victorias</ToggleGroupItem>\n                    <ToggleGroupItem value=\"defeats\" aria-label=\"Derrotas\">Derrotas</ToggleGroupItem>\n                </ToggleGroup>\n            </div>\n            <Card>\n                 <ScrollArea className=\"h-[calc(100vh-340px)]\">\n                    <CardContent className=\"p-0\">\n                        <div className=\"divide-y divide-border\">\n                            {filteredReports.length > 0 ? (\n                                filteredReports.map(report => {\n                                    const isAttacker = report.attackerId === currentUserId;\n                                    const opponent = isAttacker ? report.defender : report.attacker;\n                                    const wasVictory = (isAttacker && report.winner === 'attacker') || (!isAttacker && report.winner === 'defender');\n\n                                    return (\n                                        <div\n                                            key={report.id}\n                                            className={cn(\n                                                \"p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 cursor-pointer hover:bg-muted/50 transition-colors ease-in-out\",\n                                                wasVictory ? \"border-l-4 border-green-500/70\" : \"border-l-4 border-destructive/70\"\n                                            )}\n                                            onClick={() => router.push(`/brawls/${report.id}`)}\n                                        >\n                                            <div className=\"flex items-center gap-4\">\n                                                <div className=\"flex-shrink-0\">\n                                                    {isAttacker ? (\n                                                        <Swords className={cn(\"h-8 w-8\", wasVictory ? \"text-green-500\" : \"text-destructive\")} />\n                                                    ) : (\n                                                        <Shield className={cn(\"h-8 w-8\", wasVictory ? \"text-green-500\" : \"text-destructive\")} />\n                                                    )}\n                                                </div>\n                                                <div>\n                                                    <p className=\"font-bold\">\n                                                        {isAttacker ? \"Ataque a\" : \"Defensa contra\"} {opponent.name}\n                                                    </p>\n                                                    <p className=\"text-xs text-muted-foreground\">\n                                                        {new Date(report.createdAt).toLocaleString('es-ES')}\n                                                    </p>\n                                                </div>\n                                            </div>\n                                            <div className=\"sm:ml-auto\">\n                                                <Button variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\n                                                    Ver Informe\n                                                    <ChevronsRight className=\"ml-2 h-4 w-4\" />\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    );\n                                })\n                            ) : (\n                                <div className=\"p-8 text-center text-muted-foreground\">\n                                    No hay informes que coincidan con el filtro.\n                                </div>\n                            )}\n                        </div>\n                    </CardContent>\n                 </ScrollArea>\n            </Card>\n        </>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "buildings",
              "type": "directory",
              "children": [
                {
                  "name": "buildings-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { useState, useTransition } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { FullPropiedad } from \"@/lib/types\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { updatePropertyDetails } from \"@/lib/actions/user.actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ntype PropertyWithPoints = FullPropiedad & { puntos: number };\n\ninterface BuildingsViewProps {\n    initialProperties: PropertyWithPoints[];\n}\n\nfunction formatPoints(points: number): string {\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nexport function BuildingsView({ initialProperties }: BuildingsViewProps) {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n    const [properties, setProperties] = useState(initialProperties);\n    const [mainPropertyId, setMainPropertyId] = useState(\n        initialProperties.find(p => p.nombre === 'Propiedad Principal')?.id || initialProperties[0]?.id\n    );\n\n    const handleNameChange = (id: string, newName: string) => {\n        setProperties(prev => prev.map(p => p.id === id ? { ...p, nombre: newName } : p));\n    };\n\n    const handleSubmit = () => {\n        startTransition(async () => {\n            const result = await updatePropertyDetails(properties, mainPropertyId);\n            if(result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: result.success });\n            }\n        })\n    }\n    \n    return (\n        <Card>\n            <CardContent className=\"p-0\">\n                <form action={handleSubmit}>\n                    <div className=\"overflow-x-auto\">\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead className=\"w-[100px]\">Principal</TableHead>\n                                    <TableHead>Edificio</TableHead>\n                                    <TableHead>Nombre</TableHead>\n                                    <TableHead className=\"text-right\">Puntos</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {properties.map(prop => (\n                                    <TableRow key={prop.id}>\n                                        <TableCell>\n                                            <RadioGroup\n                                                value={mainPropertyId}\n                                                onValueChange={setMainPropertyId}\n                                            >\n                                                <div className=\"flex items-center space-x-2\">\n                                                    <RadioGroupItem value={prop.id} id={`main-${prop.id}`} />\n                                                    <Label htmlFor={`main-${prop.id}`} className=\"sr-only\">\n                                                        Marcar {prop.nombre} como principal\n                                                    </Label>\n                                                </div>\n                                            </RadioGroup>\n                                        </TableCell>\n                                        <TableCell className=\"font-mono text-sm\">\n                                            {prop.ciudad}:{prop.barrio}:{prop.edificio}\n                                        </TableCell>\n                                        <TableCell>\n                                            <Input \n                                                value={prop.nombre}\n                                                onChange={(e) => handleNameChange(prop.id, e.target.value)}\n                                                className=\"max-w-xs\"\n                                                disabled={isPending}\n                                            />\n                                        </TableCell>\n                                        <TableCell className=\"text-right font-mono font-semibold\">\n                                            {formatPoints(prop.puntos)}\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </div>\n                     <div className=\"p-4 flex justify-end\">\n                        <Button type=\"submit\" disabled={isPending}>\n                            {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/>}\n                            Modificar\n                        </Button>\n                    </div>\n                </form>\n            </CardContent>\n        </Card>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "construction-queue.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useEffect, useState, useTransition } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport type { FullPropiedad, ColaConstruccion } from '@/lib/types';\nimport { useRouter } from 'next/navigation';\nimport { Clock, Loader2, Timer, X } from 'lucide-react';\nimport { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from '../ui/tooltip';\nimport Image from 'next/image';\nimport { MAX_CONSTRUCTION_QUEUE_SIZE } from '@/lib/constants';\nimport { Button } from '../ui/button';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '../ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { cancelarConstruccion } from '@/lib/actions/room.actions';\n\nfunction formatTime(totalSeconds: number) {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n    return [hours, minutes, seconds]\n        .map(v => v.toString().padStart(2, '0'))\n        .join(':');\n}\n\ntype ConstructionQueueProps = {\n    propiedad: FullPropiedad;\n    allRooms: { id: string; nombre: string; urlImagen: string | null }[];\n};\n\nexport function ConstructionQueue({ propiedad, allRooms }: ConstructionQueueProps) {\n    const router = useRouter();\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n    const [timers, setTimers] = useState<Record<string, number>>({});\n\n    const construccionesEnCola = propiedad.colaConstruccion;\n\n    const handleCancel = (colaId: string) => {\n        startTransition(async () => {\n            const result = await cancelarConstruccion(colaId);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: 'Construcci\u00f3n Cancelada', description: result.success });\n            }\n        });\n    }\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            const now = new Date().getTime();\n            let hasChanged = false;\n            const newTimers = { ...timers };\n\n            construccionesEnCola.forEach((item: ColaConstruccion) => {\n                if (item.fechaFinalizacion) {\n                    const endTime = new Date(item.fechaFinalizacion).getTime();\n                    const newTimeLeft = Math.max(0, Math.floor((endTime - now) / 1000));\n                    \n                    if (newTimers[item.id] !== newTimeLeft) {\n                        newTimers[item.id] = newTimeLeft;\n                        hasChanged = true;\n                    }\n                    if (newTimeLeft === 0 && timers[item.id] > 0) {\n                        router.refresh();\n                    }\n                }\n            });\n\n            if (hasChanged) {\n                setTimers(newTimers);\n            }\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [construccionesEnCola, router, timers]);\n\n\n    if (construccionesEnCola.length === 0) {\n        return null;\n    }\n\n    return (\n        <Card className=\"mb-4\">\n            <CardHeader>\n                <CardTitle className=\"text-primary flex items-center gap-2\">\n                    <Timer className=\"h-5 w-5\" />\n                    Cola de Construcci\u00f3n ({propiedad.nombre})\n                    <span className='ml-auto text-sm text-muted-foreground'>\n                        ({construccionesEnCola.length}/{MAX_CONSTRUCTION_QUEUE_SIZE})\n                    </span>\n                </CardTitle>\n            </CardHeader>\n            <CardContent className=\"flex flex-wrap gap-2\">\n                {construccionesEnCola.map((colaItem: ColaConstruccion, index: number) => {\n                    const roomConfig = allRooms.find(r => r.id === colaItem.habitacionId);\n                    const timeLeft = timers[colaItem.id] ?? (colaItem.fechaFinalizacion ? Math.max(0, Math.floor((new Date(colaItem.fechaFinalizacion).getTime() - Date.now()) / 1000)) : colaItem.duracion);\n                    \n                    const esActiva = index === 0 && colaItem.fechaFinalizacion && new Date(colaItem.fechaFinalizacion) > new Date();\n                    const tooltipText = `${roomConfig?.nombre || 'Habitaci\u00f3n'} (Nivel ${colaItem.nivelDestino}) ${colaItem.fechaFinalizacion ? ` - Finaliza a las: ${new Date(colaItem.fechaFinalizacion).toLocaleTimeString()}`: ''}`;\n\n                    return (\n                        <div key={colaItem.id} className=\"group flex items-center gap-2 border rounded-full p-1 pr-2 bg-muted/50 hover:bg-muted transition-colors\">\n                            <TooltipProvider delayDuration={0}>\n                                <Tooltip>\n                                    <TooltipTrigger asChild>\n                                        <div className=\"flex items-center gap-2\">\n                                            <div className=\"w-8 h-8 relative rounded-full overflow-hidden border-2 border-primary/50 flex-shrink-0\">\n                                                <Image\n                                                    src={roomConfig?.urlImagen || \"https://placehold.co/80x56.png\"}\n                                                    alt={roomConfig?.nombre || 'Habitaci\u00f3n'}\n                                                    fill\n                                                    className=\"object-cover\"\n                                                />\n                                            </div>\n                                            <div className='flex flex-col items-start'>\n                                                <span className='text-xs font-semibold leading-tight'>{roomConfig?.nombre} (Nvl {colaItem.nivelDestino})</span>\n                                                <div className=\"flex items-center gap-1 font-mono text-sm font-semibold\">\n                                                    <Clock className={`h-4 w-4 ${esActiva ? 'text-green-500 animate-pulse' : 'text-amber-500'}`} />\n                                                    <span>{formatTime(timeLeft)}</span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </TooltipTrigger>\n                                    <TooltipContent>\n                                        <p>{tooltipText}</p>\n                                    </TooltipContent>\n                                </Tooltip>\n                            </TooltipProvider>\n                             <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                    <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6 rounded-full opacity-50 group-hover:opacity-100 hover:bg-destructive/20 hover:text-destructive\">\n                                        <X className=\"h-4 w-4\"/>\n                                    </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                    <AlertDialogHeader>\n                                        <AlertDialogTitle>\u00bfCancelar Construcci\u00f3n?</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                            Se te devolver\u00e1n los recursos invertidos. \u00bfEst\u00e1s seguro de que quieres cancelar la construcci\u00f3n de {roomConfig?.nombre} Nivel {colaItem.nivelDestino}?\n                                        </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                        <AlertDialogCancel>No</AlertDialogCancel>\n                                        <AlertDialogAction onClick={() => handleCancel(colaItem.id)} disabled={isPending}>\n                                            {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/>}\n                                            S\u00ed, cancelar\n                                        </AlertDialogAction>\n                                    </AlertDialogFooter>\n                                </AlertDialogContent>\n                            </AlertDialog>\n                        </div>\n                    );\n                })}\n            </CardContent>\n        </Card>\n    );\n}\n"
            },
            {
              "name": "construction-status.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport type { ColaConstruccion } from \"@/lib/types\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\n\ntype ConstructionStatusProps = {\n    constructions: (ColaConstruccion & { propiedadNombre: string })[];\n    allRooms: { id: string; nombre: string; }[];\n};\n\nfunction formatTime(totalSeconds: number): string {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n    return [hours, minutes, seconds]\n        .map(v => v.toString().padStart(2, '0'))\n        .join(':');\n}\n\nfunction CountdownTimer({ label, endDate, onFinish }: {label: string, endDate: string, onFinish: () => void}) {\n    const [timeLeft, setTimeLeft] = useState('');\n\n    useEffect(() => {\n        const end = new Date(endDate).getTime();\n        const intervalId = setInterval(() => {\n            const now = new Date().getTime();\n            const difference = Math.floor((end - now) / 1000);\n\n            if (difference < -1) { // 1 second grace period\n                setTimeLeft('00:00:00');\n                clearInterval(intervalId);\n                onFinish();\n            } else {\n                setTimeLeft(formatTime(difference));\n            }\n        }, 1000);\n        \n        const now = new Date().getTime();\n        const difference = Math.floor((end - now) / 1000);\n        setTimeLeft(formatTime(difference > 0 ? difference : 0));\n\n        return () => clearInterval(intervalId);\n    }, [endDate, onFinish]);\n\n    return (\n        <div className=\"flex justify-between items-center text-sm\">\n            <span>{label}</span>\n            <span className=\"font-mono text-accent\">{timeLeft}</span>\n        </div>\n    );\n}\n\nexport function ConstructionStatus({ constructions, allRooms }: ConstructionStatusProps) {\n    const router = useRouter();\n\n    const handleRefresh = () => {\n        router.refresh();\n    };\n\n    return (\n        <div className=\"bg-card text-card-foreground px-4 py-3 rounded-b-md space-y-2\">\n            {constructions.length > 0 ? (\n                constructions.map(queueItem => {\n                    const room = allRooms.find(r => r.id === queueItem.habitacionId);\n                    if (!room || !queueItem.fechaFinalizacion) return null;\n                    return (\n                         <CountdownTimer \n                            key={queueItem.id}\n                            label={`${queueItem.propiedadNombre}: ${room.nombre} (Nvl ${queueItem.nivelDestino})`}\n                            endDate={new Date(queueItem.fechaFinalizacion).toISOString()}\n                            onFinish={handleRefresh}\n                         />\n                    )\n                })\n            ) : (\n                <p className=\"text-muted-foreground text-center text-sm\">No hay construcciones en cola.</p>\n            )}\n        </div>\n    );\n}\n"
            },
            {
              "name": "dashboard-client-layout.tsx",
              "type": "file",
              "content": "\n\n\"use client\"\n\nimport Link from \"next/link\";\nimport {\n  SidebarProvider,\n  Sidebar,\n  SidebarHeader,\n  SidebarContent,\n  SidebarFooter,\n  SidebarTrigger,\n  SidebarInset,\n} from \"@/components/ui/sidebar\"\nimport { SidebarNav } from \"@/components/dashboard/sidebar-nav\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Button } from \"@/components/ui/button\"\nimport { LogOut, Swords } from \"lucide-react\"\nimport type { UserWithProgress } from \"@/lib/types\"\nimport { logout } from \"@/lib/actions/auth.actions\";\nimport { useRouter } from \"next/navigation\"\nimport React from \"react\";\n\nexport function DashboardClientLayout({\n    user,\n    children,\n    resourceBar\n  }: {\n    user: UserWithProgress | null;\n    children: React.ReactNode\n    resourceBar: React.ReactNode;\n  }) {\n  const router = useRouter();\n\n  const handleLogout = async () => {\n    await logout();\n    router.push('/');\n    router.refresh();\n  }\n\n  return (\n    <SidebarProvider>\n      <Sidebar className=\"bg-card/80 backdrop-blur-sm border-r-white/10\">\n        <SidebarHeader>\n           <Link href=\"/overview\" className=\"flex items-center gap-2 p-2\">\n            <Swords className=\"h-8 w-8 text-primary\" />\n            <h2 className=\"text-2xl font-bold font-heading tracking-tight text-foreground\">VENDETTA</h2>\n           </Link>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarNav user={user} />\n        </SidebarContent>\n        <Separator />\n        <SidebarFooter>\n          <div className=\"flex items-center gap-4 p-3\">\n            <Avatar className=\"h-12 w-12 border-2 border-primary\">\n              <AvatarImage src={user?.avatarUrl || \"https://placehold.co/40x40.png\"} alt={user?.name || \"Boss\"} data-ai-hint=\"mafia boss\" />\n              <AvatarFallback>{user?.name?.charAt(0).toUpperCase() || 'V'}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex flex-col truncate\">\n                <span className=\"font-heading text-lg font-bold tracking-wide\">{user?.name || \"El Padrino\"}</span>\n                <span className=\"text-xs text-muted-foreground\">{user?.title || \"Jefe\"}</span>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"ml-auto hover:bg-destructive/20 hover:text-destructive\" onClick={handleLogout}>\n                <LogOut />\n                <span className=\"sr-only\">Cerrar Sesi\u00f3n</span>\n            </Button>\n          </div>\n        </SidebarFooter>\n      </Sidebar>\n      <SidebarInset className=\"flex flex-col\">\n        {/* Main Header */}\n        <React.Fragment key=\"header\">\n          <header className=\"sticky top-0 z-30 flex h-14 items-center justify-between gap-4 border-b bg-background/80 px-4 backdrop-blur-sm sm:h-16 sm:px-6\">\n              <div className=\"flex items-center gap-2 md:hidden\">\n                  <Link href=\"/overview\" className=\"flex items-center gap-2\">\n                      <Swords className=\"h-6 w-6 text-primary\" />\n                      <span className=\"font-semibold text-lg\">Vendetta</span>\n                  </Link>\n              </div>\n              <div className=\"flex-1\" />\n              <SidebarTrigger className=\"md:hidden\" />\n          </header>\n        </React.Fragment>\n        <React.Fragment key=\"resource-bar\">\n          {resourceBar}\n        </React.Fragment>\n        <React.Fragment key=\"children\">\n          {children}\n        </React.Fragment>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n"
            },
            {
              "name": "espionage",
              "type": "directory",
              "children": [
                {
                  "name": "espionage-detail-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, CheckCircle, Eye, XCircle } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/navigation\";\nimport type { FullEspionageReport, EspionageReportDetails } from \"@/lib/types\";\nimport { resourceIcons, ROOM_ORDER } from \"@/lib/constants\";\nimport Image from \"next/image\";\nimport { useMemo } from \"react\";\n\ninterface EspionageDetailViewProps {\n    report: FullEspionageReport;\n}\n\nfunction formatNumber(num: number): string {\n    if(num === undefined || num === null) return \"0\";\n    return Math.floor(num).toLocaleString('de-DE');\n}\n\nexport function EspionageDetailView({ report }: EspionageDetailViewProps) {\n    const router = useRouter();\n    const details = report.details as EspionageReportDetails;\n    const combat = details.combat;\n    const intel = details.intel;\n\n    const sortedBuildings = useMemo(() => {\n        if (!intel?.buildings) return [];\n        return [...intel.buildings].sort((a, b) => {\n            const indexA = ROOM_ORDER.indexOf(a.id);\n            const indexB = ROOM_ORDER.indexOf(b.id);\n            if (indexA === -1) return 1;\n            if (indexB === -1) return -1;\n            return indexA - indexB;\n        });\n    }, [intel?.buildings]);\n\n    return (\n        <div className=\"w-full max-w-4xl mx-auto bg-black/80 border-primary border text-white font-mono flex flex-col h-full rounded-lg\">\n            <div className=\"p-6 pb-2 shrink-0 text-center\">\n                <h2 className=\"text-2xl text-primary tracking-widest font-heading\">\n                    INFORME DE ESPIONAJE\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                    {new Date(report.createdAt).toLocaleString('es-ES')}\n                </p>\n            </div>\n             <div className=\"flex flex-row items-center justify-around p-4 border-y border-dashed border-white/20 gap-4 shrink-0\">\n                <Link href={`/profile/${report.attacker.id}`} className=\"flex flex-col items-center gap-2\">\n                    <Avatar className=\"h-16 w-16 md:h-20 md:w-20\"><AvatarImage src={report.attacker.avatarUrl || ''} /><AvatarFallback>{report.attacker.name.charAt(0)}</AvatarFallback></Avatar>\n                    <span className=\"font-bold text-base md:text-lg\">{report.attacker.name}</span>\n                </Link>\n                <Eye className=\"h-10 w-10 text-destructive\" />\n                <Link href={`/profile/${report.defender.id}`} className=\"flex flex-col items-center gap-2\">\n                    <Avatar className=\"h-16 w-16 md:h-20 md:w-20\"><AvatarImage src={report.defender.avatarUrl || ''} /><AvatarFallback>{report.defender.name.charAt(0)}</AvatarFallback></Avatar>\n                    <span className=\"font-bold text-base md:text-lg\">{report.defender.name}</span>\n                </Link>\n            </div>\n            <ScrollArea className=\"flex-grow min-h-0\">\n                <div className=\"space-y-4 p-4\">\n                     <Card className={cn(\"p-4 text-center\", intel ? \"bg-green-900/50 border-green-500/50\" : \"bg-red-900/50 border-red-500/50\")}>\n                        <h3 className={cn(\"text-xl font-bold flex items-center justify-center gap-2\", intel ? \"text-green-400\" : \"text-red-400\")}>\n                            {intel ? <CheckCircle /> : <XCircle />}\n                            {intel ? \"Misi\u00f3n de Espionaje Exitosa\" : \"Misi\u00f3n de Espionaje Fallida\"}\n                        </h3>\n                    </Card>\n                    \n                    {intel ? (\n                        <Card>\n                            <CardHeader><CardTitle>Intel Recopilada</CardTitle></CardHeader>\n                            <CardContent className=\"space-y-6\">\n                                <div>\n                                    <h4 className=\"font-semibold text-lg mb-2\">Recursos</h4>\n                                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                                        {Object.entries(intel.resources).map(([key, value]) => (\n                                            <div key={key} className=\"flex items-center gap-3 bg-muted/50 p-3 rounded-md\">\n                                                <Image src={resourceIcons[key]} alt={key} width={24} height={24} />\n                                                <div>\n                                                    <p className=\"text-xs capitalize text-muted-foreground\">{key}</p>\n                                                    <p className=\"font-bold font-mono text-lg\">{formatNumber(Number(value))}</p>\n                                                </div>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                                <Separator />\n                                <div>\n                                     <h4 className=\"font-semibold text-lg mb-2\">Edificios</h4>\n                                     <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 text-sm\">\n                                        {sortedBuildings.map(b => (\n                                            <div key={b.id} className=\"flex justify-between items-baseline p-2 border-b\">\n                                                <span className=\"truncate pr-2\">{b.name}</span>\n                                                <span className=\"font-bold\">Nvl {b.level}</span>\n                                            </div>\n                                        ))}\n                                     </div>\n                                </div>\n                            </CardContent>\n                        </Card>\n                    ) : (\n                         <p className=\"text-center text-muted-foreground p-6 border rounded-lg\">Tus esp\u00edas fueron detectados y no se pudo obtener informaci\u00f3n de la propiedad.</p>\n                    )}\n\n                </div>\n            </ScrollArea>\n             <div className=\"p-4 pt-4 border-t shrink-0\">\n                <Button onClick={() => router.back()} className=\"w-full\" variant=\"outline\">\n                    <ArrowLeft className=\"mr-2 h-4 w-4\"/>\n                    Volver\n                </Button>\n            </div>\n        </div>\n    );\n}\n"
                },
                {
                  "name": "espionage-list-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from '@/lib/utils';\nimport { Eye, ChevronsRight, CheckCircle, XCircle } from \"lucide-react\";\nimport { Button } from '@/components/ui/button';\nimport type { FullEspionageReport } from '@/lib/types';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useRouter } from 'next/navigation';\n\ninterface EspionageListViewProps {\n    initialReports: FullEspionageReport[];\n    currentUserId: string;\n}\n\nexport function EspionageListView({ initialReports, currentUserId }: EspionageListViewProps) {\n    const router = useRouter();\n\n    const sortedReports = initialReports.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n    return (\n        <Card>\n             <ScrollArea className=\"h-[calc(100vh-340px)]\">\n                <CardContent className=\"p-0\">\n                    <div className=\"divide-y divide-border\">\n                        {sortedReports.length > 0 ? (\n                            sortedReports.map(report => {\n                                const isAttacker = report.attackerId === currentUserId;\n                                const opponent = isAttacker ? report.defender : report.attacker;\n                                const wasSuccess = !!report.details.intel;\n\n                                return (\n                                    <div\n                                        key={report.id}\n                                        className={cn(\n                                            \"p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 cursor-pointer hover:bg-muted/50 transition-colors ease-in-out\",\n                                            wasSuccess ? \"border-l-4 border-green-500/70\" : \"border-l-4 border-destructive/70\"\n                                        )}\n                                        onClick={() => router.push(`/espionage/${report.id}`)}\n                                    >\n                                        <div className=\"flex items-center gap-4\">\n                                            <div className=\"flex-shrink-0\">\n                                                {wasSuccess ? (\n                                                    <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                                                ) : (\n                                                    <XCircle className=\"h-8 w-8 text-destructive\" />\n                                                )}\n                                            </div>\n                                            <div>\n                                                <p className=\"font-bold\">\n                                                    {isAttacker ? \"Espionaje a\" : \"Espionaje de\"} {opponent.name}\n                                                </p>\n                                                <p className=\"text-xs text-muted-foreground\">\n                                                    {new Date(report.createdAt).toLocaleString('es-ES')}\n                                                </p>\n                                            </div>\n                                        </div>\n                                        <div className=\"sm:ml-auto\">\n                                            <Button variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\n                                                Ver Informe\n                                                <ChevronsRight className=\"ml-2 h-4 w-4\" />\n                                            </Button>\n                                        </div>\n                                    </div>\n                                );\n                            })\n                        ) : (\n                            <div className=\"p-8 text-center text-muted-foreground\">\n                                No tienes informes de espionaje.\n                            </div>\n                        )}\n                    </div>\n                </CardContent>\n             </ScrollArea>\n        </Card>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "family",
              "type": "directory",
              "children": [
                {
                  "name": "create-or-join-family-view.tsx",
                  "type": "file",
                  "content": "\n'use client'\n\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { createFamily } from \"@/lib/actions/family.actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTransition } from \"react\";\nimport { Loader2, Search, Users } from \"lucide-react\";\nimport Link from \"next/link\";\n\nexport function CreateOrJoinFamilyView() {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n\n    const handleCreateFamily = async (formData: FormData) => {\n        startTransition(async () => {\n            const result = await createFamily(formData);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00a1\u00c9xito!', description: result.success });\n            }\n        });\n    };\n\n    return (\n        <div className=\"main-view\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">\u00danete a la Familia</h2>\n                    <p className=\"text-muted-foreground\">\n                        Crea tu propio clan o \u00fanete a uno existente para dominar la ciudad.\n                    </p>\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-start\">\n                 <Card>\n                    <form action={handleCreateFamily}>\n                        <CardHeader>\n                            <CardTitle>Funda tu Propia Familia</CardTitle>\n                            <CardDescription>Define el nombre, el tag y los s\u00edmbolos de tu nuevo imperio.</CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                                <div className=\"space-y-2 sm:col-span-2\">\n                                    <Label htmlFor=\"name\">Nombre de la Familia</Label>\n                                    <Input id=\"name\" name=\"name\" placeholder=\"Los Corleone\" required disabled={isPending} />\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"tag\">Tag (3-4 letras)</Label>\n                                    <Input id=\"tag\" name=\"tag\" placeholder=\"CRL\" required minLength={3} maxLength={4} disabled={isPending} />\n                                </div>\n                            </div>\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"description\">Descripci\u00f3n P\u00fablica</Label>\n                                <Textarea id=\"description\" name=\"description\" placeholder=\"Una oferta que no podr\u00e1n rechazar...\" disabled={isPending} />\n                            </div>\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"avatarUrl\">URL del Emblema</Label>\n                                <Input id=\"avatarUrl\" name=\"avatarUrl\" placeholder=\"https://...\" disabled={isPending} />\n                            </div>\n                        </CardContent>\n                        <CardFooter>\n                            <Button type=\"submit\" disabled={isPending}>\n                                {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                                Fundar Familia\n                            </Button>\n                        </CardFooter>\n                    </form>\n                </Card>\n\n                 <div className=\"flex flex-col items-center justify-center gap-4 text-center p-8 border rounded-lg h-full\">\n                    <Users className=\"h-16 w-16 text-muted-foreground\" />\n                    <h3 className=\"text-xl font-bold\">\u00bfPrefieres Unirte a un Clan?</h3>\n                    <p className=\"text-muted-foreground\">\n                        Busca entre las familias existentes, conoce a sus miembros y env\u00eda una solicitud para unirte a la que m\u00e1s te guste.\n                    </p>\n                    <Button size=\"lg\" asChild>\n                        <Link href=\"/family/find\">\n                            <Search className=\"mr-2 h-5 w-5\" />\n                            Buscar Familias Existentes\n                        </Link>\n                    </Button>\n                 </div>\n            </div>\n        </div>\n    )\n}\n"
                },
                {
                  "name": "family-dashboard-view.tsx",
                  "type": "file",
                  "content": "\n\n'use client'\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { FullFamily, UserWithProgress } from \"@/lib/types\";\nimport { FamilyRole } from \"@prisma/client\";\nimport { Crown, Shield, User, Users, Loader2, UserPlus, MailPlus, HandMetal, Send, Settings2, AreaChart } from \"lucide-react\";\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger,\n  } from \"@/components/ui/alert-dialog\"\nimport { useRef, useTransition } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { createFamilyAnnouncement, leaveFamily } from \"@/lib/actions/family.actions\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { InviteMemberDialog } from \"./invite-member-dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\n\ninterface FamilyDashboardViewProps {\n    family: FullFamily;\n    currentUser: UserWithProgress;\n    allUsers: { id: string; name: string; familyMember: { familyId: string; } | null; }[];\n    pendingRequests: number;\n}\n\nconst roleIcons: Record<FamilyRole, React.ReactNode> = {\n    [FamilyRole.LEADER]: <Crown className=\"h-4 w-4 text-amber-400\" />,\n    [FamilyRole.CO_LEADER]: <Shield className=\"h-4 w-4 text-blue-400\" />,\n    [FamilyRole.MEMBER]: <User className=\"h-4 w-4 text-muted-foreground\" />,\n}\n\nfunction AnnouncementForm({ familyId }: { familyId: string }) {\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n    const formRef = useRef<HTMLFormElement>(null);\n\n    const handleSubmit = async (formData: FormData) => {\n        const content = formData.get('content') as string;\n        if (!content.trim()) {\n            toast({ variant: 'destructive', title: 'Error', description: 'El anuncio no puede estar vac\u00edo.'});\n            return;\n        }\n\n        startTransition(async () => {\n             const result = await createFamilyAnnouncement(familyId, content);\n              if (result.error) {\n                 toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                 toast({ title: '\u00c9xito', description: result.success });\n                 formRef.current?.reset();\n             }\n        });\n    }\n    \n    return (\n        <form action={handleSubmit} ref={formRef} className=\"space-y-2 mt-4\">\n            <Textarea \n                name=\"content\"\n                placeholder=\"Escribe tu anuncio aqu\u00ed...\"\n                rows={3}\n                disabled={isPending}\n            />\n            <Button type=\"submit\" size=\"sm\" disabled={isPending}>\n                {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Send className=\"mr-2 h-4 w-4\" />}\n                Publicar\n            </Button>\n        </form>\n    )\n}\n\nexport function FamilyDashboardView({ family, currentUser, allUsers, pendingRequests }: FamilyDashboardViewProps) {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n\n    const handleLeaveFamily = () => {\n        startTransition(async () => {\n            const result = await leaveFamily();\n             if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: 'Has abandonado la familia', description: result.success });\n            }\n        });\n    }\n    \n    const userRole = currentUser.familyMember?.role;\n    const canManage = userRole === FamilyRole.LEADER || userRole === FamilyRole.CO_LEADER;\n    const isLeader = userRole === FamilyRole.LEADER;\n\n    const usersNotInFamily = allUsers.filter(u => !u.familyMember && u.id !== currentUser.id);\n\n    return (\n        <div className=\"main-view space-y-6\">\n            <Card className=\"overflow-hidden\">\n                <div className=\"relative h-48 bg-muted\">\n                    <Image src=\"/img/login_bg.jpg\" alt=\"Family Banner\" fill className=\"object-cover\" data-ai-hint=\"mafia pattern\" />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent\" />\n                    <div className=\"absolute bottom-0 left-1/2 -translate-x-1/2 translate-y-1/2\">\n                         <Avatar className=\"h-28 w-28 border-4 border-background shadow-lg\">\n                            <AvatarImage src={family.avatarUrl || ''} alt={family.name} data-ai-hint=\"family crest\" />\n                            <AvatarFallback className=\"text-4xl\">{family.tag}</AvatarFallback>\n                        </Avatar>\n                    </div>\n                </div>\n                 <div className=\"pt-16 pb-4 px-4 text-center border-b\">\n                     <h2 className=\"text-3xl font-bold font-heading tracking-widest text-white shadow-lg\">[{family.tag}] {family.name}</h2>\n                     <p className=\"text-muted-foreground max-w-2xl mx-auto mt-2\">{family.description || \"La familia m\u00e1s temida de la ciudad.\"}</p>\n                 </div>\n                 <div className=\"p-4 bg-muted/30 flex flex-wrap items-center justify-center gap-2\">\n                    {canManage && <InviteMemberDialog familyId={family.id} allUsers={usersNotInFamily} />}\n                    {canManage && (\n                         <Button asChild size=\"sm\" variant=\"outline\">\n                            <Link href={`/family/requests`}>\n                                <HandMetal className=\"mr-2 h-4 w-4\" />\n                                Solicitudes\n                                {pendingRequests > 0 && <Badge variant=\"destructive\" className=\"ml-2\">{pendingRequests}</Badge>}\n                            </Link>\n                        </Button>\n                    )}\n                    {isLeader && (\n                         <Button asChild size=\"sm\" variant=\"outline\">\n                            <Link href={`/family/management`}>\n                                <Settings2 className=\"mr-2 h-4 w-4\" />\n                                Administrar Rangos\n                            </Link>\n                        </Button>\n                    )}\n                    <Button asChild size=\"sm\" variant=\"outline\">\n                        <Link href={`/family/members?id=${family.id}`}>\n                            <Users className=\"mr-2 h-4 w-4\" />\n                            Ver Lista de Miembros\n                        </Link>\n                    </Button>\n                    <Button asChild size=\"sm\" variant=\"outline\">\n                        <Link href=\"/family/global\">\n                            <AreaChart className=\"mr-2 h-4 w-4\" />\n                            Visi\u00f3n Global\n                        </Link>\n                    </Button>\n                     <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\">Abandonar Familia</Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                            <AlertDialogHeader>\n                            <AlertDialogTitle>\u00bfEst\u00e1s seguro de que quieres abandonar la familia?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                                Esta acci\u00f3n no se puede deshacer. Perder\u00e1s todos los beneficios y la protecci\u00f3n de la familia.\n                            </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                            <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                            <AlertDialogAction onClick={handleLeaveFamily} disabled={isPending}>\n                                {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                                S\u00ed, abandonar familia\n                            </AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                </div>\n            </Card>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"lg:col-span-2\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Tabl\u00f3n de Anuncios</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                           {family.announcements.length === 0 ? (\n                            <p className=\"text-sm text-center text-muted-foreground py-8\">\n                                El tabl\u00f3n de anuncios est\u00e1 vac\u00edo.\n                            </p>\n                           ) : (\n                               <div className=\"space-y-4\">\n                                   {family.announcements.map((announcement) => (\n                                       <div key={announcement.id} className=\"p-4 border rounded-md\">\n                                           <div className=\"flex items-center gap-3 mb-2\">\n                                                <Avatar className=\"h-8 w-8\">\n                                                    <AvatarImage src={announcement.author.avatarUrl || ''} />\n                                                    <AvatarFallback>{announcement.author.name.charAt(0)}</AvatarFallback>\n                                                </Avatar>\n                                                <div>\n                                                    <p className=\"font-semibold text-sm\">{announcement.author.name}</p>\n                                                    <p className=\"text-xs text-muted-foreground\">{new Date(announcement.createdAt).toLocaleString()}</p>\n                                                </div>\n                                           </div>\n                                           <p className=\"text-sm whitespace-pre-wrap\">{announcement.content}</p>\n                                       </div>\n                                   ))}\n                               </div>\n                           )}\n                           {canManage && <AnnouncementForm familyId={family.id} />}\n                        </CardContent>\n                    </Card>\n                </div>\n                 <div>\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Estad\u00edsticas</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                            <div className=\"flex items-center justify-between\">\n                                <span className=\"text-muted-foreground\">Miembros</span>\n                                <span className=\"font-bold\">{family.members.length}</span>\n                            </div>\n                            <Separator />\n                            <div className=\"flex items-center justify-between\">\n                                <span className=\"text-muted-foreground\">Puntos Totales</span>\n                                <span className=\"font-bold\">--</span>\n                            </div>\n                            <Separator />\n                             <div className=\"flex items-center justify-between\">\n                                <span className=\"text-muted-foreground\">Posici\u00f3n Ranking</span>\n                                <span className=\"font-bold\">--</span>\n                            </div>\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n"
                },
                {
                  "name": "family-global-view.tsx",
                  "type": "file",
                  "content": "\n'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { FullFamily } from \"@/lib/types\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\nimport { ArrowLeft, Crown, Shield, User as UserIcon } from \"lucide-react\";\nimport { FamilyRole } from \"@prisma/client\";\nimport { calcularProduccionTotalPorSegundo } from \"@/lib/formulas/room-formulas\";\nimport { ROOM_ORDER, TRAINING_ORDER, RECRUITMENT_TROOP_ORDER, SECURITY_TROOP_ORDER } from \"@/lib/constants\";\nimport { useMemo, useState } from \"react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FamilyGlobalViewProps {\n    family: FullFamily;\n}\n\nconst roleIcons: Record<FamilyRole, React.ReactNode> = {\n    [FamilyRole.LEADER]: <Crown className=\"h-4 w-4 text-amber-400\" />,\n    [FamilyRole.CO_LEADER]: <Shield className=\"h-4 w-4 text-blue-400\" />,\n    [FamilyRole.MEMBER]: <UserIcon className=\"h-4 w-4 text-muted-foreground\" />,\n}\n\nfunction formatNumber(num: number | bigint): string {\n  if (num === null || num === undefined) return \"0\";\n  return Number(num).toLocaleString('de-DE');\n}\n\nexport function FamilyGlobalView({ family }: FamilyGlobalViewProps) {\n    const isMobile = useIsMobile();\n    const [openAccordions, setOpenAccordions] = useState<string[]>(['puntos']);\n\n    const toggleAccordion = (value: string) => {\n        setOpenAccordions(prev => \n            prev.includes(value) ? prev.filter(v => v !== value) : [...prev, value]\n        );\n    }\n    \n    const membersData = useMemo(() => {\n        return family.members.map(member => {\n            const production = member.user.propiedades.reduce((acc, p) => {\n                const prod = calcularProduccionTotalPorSegundo(p);\n                acc.armas += prod.armas.produccionNeta;\n                acc.municion += prod.municion.produccionNeta;\n                acc.alcohol += prod.alcohol.produccionNeta;\n                acc.dolares += prod.dolares.produccionNeta;\n                return acc;\n            }, { armas: 0, municion: 0, alcohol: 0, dolares: 0 });\n\n            const roomLevels = new Map<string, number>();\n            member.user.propiedades.forEach(p => {\n                p.habitaciones.forEach(h => {\n                    const currentLevel = roomLevels.get(h.configuracionHabitacionId) || 0;\n                    if (h.nivel > currentLevel) {\n                        roomLevels.set(h.configuracionHabitacionId, h.nivel);\n                    }\n                });\n            });\n\n            const trainingLevels = new Map(member.user.entrenamientos.map(t => [t.configuracionEntrenamientoId, t.nivel]));\n            \n            const troops = new Map<string, number>();\n             member.user.propiedades.forEach(p => {\n                [...p.TropaUsuario, ...p.TropaSeguridadUsuario].forEach(t => {\n                    troops.set(t.configuracionTropaId, (troops.get(t.configuracionTropaId) || 0) + t.cantidad);\n                })\n            });\n\n            return {\n                ...member,\n                production: {\n                    armas: production.armas,\n                    municion: production.municion,\n                    alcohol: production.alcohol,\n                    dolares: production.dolares,\n                },\n                roomLevels,\n                trainingLevels,\n                troops,\n                totalResources: member.user.propiedades.reduce((acc, p) => {\n                    acc.armas += Number(p.armas);\n                    acc.municion += Number(p.municion);\n                    acc.alcohol += Number(p.alcohol);\n                    acc.dolares += Number(p.dolares);\n                    return acc;\n                }, { armas: 0, municion: 0, alcohol: 0, dolares: 0 }),\n            }\n        });\n    }, [family.members]);\n\n    const familyTotals = useMemo(() => {\n        return membersData.reduce((acc, member) => {\n            acc.puntos += member.user.puntuacion?.puntosTotales ?? 0;\n            acc.edificios += member.user.propiedades.length;\n            acc.armas += member.totalResources.armas;\n            acc.municion += member.totalResources.municion;\n            acc.alcohol += member.totalResources.alcohol;\n            acc.dolares += member.totalResources.dolares;\n            acc.produccionArmas += member.production.armas;\n            acc.produccionMunicion += member.production.municion;\n            acc.produccionAlcohol += member.production.alcohol;\n            acc.produccionDolares += member.production.dolares;\n\n            member.troops.forEach((count, id) => {\n                acc.troops[id] = (acc.troops[id] || 0) + count;\n            });\n\n            return acc;\n        }, {\n            puntos: 0, edificios: 0, armas: 0, municion: 0, alcohol: 0, dolares: 0,\n            produccionArmas: 0, produccionMunicion: 0, produccionAlcohol: 0, produccionDolares: 0,\n            troops: {} as Record<string, number>\n        });\n    }, [membersData]);\n    \n    const { roomNames, trainingNames, troopNames } = useMemo(() => {\n        const roomNames = new Map<string, string>();\n        const trainingNames = new Map<string, string>();\n        const troopNames = new Map<string, string>();\n    \n        family.members.forEach(member => {\n            member.user.propiedades.forEach(p => {\n                p.habitaciones.forEach(h => {\n                    if (!roomNames.has(h.configuracionHabitacionId)) {\n                        roomNames.set(h.configuracionHabitacionId, h.configuracionHabitacion.nombre);\n                    }\n                });\n                [...p.TropaUsuario, ...p.TropaSeguridadUsuario].forEach(t => {\n                    if (!troopNames.has(t.configuracionTropaId)) {\n                        troopNames.set(t.configuracionTropaId, t.configuracionTropa.nombre);\n                    }\n                });\n            });\n            member.user.entrenamientos.forEach(t => {\n                if (!trainingNames.has(t.configuracionEntrenamientoId)) {\n                    trainingNames.set(t.configuracionEntrenamientoId, t.configuracionEntrenamiento.nombre);\n                }\n            });\n        });\n    \n        return { roomNames, trainingNames, troopNames };\n    }, [family.members]);\n\n    const resourceRows = [\n        { label: \"Puntos\", getValue: (m: any) => formatNumber(m.user.puntuacion?.puntosTotales ?? 0), getTotal: () => formatNumber(familyTotals.puntos), positive: false },\n        { label: \"Edificios\", getValue: (m: any) => formatNumber(m.user.propiedades.length), getTotal: () => formatNumber(familyTotals.edificios), positive: false },\n        { label: \"Armas\", getValue: (m: any) => formatNumber(m.totalResources.armas), getTotal: () => formatNumber(familyTotals.armas), positive: false },\n        { label: \"Municion\", getValue: (m: any) => formatNumber(m.totalResources.municion), getTotal: () => formatNumber(familyTotals.municion), positive: false },\n        { label: \"Alcohol\", getValue: (m: any) => formatNumber(m.totalResources.alcohol), getTotal: () => formatNumber(familyTotals.alcohol), positive: false },\n        { label: \"Dolares\", getValue: (m: any) => formatNumber(m.totalResources.dolares), getTotal: () => formatNumber(familyTotals.dolares), positive: false },\n        { label: \"Armas/Hora\", getValue: (m: any) => `+${formatNumber(m.production.armas)}`, getTotal: () => `+${formatNumber(familyTotals.produccionArmas)}`, positive: true },\n        { label: \"Municion/Hora\", getValue: (m: any) => `+${formatNumber(m.production.municion)}`, getTotal: () => `+${formatNumber(familyTotals.produccionMunicion)}`, positive: true },\n        { label: \"Alcohol/Hora\", getValue: (m: any) => `${m.production.alcohol >= 0 ? '+' : ''}${formatNumber(m.production.alcohol)}`, getTotal: () => `${familyTotals.produccionAlcohol >= 0 ? '+' : ''}${formatNumber(familyTotals.produccionAlcohol)}`, positive: true },\n        { label: \"Dolares/Hora\", getValue: (m: any) => `+${formatNumber(m.production.dolares)}`, getTotal: () => `+${formatNumber(familyTotals.produccionDolares)}`, positive: true },\n    ];\n    \n    const renderDesktopTable = () => (\n         <Card>\n            <CardContent className=\"p-0\">\n                <ScrollArea className=\"w-full whitespace-nowrap h-[75vh]\">\n                    <Table className=\"min-w-full\">\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead className=\"sticky left-0 bg-background/95 z-10 w-[180px]\">Jugador</TableHead>\n                                {membersData.map(member => (\n                                    <TableHead key={member.userId} className=\"text-center\">\n                                        <div className=\"flex flex-col items-center gap-1\">\n                                            <div className=\"flex items-center gap-1\">{roleIcons[member.role]}<span className=\"font-bold\">{member.user.name}</span></div>\n                                            <span className=\"text-xs text-muted-foreground\">({member.role})</span>\n                                            <Avatar className=\"h-12 w-12 mt-1\"><AvatarImage src={member.user.avatarUrl || ''} /><AvatarFallback>{member.user.name.charAt(0)}</AvatarFallback></Avatar>\n                                        </div>\n                                    </TableHead>\n                                ))}\n                                <TableHead className=\"text-center font-bold text-primary\">Total Familia</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                             <TableRow><TableCell colSpan={membersData.length + 2} className=\"h-2 bg-muted/50 p-0 font-bold text-center text-primary\">RECURSOS</TableCell></TableRow>\n                            {resourceRows.map(row => (\n                                 <TableRow key={row.label} className=\"even:bg-muted/20\">\n                                    <TableCell className=\"sticky left-0 bg-background/95 font-semibold\">{row.label}</TableCell>\n                                    {membersData.map(member => (\n                                        <TableCell key={member.userId} className={`text-center font-mono ${row.positive ? 'text-green-400' : 'text-foreground'}`}>\n                                            {row.getValue(member)}\n                                        </TableCell>\n                                    ))}\n                                    <TableCell className={`text-center font-mono font-bold ${row.positive ? 'text-green-400' : 'text-primary'}`}>{row.getTotal()}</TableCell>\n                                </TableRow>\n                            ))}\n                            \n                             <TableRow><TableCell colSpan={membersData.length + 2} className=\"h-2 bg-muted/50 p-0 font-bold text-center text-primary\">ENTRENAMIENTOS</TableCell></TableRow>\n                            \n                            {TRAINING_ORDER.map(trainingId => {\n                                const trainingName = trainingNames.get(trainingId);\n                                if (!trainingName) return null;\n\n                                const maxLevel = Math.max(...membersData.map(m => m.trainingLevels.get(trainingId) || 0));\n\n                                return (\n                                    <TableRow key={trainingId} className=\"even:bg-muted/20\">\n                                        <TableCell className=\"sticky left-0 bg-background/95 font-semibold\">{trainingName}</TableCell>\n                                        {membersData.map(member => (\n                                            <TableCell key={member.userId} className=\"text-center font-mono\">\n                                                {member.trainingLevels.get(trainingId) || 0}\n                                            </TableCell>\n                                        ))}\n                                        <TableCell className=\"text-center font-mono font-bold text-primary\">{maxLevel}</TableCell>\n                                    </TableRow>\n                                )\n                            })}\n\n                             <TableRow><TableCell colSpan={membersData.length + 2} className=\"h-2 bg-muted/50 p-0 font-bold text-center text-primary\">TROPAS</TableCell></TableRow>\n\n                            {RECRUITMENT_TROOP_ORDER.concat(SECURITY_TROOP_ORDER).map(troopId => {\n                                 const troopName = troopNames.get(troopId);\n                                 if (!troopName) return null;\n                                 const total = familyTotals.troops[troopId] || 0;\n                                 return (\n                                     <TableRow key={troopId} className=\"even:bg-muted/20\">\n                                        <TableCell className=\"sticky left-0 bg-background/95 font-semibold\">{troopName}</TableCell>\n                                        {membersData.map(member => (\n                                            <TableCell key={member.userId} className=\"text-center font-mono\">{formatNumber(member.troops.get(troopId) || 0)}</TableCell>\n                                        ))}\n                                        <TableCell className=\"text-center font-mono font-bold text-primary\">{formatNumber(total)}</TableCell>\n                                     </TableRow>\n                                 )\n                            })}\n                        </TableBody>\n                    </Table>\n                </ScrollArea>\n            </CardContent>\n        </Card>\n    );\n\n    const renderMobileCards = () => (\n        <div className=\"space-y-4\">\n            {membersData.map(member => (\n                <Card key={member.userId}>\n                    <CardHeader className=\"flex flex-row items-center gap-4\">\n                        <Avatar className=\"h-16 w-16\"><AvatarImage src={member.user.avatarUrl || ''} /><AvatarFallback>{member.user.name.charAt(0)}</AvatarFallback></Avatar>\n                        <div>\n                             <CardTitle className=\"flex items-center gap-2\">{roleIcons[member.role]} {member.user.name}</CardTitle>\n                             <CardDescription>{member.role}</CardDescription>\n                        </div>\n                    </CardHeader>\n                    <CardContent>\n                        <Accordion type=\"multiple\" value={openAccordions} onValueChange={setOpenAccordions}>\n                            <AccordionItem value=\"puntos\">\n                                <AccordionTrigger>Resumen de Puntos y Recursos</AccordionTrigger>\n                                <AccordionContent className=\"space-y-2\">\n                                    {resourceRows.map(row => (\n                                        <div key={row.label} className=\"flex justify-between text-sm\">\n                                            <span className=\"text-muted-foreground\">{row.label}</span>\n                                            <span className={cn(\"font-semibold\", row.positive ? 'text-green-400' : 'text-foreground')}>{row.getValue(member)}</span>\n                                        </div>\n                                    ))}\n                                </AccordionContent>\n                            </AccordionItem>\n                             <AccordionItem value=\"entrenamientos\">\n                                <AccordionTrigger>Entrenamientos</AccordionTrigger>\n                                <AccordionContent className=\"space-y-2\">\n                                     {TRAINING_ORDER.map(id => {\n                                         const name = trainingNames.get(id);\n                                         if(!name) return null;\n                                         return (\n                                            <div key={id} className=\"flex justify-between text-sm\">\n                                                <span className=\"text-muted-foreground\">{name}</span>\n                                                <span className=\"font-semibold\">{member.trainingLevels.get(id) || 0}</span>\n                                            </div>\n                                         )\n                                     })}\n                                </AccordionContent>\n                            </AccordionItem>\n                             <AccordionItem value=\"tropas\">\n                                <AccordionTrigger>Tropas</AccordionTrigger>\n                                <AccordionContent className=\"space-y-2\">\n                                     {RECRUITMENT_TROOP_ORDER.concat(SECURITY_TROOP_ORDER).map(id => {\n                                         const name = troopNames.get(id);\n                                         if(!name) return null;\n                                         return (\n                                            <div key={id} className=\"flex justify-between text-sm\">\n                                                <span className=\"text-muted-foreground\">{name}</span>\n                                                <span className=\"font-semibold\">{formatNumber(member.troops.get(id) || 0)}</span>\n                                            </div>\n                                         )\n                                     })}\n                                </AccordionContent>\n                            </AccordionItem>\n                        </Accordion>\n                    </CardContent>\n                </Card>\n            ))}\n        </div>\n    );\n\n    return (\n        <div className=\"space-y-4\">\n             <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Visi\u00f3n Global de la Familia</h2>\n                    <p className=\"text-muted-foreground\">\n                       Comparativa de todos los miembros de {family.name}\n                    </p>\n                </div>\n                <Button asChild variant=\"outline\" size=\"sm\">\n                    <Link href=\"/family\">\n                        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                        Volver\n                    </Link>\n                </Button>\n            </div>\n            {isMobile ? renderMobileCards() : renderDesktopTable()}\n        </div>\n    )\n}\n"
                },
                {
                  "name": "family-management-view.tsx",
                  "type": "file",
                  "content": "\n\n'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { FullFamily, FullFamilyMember } from \"@/lib/types\";\nimport { FamilyRole } from \"@prisma/client\";\nimport { useTransition } from \"react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Crown, Shield, User as UserIcon, AlertCircle, Trash2, Loader2, Check, MoreVertical } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { updateMemberRole, transferLeadership, expelMember } from \"@/lib/actions/family.actions\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface FamilyManagementViewProps {\n    family: FullFamily;\n    currentUserId: string;\n}\n\nconst roleTranslations: Record<FamilyRole, string> = {\n    [FamilyRole.LEADER]: \"L\u00edder\",\n    [FamilyRole.CO_LEADER]: \"Co-L\u00edder\",\n    [FamilyRole.MEMBER]: \"Miembro\",\n};\n\nconst roleColors: Record<FamilyRole, string> = {\n    [FamilyRole.LEADER]: \"bg-amber-500 text-amber-900\",\n    [FamilyRole.CO_LEADER]: \"bg-blue-500 text-blue-900\",\n    [FamilyRole.MEMBER]: \"bg-gray-500 text-gray-100\",\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\n\nfunction MemberActions({ member, familyId, currentUserId }: { member: FullFamilyMember, familyId: string, currentUserId: string }) {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n    const isMobile = useIsMobile();\n    \n    if (member.userId === currentUserId) return null;\n\n    const handleRoleChange = (newRole: FamilyRole) => {\n        startTransition(async () => {\n            const result = await updateMemberRole(member.userId, familyId, newRole);\n            if (result.error) toast({ variant: 'destructive', title: 'Error', description: result.error });\n            else toast({ title: '\u00c9xito', description: result.success });\n        });\n    }\n    \n    const handleTransferLeadership = () => {\n        startTransition(async () => {\n            const result = await transferLeadership(member.userId, familyId);\n            if (result.error) toast({ variant: 'destructive', title: 'Error', description: result.error });\n            else toast({ title: '\u00c9xito', description: result.success });\n        });\n    }\n\n    const handleExpel = () => {\n         startTransition(async () => {\n            const result = await expelMember(member.userId, familyId);\n            if (result.error) toast({ variant: 'destructive', title: 'Error', description: result.error });\n            else toast({ title: '\u00c9xito', description: result.success });\n        });\n    }\n    \n    const roleSelect = (\n        <Select onValueChange={(role) => handleRoleChange(role as FamilyRole)} defaultValue={member.role} disabled={isPending}>\n            <SelectTrigger className=\"w-[150px] h-9\">\n                <SelectValue placeholder=\"Cambiar Rango\" />\n            </SelectTrigger>\n            <SelectContent>\n                <SelectItem value={FamilyRole.CO_LEADER}>Co-L\u00edder</SelectItem>\n                <SelectItem value={FamilyRole.MEMBER}>Miembro</SelectItem>\n            </SelectContent>\n        </Select>\n    );\n\n    const transferDialog = (\n        <AlertDialog>\n            <AlertDialogTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\">Transferir Liderazgo</Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n                <AlertDialogHeader>\n                    <AlertDialogTitle>\u00bfTransferir el liderazgo?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                        Esta acci\u00f3n es irreversible. Ceder\u00e1s tu rango de L\u00edder a {member.user.name}. \u00bfEst\u00e1s seguro?\n                    </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                    <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleTransferLeadership} disabled={isPending}>\n                        {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Check />}\n                        Confirmar\n                    </AlertDialogAction>\n                </AlertDialogFooter>\n            </AlertDialogContent>\n        </AlertDialog>\n    );\n\n    const expelDialog = (\n        <AlertDialog>\n            <AlertDialogTrigger asChild>\n                 <Button variant=\"destructive\" size=\"sm\">\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    Expulsar\n                </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n                <AlertDialogHeader>\n                    <AlertDialogTitle>\u00bfExpulsar a {member.user.name}?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                        El jugador ser\u00e1 eliminado de la familia permanentemente.\n                    </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                    <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                    <AlertDialogAction onClick={handleExpel} variant=\"destructive\" disabled={isPending}>\n                        {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Trash2 />}\n                        Expulsar\n                    </AlertDialogAction>\n                </AlertDialogFooter>\n            </AlertDialogContent>\n        </AlertDialog>\n    );\n\n\n    if (isMobile) {\n        return (\n             <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\"><MoreVertical className=\"h-5 w-5\"/></Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\n                         <Select onValueChange={(role) => handleRoleChange(role as FamilyRole)} defaultValue={member.role} disabled={isPending}>\n                            <SelectTrigger className=\"w-full border-none h-auto p-0 justify-start gap-2 focus:ring-0\">\n                                <SelectValue placeholder=\"Cambiar Rango\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value={FamilyRole.CO_LEADER}>Co-L\u00edder</SelectItem>\n                                <SelectItem value={FamilyRole.MEMBER}>Miembro</SelectItem>\n                            </SelectContent>\n                        </Select>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator/>\n                    <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                            <DropdownMenuItem onSelect={(e) => e.preventDefault()}>Transferir Liderazgo</DropdownMenuItem>\n                        </AlertDialogTrigger>\n                         <AlertDialogContent>\n                            <AlertDialogHeader>\n                                <AlertDialogTitle>\u00bfTransferir el liderazgo?</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                    Esta acci\u00f3n es irreversible. Ceder\u00e1s tu rango de L\u00edder a {member.user.name}. \u00bfEst\u00e1s seguro?\n                                </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                                <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                                <AlertDialogAction onClick={handleTransferLeadership} disabled={isPending}>\n                                    {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Check />}\n                                    Confirmar\n                                </AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                     <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                            <DropdownMenuItem onSelect={(e) => e.preventDefault()} className=\"text-destructive focus:bg-destructive/10 focus:text-destructive\">Expulsar Miembro</DropdownMenuItem>\n                        </AlertDialogTrigger>\n                         <AlertDialogContent>\n                             <AlertDialogHeader>\n                                <AlertDialogTitle>\u00bfExpulsar a {member.user.name}?</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                    El jugador ser\u00e1 eliminado de la familia permanentemente.\n                                </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                                <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                                <AlertDialogAction onClick={handleExpel} variant=\"destructive\" disabled={isPending}>\n                                    {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Trash2 />}\n                                    Expulsar\n                                </AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                     </AlertDialog>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        )\n    }\n\n    return (\n        <div className=\"flex items-center gap-2\">\n            {roleSelect}\n            {transferDialog}\n            {expelDialog}\n        </div>\n    );\n}\n\n\nexport function FamilyManagementView({ family, currentUserId }: FamilyManagementViewProps) {\n    const isMobile = useIsMobile();\n    \n    const sortedMembers = [...family.members].sort((a, b) => {\n        if (a.role === FamilyRole.LEADER) return -1;\n        if (b.role === FamilyRole.LEADER) return 1;\n        if (a.role === FamilyRole.CO_LEADER) return -1;\n        if (b.role === FamilyRole.CO_LEADER) return 1;\n        return (b.user.puntuacion?.puntosTotales ?? 0) - (a.user.puntuacion?.puntosTotales ?? 0);\n    });\n\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Administrar Rangos</h2>\n                    <p className=\"text-muted-foreground\">Familia: {family.name} [{family.tag}]</p>\n                </div>\n                <div className=\"flex gap-2\">\n                     <Button asChild>\n                        <Link href=\"/family\">\n                            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                            Volver\n                        </Link>\n                    </Button>\n                </div>\n            </div>\n            \n            <Card className=\"bg-primary/5 border-primary/20\">\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\"><AlertCircle className=\"text-primary\"/>Permisos del L\u00edder</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <ul className=\"list-disc pl-5 text-muted-foreground space-y-1 text-sm\">\n                        <li>Cambiar rangos de miembros a Co-L\u00edder o Miembro.</li>\n                        <li>Transferir el liderazgo a otro miembro (esta acci\u00f3n es irreversible).</li>\n                        <li>Expulsar miembros de la familia.</li>\n                    </ul>\n                </CardContent>\n            </Card>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle>Miembros de la Familia</CardTitle>\n                    <CardDescription>Gestiona los rangos y permisos de los miembros.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                     {/* Vista de tabla para escritorio */}\n                    <div className=\"hidden md:block border rounded-lg overflow-hidden\">\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Miembro</TableHead>\n                                    <TableHead>Rango Actual</TableHead>\n                                    <TableHead className=\"text-right\">Puntos</TableHead>\n                                    <TableHead className=\"text-right\">Acciones</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {sortedMembers.map(member => (\n                                    <TableRow key={member.userId}>\n                                        <TableCell>\n                                            <div className=\"flex items-center gap-3\">\n                                                <Avatar>\n                                                    <AvatarImage src={member.user.avatarUrl || ''} />\n                                                    <AvatarFallback>{member.user.name.charAt(0)}</AvatarFallback>\n                                                </Avatar>\n                                                <span className=\"font-semibold\">{member.user.name}</span>\n                                            </div>\n                                        </TableCell>\n                                        <TableCell>\n                                            <Badge className={roleColors[member.role]}>{roleTranslations[member.role]}</Badge>\n                                        </TableCell>\n                                        <TableCell className=\"text-right font-mono\">{formatPoints(member.user.puntuacion?.puntosTotales)}</TableCell>\n                                        <TableCell className=\"text-right\">\n                                            <MemberActions member={member} familyId={family.id} currentUserId={currentUserId} />\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </div>\n                     {/* Vista de tarjetas para m\u00f3vil */}\n                    <div className=\"md:hidden space-y-3\">\n                         {sortedMembers.map(member => (\n                            <Card key={member.userId} className=\"p-4\">\n                                 <div className=\"flex items-start justify-between gap-4\">\n                                     <div className=\"flex items-center gap-3\">\n                                        <Avatar>\n                                            <AvatarImage src={member.user.avatarUrl || ''} />\n                                            <AvatarFallback>{member.user.name.charAt(0)}</AvatarFallback>\n                                        </Avatar>\n                                        <div>\n                                            <p className=\"font-semibold\">{member.user.name}</p>\n                                            <Badge className={`${roleColors[member.role]} text-xs`}>{roleTranslations[member.role]}</Badge>\n                                        </div>\n                                    </div>\n                                    <MemberActions member={member} familyId={family.id} currentUserId={currentUserId} />\n                                </div>\n                                <Separator className=\"my-3\"/>\n                                <div className=\"flex justify-between items-center text-sm\">\n                                    <span className=\"text-muted-foreground\">Puntos</span>\n                                    <span className=\"font-mono font-semibold\">{formatPoints(member.user.puntuacion?.puntosTotales)}</span>\n                                </div>\n                            </Card>\n                         ))}\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"
                },
                {
                  "name": "family-members-view.tsx",
                  "type": "file",
                  "content": "\n\n'use client'\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { FullFamily, FullFamilyMember } from \"@/lib/types\";\nimport { FamilyRole } from \"@prisma/client\";\nimport { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, ArrowUpDown, Crown, Shield, User as UserIcon } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface FamilyMembersViewProps {\n    family: FullFamily;\n}\n\ntype SortKey = 'name' | 'points' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nconst roleTranslations: Record<FamilyRole, string> = {\n    [FamilyRole.LEADER]: \"L\u00edder\",\n    [FamilyRole.CO_LEADER]: \"Co-L\u00edder\",\n    [FamilyRole.MEMBER]: \"Miembro\",\n};\n\nconst roleIcons: Record<FamilyRole, React.ReactNode> = {\n    [FamilyRole.LEADER]: <Crown className=\"h-4 w-4 text-amber-400\" />,\n    [FamilyRole.CO_LEADER]: <Shield className=\"h-4 w-4 text-blue-400\" />,\n    [FamilyRole.MEMBER]: <UserIcon className=\"h-4 w-4 text-muted-foreground\" />,\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nfunction getLastSeenStatus(lastSeen: Date | null): { text: string; isOnline: boolean; minutesAgo: number } {\n    if (!lastSeen) return { text: \"Nunca\", isOnline: false, minutesAgo: Infinity };\n    const now = new Date();\n    const diffSeconds = Math.floor((now.getTime() - new Date(lastSeen).getTime()) / 1000);\n    const diffMinutes = Math.floor(diffSeconds / 60);\n\n    if (diffMinutes < 5) return { text: \"En L\u00ednea\", isOnline: true, minutesAgo: diffMinutes };\n    if (diffMinutes < 60) return { text: `Hace ${diffMinutes}m`, isOnline: false, minutesAgo: diffMinutes };\n    \n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return { text: `Hace ${diffHours}h`, isOnline: false, minutesAgo: diffMinutes };\n\n    const diffDays = Math.floor(diffHours / 24);\n    return { text: `Hace ${diffDays}d`, isOnline: false, minutesAgo: diffMinutes };\n}\n\n\nexport function FamilyMembersView({ family }: FamilyMembersViewProps) {\n    const [isClient, setIsClient] = useState(false);\n    const [sortKey, setSortKey] = useState<SortKey>('points');\n    const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n\n    useEffect(() => {\n        setIsClient(true);\n        const timer = setInterval(() => {\n            // The purpose of the timer is just to force a re-render periodically\n            // to update the \"last seen\" status, so we don't need to manage state here.\n        }, 60000);\n        return () => clearInterval(timer);\n    }, []);\n\n    const handleSort = (key: SortKey) => {\n        if (sortKey === key) {\n            setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n        } else {\n            setSortKey(key);\n            setSortDirection('asc');\n        }\n    }\n    \n    const sortedMembers = [...family.members].sort((a, b) => {\n        const statusA = isClient ? getLastSeenStatus(a.user.lastSeen) : { minutesAgo: Infinity };\n        const statusB = isClient ? getLastSeenStatus(b.user.lastSeen) : { minutesAgo: Infinity };\n\n        let compareA: string | number;\n        let compareB: string | number;\n\n        switch (sortKey) {\n            case 'name':\n                compareA = a.user.name.toLowerCase();\n                compareB = b.user.name.toLowerCase();\n                break;\n            case 'points':\n                compareA = b.user.puntuacion?.puntosTotales ?? 0; // Default desc\n                compareB = a.user.puntuacion?.puntosTotales ?? 0;\n                break;\n            case 'status':\n                compareA = statusA.minutesAgo; // Online first\n                compareB = statusB.minutesAgo;\n                break;\n            default:\n                return 0;\n        }\n\n        if (compareA > compareB) return sortDirection === 'asc' ? 1 : -1;\n        if (compareA < compareB) return sortDirection === 'asc' ? -1 : 1;\n        return 0;\n    });\n\n    return (\n        <div className=\"space-y-4\">\n             <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Miembros de {family.name}</h2>\n                    <p className=\"text-muted-foreground\">\n                        Lista de todos los jugadores de tu familia.\n                    </p>\n                </div>\n                <Button asChild variant=\"outline\" size=\"sm\">\n                    <Link href=\"/family\">\n                        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                        Volver a la Familia\n                    </Link>\n                </Button>\n            </div>\n            <Card>\n                <CardContent className=\"p-0\">\n                     {/* Desktop Table */}\n                    <Table className=\"hidden md:table\">\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead className=\"w-[80px]\">#</TableHead>\n                                <TableHead>\n                                     <Button variant=\"ghost\" onClick={() => handleSort('name')}>Jugador <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" /></Button>\n                                </TableHead>\n                                <TableHead>Posici\u00f3n</TableHead>\n                                <TableHead className=\"text-right\">\n                                     <Button variant=\"ghost\" onClick={() => handleSort('points')}>Puntos <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" /></Button>\n                                </TableHead>\n                                <TableHead className=\"text-right\">\n                                    <Button variant=\"ghost\" onClick={() => handleSort('status')}>Estado <ArrowUpDown className=\"ml-2 h-4 w-4 inline\" /></Button>\n                                </TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {sortedMembers.map((member, index) => {\n                                const status = isClient ? getLastSeenStatus(member.user.lastSeen) : null;\n                                return (\n                                    <TableRow key={member.user.id}>\n                                        <TableCell className=\"font-medium text-muted-foreground\">{index + 1}</TableCell>\n                                        <TableCell>\n                                            <Link href={`/profile/${member.user.id}`} className=\"font-semibold hover:underline\">{member.user.name}</Link>\n                                        </TableCell>\n                                        <TableCell>\n                                            <div className=\"flex items-center gap-2\">\n                                                {roleIcons[member.role]}\n                                                <span>{roleTranslations[member.role]}</span>\n                                            </div>\n                                        </TableCell>\n                                        <TableCell className=\"text-right font-mono\">{formatPoints(member.user.puntuacion?.puntosTotales)}</TableCell>\n                                        <TableCell className=\"text-right\">\n                                            {isClient && status ? (\n                                                <div className=\"flex items-center justify-end gap-2\">\n                                                    <div className={cn(\"h-2.5 w-2.5 rounded-full\", status.isOnline ? \"bg-green-500\" : \"bg-muted\")} />\n                                                    <span className={cn(\"font-mono text-sm\", status.isOnline ? \"text-green-400\" : \"text-muted-foreground\")}>\n                                                        {status.text}\n                                                    </span>\n                                                </div>\n                                            ) : (\n                                                <span className=\"text-sm text-muted-foreground\">...</span>\n                                            )}\n                                        </TableCell>\n                                    </TableRow>\n                                )\n                            })}\n                        </TableBody>\n                    </Table>\n                     {/* Mobile Cards */}\n                    <div className=\"md:hidden p-2 space-y-2\">\n                        {sortedMembers.map((member, index) => {\n                             const status = isClient ? getLastSeenStatus(member.user.lastSeen) : null;\n                             return (\n                                <Card key={member.user.id} className=\"p-4\">\n                                    <div className=\"flex items-start justify-between\">\n                                        <div className=\"flex items-center gap-3\">\n                                            <span className=\"text-lg font-bold text-muted-foreground\">#{index + 1}</span>\n                                            <div>\n                                                 <Link href={`/profile/${member.user.id}`} className=\"font-semibold hover:underline\">{member.user.name}</Link>\n                                                 <div className=\"flex items-center gap-1.5 text-xs text-muted-foreground\">\n                                                    {roleIcons[member.role]}\n                                                    <span>{roleTranslations[member.role]}</span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        {isClient && status ? (\n                                            <div className={cn(\"text-xs font-bold px-2 py-1 rounded-full flex items-center gap-1.5\", status.isOnline ? \"bg-green-500/20 text-green-400\" : \"bg-muted\")}>\n                                                <div className={cn(\"h-2 w-2 rounded-full\", status.isOnline ? \"bg-green-500\" : \"bg-muted-foreground\")} />\n                                                {status.text}\n                                            </div>\n                                        ) : (\n                                            <div className=\"text-xs font-bold px-2 py-1 rounded-full flex items-center gap-1.5 bg-muted\">...</div>\n                                        )}\n                                    </div>\n                                    <Separator className=\"my-3\"/>\n                                    <div className=\"text-center\">\n                                        <p className=\"text-xl font-bold font-mono text-primary\">{formatPoints(member.user.puntuacion?.puntosTotales)}</p>\n                                        <p className=\"text-xs text-muted-foreground\">Puntos</p>\n                                    </div>\n                                </Card>\n                             )\n                        })}\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n"
                },
                {
                  "name": "family-requests-view.tsx",
                  "type": "file",
                  "content": "\n'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FullFamilyInvitation } from \"@/lib/types\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTransition } from \"react\";\nimport { acceptRequest, rejectInvitation } from \"@/lib/actions/family.actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Check, Loader2, X, ArrowLeft } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Link from \"next/link\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\n\ninterface FamilyRequestsViewProps {\n    requests: FullFamilyInvitation[];\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nexport function FamilyRequestsView({ requests }: FamilyRequestsViewProps) {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n\n    const handleAction = (action: 'accept' | 'reject', invitationId: string) => {\n        startTransition(async () => {\n            const result = action === 'accept' \n                ? await acceptRequest(invitationId)\n                : await rejectInvitation(invitationId);\n            \n            if(result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: result.success });\n            }\n        })\n    }\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Solicitudes para Unirse</h2>\n                    <p className=\"text-muted-foreground\">\n                       Gestiona las solicitudes pendientes de los jugadores que quieren unirse a tu familia.\n                    </p>\n                </div>\n                <Button asChild variant=\"outline\" size=\"sm\">\n                    <Link href=\"/family\">\n                        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                        Volver a la Familia\n                    </Link>\n                </Button>\n            </div>\n            <Card>\n                <CardContent className=\"p-0\">\n                    {requests.length === 0 ? (\n                        <p className=\"p-6 text-center text-muted-foreground\">No hay solicitudes pendientes.</p>\n                    ) : (\n                        <>\n                        {/* Desktop Table */}\n                        <Table className=\"hidden md:table\">\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Jugador</TableHead>\n                                    <TableHead className=\"text-right\">Puntos</TableHead>\n                                    <TableHead className=\"text-right\">Fecha Solicitud</TableHead>\n                                    <TableHead className=\"text-right\">Acciones</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                             <TableBody>\n                                {requests.map(req => (\n                                    <TableRow key={req.id}>\n                                        <TableCell className=\"font-semibold\">{req.user.name}</TableCell>\n                                        <TableCell className=\"text-right font-mono\">{formatPoints(req.user.puntuacion?.puntosTotales)}</TableCell>\n                                        <TableCell className=\"text-right\">{new Date(req.createdAt).toLocaleDateString()}</TableCell>\n                                        <TableCell className=\"text-right space-x-2\">\n                                            <Button size=\"icon\" variant=\"outline\" className=\"text-green-500 hover:text-green-500 hover:bg-green-500/10\" onClick={() => handleAction('accept', req.id)} disabled={isPending}>\n                                                {isPending ? <Loader2 className=\"animate-spin\" /> : <Check />}\n                                            </Button>\n                                             <Button size=\"icon\" variant=\"outline\" className=\"text-destructive hover:text-destructive hover:bg-destructive/10\" onClick={() => handleAction('reject', req.id)} disabled={isPending}>\n                                                {isPending ? <Loader2 className=\"animate-spin\" /> : <X />}\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                         {/* Mobile Cards */}\n                         <div className=\"md:hidden p-2 space-y-2\">\n                            {requests.map(req => (\n                                <Card key={req.id} className=\"p-4\">\n                                     <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center gap-3\">\n                                             <Avatar>\n                                                <AvatarImage src={req.user.avatarUrl || ''} />\n                                                <AvatarFallback>{req.user.name.charAt(0)}</AvatarFallback>\n                                            </Avatar>\n                                            <div>\n                                                 <p className=\"font-semibold\">{req.user.name}</p>\n                                                <p className=\"text-xs text-muted-foreground\">{new Date(req.createdAt).toLocaleDateString()}</p>\n                                            </div>\n                                        </div>\n                                         <div className=\"text-right\">\n                                            <p className=\"font-bold text-primary\">{formatPoints(req.user.puntuacion?.puntosTotales)}</p>\n                                            <p className=\"text-xs text-muted-foreground\">Puntos</p>\n                                        </div>\n                                    </div>\n                                    <Separator className=\"my-3\"/>\n                                    <div className=\"flex justify-end gap-2\">\n                                         <Button size=\"sm\" variant=\"outline\" className=\"flex-1 text-destructive hover:text-destructive hover:bg-destructive/10\" onClick={() => handleAction('reject', req.id)} disabled={isPending}>\n                                            <X className=\"mr-2 h-4 w-4\"/> Rechazar\n                                        </Button>\n                                        <Button size=\"sm\" className=\"flex-1\" onClick={() => handleAction('accept', req.id)} disabled={isPending}>\n                                            <Check className=\"mr-2 h-4 w-4\"/> Aceptar\n                                        </Button>\n                                    </div>\n                                </Card>\n                            ))}\n                         </div>\n                        </>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n"
                },
                {
                  "name": "find-family-view.tsx",
                  "type": "file",
                  "content": "\n'use client'\n\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FullFamily, FullFamilyInvitation } from \"@/lib/types\";\nimport { Button } from \"@/components/ui/button\";\nimport { applyToFamily, cancelInvitation, rejectInvitation } from \"@/lib/actions/family.actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useTransition } from \"react\";\nimport { Check, Hourglass, Loader2, Send, X } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { InvitationStatus, InvitationType } from \"@prisma/client\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Link from \"next/link\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { acceptFamilyInvitation } from \"@/lib/actions/family.actions\";\n\ninterface FindFamilyViewProps {\n    families: FullFamily[];\n    userInvitations: FullFamilyInvitation[];\n    currentUserId: string;\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nfunction ActionButton({ familyId, userInvitations }: { familyId: string, userInvitations: FullFamilyInvitation[] }) {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n\n    const existingRequest = userInvitations.find(inv => inv.familyId === familyId && inv.type === InvitationType.REQUEST);\n\n    const handleApply = () => {\n        startTransition(async () => {\n            const result = await applyToFamily(familyId);\n            if(result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: 'Solicitud enviada correctamente.' });\n            }\n        });\n    }\n\n    if(existingRequest) {\n        return (\n             <Button size=\"sm\" variant=\"secondary\" disabled>\n                <Hourglass className=\"mr-2 h-4 w-4\" />\n                Pendiente\n            </Button>\n        )\n    }\n\n    return (\n        <Button size=\"sm\" onClick={handleApply} disabled={isPending}>\n            {isPending ? <Loader2 className=\"animate-spin mr-2 h-4 w-4\" /> : <Send className=\"mr-2 h-4 w-4\" />}\n            Enviar Solicitud\n        </Button>\n    )\n}\n\nexport function FindFamilyView({ families, userInvitations, currentUserId }: FindFamilyViewProps) {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n\n    const filteredFamilies = families.filter(family => \n        family.name.toLowerCase().includes(searchTerm.toLowerCase()) || \n        family.tag.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const handleInvitationAction = (action: 'accept' | 'reject', invitationId: string) => {\n        startTransition(async () => {\n            const result = action === 'accept'\n                ? await acceptFamilyInvitation(invitationId) \n                : await rejectInvitation(invitationId);\n            \n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: result.success });\n            }\n        })\n    }\n\n    const familyInvitations = userInvitations.filter(inv => inv.type === 'INVITATION');\n\n    return (\n        <div className=\"space-y-4\">\n             <div className=\"flex items-center justify-between\">\n                <div>\n                     <Button asChild variant=\"outline\" size=\"sm\">\n                        <Link href=\"/family\">\n                            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                            Volver\n                        </Link>\n                    </Button>\n                </div>\n            </div>\n            <Tabs defaultValue=\"search\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"search\">Buscar Familia</TabsTrigger>\n                    <TabsTrigger value=\"invitations\">\n                        Invitaciones\n                        {familyInvitations.length > 0 && <Badge variant=\"destructive\" className=\"ml-2\">{familyInvitations.length}</Badge>}\n                    </TabsTrigger>\n                </TabsList>\n                <TabsContent value=\"search\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Buscar Familias</CardTitle>\n                            <CardDescription>Encuentra y solicita unirte a una familia existente.</CardDescription>\n                            <Input \n                                placeholder=\"Buscar por nombre o tag...\"\n                                value={searchTerm}\n                                onChange={(e) => setSearchTerm(e.target.value)}\n                                className=\"mt-2\"\n                            />\n                        </CardHeader>\n                        <CardContent className=\"p-0\">\n                            <div className=\"md:grid md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n                                {filteredFamilies.map(family => (\n                                    <Card key={family.id} className=\"flex flex-col\">\n                                        <CardHeader className=\"flex flex-row items-center gap-4\">\n                                            <Avatar className=\"h-16 w-16\">\n                                                <AvatarImage src={family.avatarUrl || ''} />\n                                                <AvatarFallback>{family.tag}</AvatarFallback>\n                                            </Avatar>\n                                            <div>\n                                                <CardTitle>[{family.tag}] {family.name}</CardTitle>\n                                                <CardDescription>{family.members.length} miembros</CardDescription>\n                                            </div>\n                                        </CardHeader>\n                                        <CardContent className=\"text-sm text-muted-foreground flex-grow\">\n                                            <p className=\"line-clamp-2\">{family.description || \"Esta familia no tiene descripci\u00f3n.\"}</p>\n                                        </CardContent>\n                                        <CardFooter className=\"flex justify-between items-center\">\n                                            <span className=\"text-xs font-bold\">Puntos: --</span>\n                                            <ActionButton familyId={family.id} userInvitations={userInvitations}/>\n                                        </CardFooter>\n                                    </Card>\n                                ))}\n                            </div>\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n                <TabsContent value=\"invitations\">\n                    <Card>\n                         <CardHeader>\n                            <CardTitle>Invitaciones Recibidas</CardTitle>\n                            <CardDescription>Otras familias te quieren en sus filas. \u00a1Decide tu futuro!</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            {familyInvitations.length > 0 ? (\n                                <div className=\"space-y-4\">\n                                    {familyInvitations.map(inv => (\n                                        <div key={inv.id} className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 border rounded-lg gap-4\">\n                                            <div className=\"flex items-center gap-4\">\n                                                <Avatar>\n                                                    <AvatarImage src={inv.family.avatarUrl || ''}/>\n                                                    <AvatarFallback>{inv.family.tag}</AvatarFallback>\n                                                </Avatar>\n                                                <div>\n                                                    <p className=\"font-semibold\">[{inv.family.tag}] {inv.family.name}</p>\n                                                    <p className=\"text-xs text-muted-foreground\">Te ha invitado a unirte.</p>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex gap-2 shrink-0\">\n                                                <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\" onClick={() => handleInvitationAction('accept', inv.id)} disabled={isPending}>\n                                                    <Check className=\"mr-2 h-4 w-4\"/> Aceptar\n                                                </Button>\n                                                <Button size=\"sm\" variant=\"destructive\" onClick={() => handleInvitationAction('reject', inv.id)} disabled={isPending}>\n                                                    <X className=\"mr-2 h-4 w-4\"/> Rechazar\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </div>\n                            ) : (\n                                <p className=\"text-center text-muted-foreground py-8\">No tienes invitaciones pendientes.</p>\n                            )}\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n            </Tabs>\n        </div>\n    );\n}\n"
                },
                {
                  "name": "invite-member-dialog.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MailPlus, Loader2 } from \"lucide-react\";\nimport { useState, useTransition } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { inviteUserToFamily } from \"@/lib/actions/family.actions\";\n\ninterface InviteMemberDialogProps {\n    familyId: string;\n    allUsers: { id: string; name: string }[];\n}\n\nexport function InviteMemberDialog({ familyId, allUsers }: InviteMemberDialogProps) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [selectedUser, setSelectedUser] = useState<string | null>(null);\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n\n    const handleInvite = async () => {\n        if (!selectedUser) {\n            toast({ variant: 'destructive', title: 'Error', description: 'Debes seleccionar a un jugador.' });\n            return;\n        }\n\n        startTransition(async () => {\n            const result = await inviteUserToFamily(selectedUser, familyId);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: 'Invitaci\u00f3n enviada correctamente.' });\n                setIsOpen(false);\n                setSelectedUser(null);\n            }\n        });\n    }\n\n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogTrigger asChild>\n                <Button size=\"sm\">\n                    <MailPlus className=\"mr-2 h-4 w-4\" />\n                    Invitar Miembro\n                </Button>\n            </DialogTrigger>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>Invitar a un Jugador</DialogTitle>\n                    <DialogDescription>\n                        Selecciona a un jugador sin familia para enviarle una invitaci\u00f3n.\n                    </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-2 py-4\">\n                    <Label htmlFor=\"user-select\">Jugador</Label>\n                    <Select onValueChange={setSelectedUser}>\n                        <SelectTrigger id=\"user-select\">\n                            <SelectValue placeholder=\"Selecciona un jugador...\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                            {allUsers.length > 0 ? (\n                                allUsers.map(user => (\n                                    <SelectItem key={user.id} value={user.id}>{user.name}</SelectItem>\n                                ))\n                            ) : (\n                                <SelectItem value=\"none\" disabled>No hay jugadores para invitar.</SelectItem>\n                            )}\n                        </SelectContent>\n                    </Select>\n                </div>\n                <DialogFooter>\n                    <Button variant=\"ghost\" onClick={() => setIsOpen(false)}>Cancelar</Button>\n                    <Button onClick={handleInvite} disabled={isPending || !selectedUser}>\n                         {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                         Enviar Invitaci\u00f3n\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "incoming-attacks.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport type { IncomingAttack } from \"@/lib/types\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { Swords, Users, ShieldAlert } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ntype IncomingAttacksProps = {\n    attacks: IncomingAttack[];\n};\n\nfunction formatTime(totalSeconds: number): string {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n    return [hours, minutes, seconds]\n        .map(v => v.toString().padStart(2, '0'))\n        .join(':');\n}\n\nfunction CountdownTimer({ label, endDate, onFinish }: {label: string, endDate: string | Date, onFinish: () => void}) {\n    const [timeLeft, setTimeLeft] = useState('');\n    const [isImminent, setIsImminent] = useState(false);\n\n    useEffect(() => {\n        const end = new Date(endDate).getTime();\n        const intervalId = setInterval(() => {\n            const now = new Date().getTime();\n            const difference = Math.floor((end - now) / 1000);\n\n            if (difference < -1) { \n                setTimeLeft('00:00:00');\n                clearInterval(intervalId);\n                onFinish();\n            } else {\n                setTimeLeft(formatTime(difference));\n                setIsImminent(difference < 300); // 5 minutes\n            }\n        }, 1000);\n        \n        const now = new Date().getTime();\n        const difference = Math.floor((end - now) / 1000);\n        setTimeLeft(formatTime(difference > 0 ? difference : 0));\n        setIsImminent(difference < 300);\n\n        return () => clearInterval(intervalId);\n    }, [endDate, onFinish]);\n\n    return (\n        <div className=\"flex justify-between items-center text-sm\">\n            <span>{label}</span>\n            <span className={cn(\"font-mono text-destructive\", isImminent && \"animate-pulse\")}>{timeLeft}</span>\n        </div>\n    );\n}\n\nexport function IncomingAttacks({ attacks }: IncomingAttacksProps) {\n    const router = useRouter();\n\n    if (!attacks || attacks.length === 0) {\n        return null;\n    }\n\n    const handleRefresh = () => {\n        router.refresh();\n    };\n    \n    const isAnyAttackImminent = attacks.some(attack => (new Date(attack.arrivalTime).getTime() - new Date().getTime()) < 300000);\n\n    return (\n        <Card className={cn(\"border-destructive/80 bg-destructive/10\", isAnyAttackImminent && \"animate-pulse\")}>\n            <CardHeader className=\"flex-row items-center space-x-3 space-y-0 p-4 bg-destructive/20 text-destructive-foreground\">\n                <ShieldAlert className=\"h-6 w-6 text-destructive\"/>\n                <CardTitle className=\"font-heading tracking-wider text-red-400\">\u00a1ATAQUES ENTRANTES DETECTADOS! ({attacks.length})</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n                 <div className=\"bg-card text-card-foreground px-4 py-3 rounded-b-md space-y-2\">\n                    {attacks.map(attack => (\n                        <div key={attack.id} className=\"text-sm\">\n                           <div className=\"flex justify-between items-center\">\n                                <span>{attack.attackerName} &rarr; {attack.targetProperty}</span>\n                                <div className=\"flex items-center gap-1\">\n                                    <Users className=\"h-4 w-4 text-muted-foreground\"/>\n                                    <span className=\"font-mono\">{attack.totalTroops}</span>\n                                </div>\n                           </div>\n                           <CountdownTimer \n                                label=\"Tiempo de llegada:\"\n                                endDate={attack.arrivalTime}\n                                onFinish={handleRefresh}\n                           />\n                        </div>\n                    ))}\n                 </div>\n            </CardContent>\n        </Card>\n    )\n}\n"
            },
            {
              "name": "live-clock.tsx",
              "type": "file",
              "content": "\n\n\"use client\"\n\nimport { useState, useEffect } from 'react';\nimport { Clock } from 'lucide-react';\n\nexport function LiveClock() {\n    const [currentTime, setCurrentTime] = useState('');\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n        const timer = setInterval(() => {\n            const now = new Date();\n            const timeZone = 'Africa/Nouakchott';\n            const date = now.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: '2-digit', timeZone });\n            const time = now.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit', second: '2-digit', timeZone, hour12: false });\n            setCurrentTime(`${date}, ${time}`);\n        }, 1000);\n\n        return () => clearInterval(timer);\n    }, []);\n\n    if (!isClient) {\n        // Render nothing on the server and initial client render to avoid mismatch\n        return null;\n    }\n\n    return (\n        <div className=\"hidden items-center gap-2 rounded-md bg-black/50 px-3 py-1 text-sm font-medium text-white lg:flex\">\n            <Clock className=\"h-4 w-4 text-primary\" />\n            <span className=\"tabular-nums\">{currentTime}</span>\n        </div>\n    );\n}\n"
            },
            {
              "name": "map-view.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useRouter, useSearchParams, usePathname } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { getPropertiesByLocation } from '@/lib/data';\nimport type { UserWithProgress, PropertyWithOwner } from '@/lib/types';\nimport { ChevronLeft, ChevronRight, Loader2, Send, ArrowUp, ArrowDown, ArrowLeft as ArrowLeftIcon, ArrowRight as ArrowRightIcon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogHeader,\n    DialogTitle,\n    DialogTrigger,\n    DialogFooter,\n    DialogClose,\n} from \"@/components/ui/dialog\"\nimport Image from 'next/image';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '../ui/tooltip';\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\nimport { Separator } from '../ui/separator';\n\nconst BuildingGrid = ({ properties, currentUser, currentCiudad, currentBarrio }: { properties: PropertyWithOwner[], currentUser: UserWithProgress, currentCiudad: number, currentBarrio: number }) => {\n    const router = useRouter();\n    const buildings = Array.from({ length: 255 }, (_, i) => {\n        const edificio = i + 1;\n        const property = properties.find(p => p.edificio === edificio);\n        return { edificio, property };\n    });\n\n    const handleSendMission = (ciudad: number, barrio: number, edificio: number) => {\n        const params = new URLSearchParams();\n        params.set('ciudad', ciudad.toString());\n        params.set('barrio', barrio.toString());\n        params.set('edificio', edificio.toString());\n        router.push(`/missions?${params.toString()}`);\n    }\n\n    const getBuildingColor = (property: PropertyWithOwner | undefined): string => {\n        if (!property || !property.user) {\n            return \"bg-black/40 border-black/60 hover:bg-black/60\"; // Desocupado\n        }\n        if (property.userId === currentUser.id) {\n            return \"bg-primary/70 border-primary/90 text-primary-foreground hover:bg-primary hover:shadow-primary/50 hover:shadow-lg\"; // Propio\n        }\n        if (property.user.familyMember?.familyId && property.user.familyMember.familyId === currentUser.familyMember?.familyId) {\n            return \"bg-accent/70 border-accent/90 text-accent-foreground hover:bg-accent hover:shadow-accent/50 hover:shadow-lg\"; // Familia\n        }\n        return \"bg-destructive/70 border-destructive/90 text-destructive-foreground hover:bg-destructive hover:shadow-destructive/50 hover:shadow-lg\"; // Enemigo\n    };\n\n    return (\n        <div className=\"relative w-full aspect-[17/15] rounded-lg border overflow-hidden bg-black shadow-inner shadow-black/50\">\n             <Image\n                src=\"/img/map.png\"\n                alt=\"Mapa de la ciudad\"\n                fill\n                className=\"object-cover z-0 opacity-40\"\n                data-ai-hint=\"city map background\"\n            />\n            <div className=\"absolute inset-0 grid grid-cols-17 gap-0.5 p-1 z-10\">\n                {buildings.map(({ edificio, property }) => (\n                    <TooltipProvider key={edificio} delayDuration={0}>\n                        <Tooltip>\n                            <Dialog>\n                                <TooltipTrigger asChild>\n                                    <DialogTrigger asChild>\n                                        <div className={cn(\n                                            \"aspect-square flex items-center justify-center rounded-sm text-xs font-bold transition-all duration-200 cursor-pointer border hover:scale-110 hover:z-20\",\n                                            getBuildingColor(property)\n                                        )}>\n                                            <span className=\"opacity-75\">{property && edificio}</span>\n                                        </div>\n                                    </DialogTrigger>\n                                </TooltipTrigger>\n                                <DialogContent>\n                                    <DialogHeader>\n                                        <DialogTitle>Propiedad en [{currentCiudad}:{currentBarrio}:{edificio}]</DialogTitle>\n                                         <DialogDescription>\n                                            {property ? (\n                                                `Esta propiedad pertenece a ${property.user?.name || 'Desconocido'}.`\n                                            ) : (\n                                                \"Este solar est\u00e1 actualmente desocupado.\"\n                                            )}\n                                        </DialogDescription>\n                                    </DialogHeader>\n                                    {property && property.user && (\n                                        <div className='flex items-center gap-4'>\n                                             <Avatar className=\"h-20 w-20 border-2 border-primary\">\n                                                <AvatarImage src={property.user.avatarUrl || ''} alt={property.user.name || ''} data-ai-hint=\"mafia boss\" />\n                                                <AvatarFallback>{property.user.name?.charAt(0).toUpperCase()}</AvatarFallback>\n                                            </Avatar>\n                                            <div className='space-y-1'>\n                                                <p><strong>Jugador:</strong> {property.user.name}</p>\n                                                <p><strong>Familia:</strong> {property.user.familyMember?.family.name || 'Sin familia'}</p>\n                                                <p><strong>Puntos:</strong> {property.user.puntuacion?.puntosTotales.toLocaleString('de-DE') || 'N/A'}</p>\n                                            </div>\n                                        </div>\n                                    )}\n                                    <DialogFooter>\n                                         <DialogClose asChild>\n                                            <Button variant=\"outline\">Cerrar</Button>\n                                        </DialogClose>\n                                        <Button onClick={() => handleSendMission(currentCiudad, currentBarrio, edificio)}>\n                                            <Send className=\"mr-2 h-4 w-4\" />\n                                            Enviar Misi\u00f3n\n                                        </Button>\n                                    </DialogFooter>\n                                </DialogContent>\n                            </Dialog>\n                            <TooltipContent>\n                                <p className='font-bold text-base'>[{currentCiudad}:{currentBarrio}:{edificio}]</p>\n                                <Separator className='my-1'/>\n                                <p className='text-sm'>{property?.user?.name || \"Desocupado\"}</p>\n                                {property?.user?.familyMember && <p className='text-xs text-muted-foreground'>Familia: {property.user.familyMember.family.name}</p>}\n                            </TooltipContent>\n                        </Tooltip>\n                    </TooltipProvider>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nconst CoordinateInput = ({ label, value, onChange }: { label: string, value: number, onChange: (newValue: number) => void }) => {\n    const handleManualChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const val = parseInt(e.target.value, 10);\n        if (!isNaN(val) && val > 0) {\n            onChange(val);\n        } else if (e.target.value === '') {\n            onChange(1); \n        }\n    };\n    \n    return (\n        <div className=\"flex flex-col items-center gap-1\">\n            <span className=\"text-xs font-medium\">{label}</span>\n            <div className=\"flex items-center gap-1\">\n                <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8 transition-colors\" onClick={() => onChange(Math.max(1, value - 1))}>\n                    <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                <Input \n                    type=\"number\" \n                    className=\"w-16 h-8 text-center\" \n                    value={value}\n                    onChange={handleManualChange}\n                />\n                <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8 transition-colors\" onClick={() => onChange(value + 1)}>\n                    <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport function MapView({ initialCiudad, initialBarrio, initialProperties, currentUser }: { initialCiudad: number, initialBarrio: number, initialProperties: PropertyWithOwner[], currentUser: UserWithProgress }) {\n    const router = useRouter();\n    const pathname = usePathname();\n    const searchParams = useSearchParams();\n    const [ciudad, setCiudad] = useState(initialCiudad);\n    const [barrio, setBarrio] = useState(initialBarrio);\n    const [properties, setProperties] = useState(initialProperties);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const updateMap = useCallback((newCiudad: number, newBarrio: number) => {\n        setIsLoading(true);\n        const params = new URLSearchParams(searchParams);\n        params.set('ciudad', newCiudad.toString());\n        params.set('barrio', newBarrio.toString());\n        router.push(`${pathname}?${params.toString()}`);\n    }, [pathname, router, searchParams]);\n\n    useEffect(() => {\n        const ciudadParam = searchParams.get('ciudad');\n        const barrioParam = searchParams.get('barrio');\n        \n        const newCiudad = ciudadParam ? parseInt(ciudadParam, 10) : initialCiudad;\n        const newBarrio = barrioParam ? parseInt(barrioParam, 10) : initialBarrio;\n\n        if (newCiudad !== ciudad || newBarrio !== barrio || !properties.length) {\n            setCiudad(newCiudad);\n            setBarrio(newBarrio);\n            setIsLoading(true);\n            getPropertiesByLocation(newCiudad, newBarrio).then((data: PropertyWithOwner[]) => {\n                setProperties(data);\n                setIsLoading(false);\n            });\n        }\n    }, [searchParams, ciudad, barrio, initialCiudad, initialBarrio, properties.length]);\n\n    return (\n        <Card className=\"bg-card/80\">\n            <div className=\"space-y-4 p-4\">\n                <div className=\"flex flex-row flex-wrap justify-center items-end gap-2 p-2 rounded-lg bg-muted border\">\n                    <CoordinateInput label=\"Ciudad\" value={ciudad} onChange={setCiudad} />\n                    <CoordinateInput label=\"Barrio\" value={barrio} onChange={setBarrio} />\n                    <Button onClick={() => updateMap(ciudad, barrio)} disabled={isLoading} size=\"sm\" className=\"h-8\">\n                        {isLoading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n                        Ir\n                    </Button>\n                </div>\n\n                <div className=\"relative\">\n                    {isLoading && (\n                        <div className=\"absolute inset-0 bg-background/80 flex items-center justify-center rounded-lg z-20\">\n                            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                        </div>\n                    )}\n                     <div className=\"flex justify-center mb-1\">\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => updateMap(ciudad, barrio - 1)}><ArrowUp className=\"h-5 w-5\"/></Button>\n                    </div>\n                     <div className=\"flex items-center justify-center gap-1\">\n                         <Button variant=\"ghost\" size=\"icon\" onClick={() => updateMap(ciudad - 1, barrio)}><ArrowLeftIcon className=\"h-5 w-5\"/></Button>\n                        <BuildingGrid properties={properties} currentUser={currentUser} currentCiudad={ciudad} currentBarrio={barrio} />\n                         <Button variant=\"ghost\" size=\"icon\" onClick={() => updateMap(ciudad + 1, barrio)}><ArrowRightIcon className=\"h-5 w-5\"/></Button>\n                    </div>\n                     <div className=\"flex justify-center mt-1\">\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => updateMap(ciudad, barrio + 1)}><ArrowDown className=\"h-5 w-5\"/></Button>\n                    </div>\n                </div>\n            </div>\n        </Card>\n    )\n}\n"
            },
            {
              "name": "messages",
              "type": "directory",
              "children": [
                {
                  "name": "compose-message.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus } from \"lucide-react\";\nimport { useTransition, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\nimport { sendMessage } from \"@/lib/actions/message.actions\";\nimport { UserWithProgress } from \"@/lib/data\";\n\ninterface ComposeMessageProps {\n    allUsers: { id: string; name: string }[];\n    currentUser: UserWithProgress;\n}\n\nexport function ComposeMessage({ allUsers, currentUser }: ComposeMessageProps) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n\n    const otherUsers = allUsers.filter(u => u.id !== currentUser.id);\n\n    const handleSubmit = async (formData: FormData) => {\n        startTransition(async () => {\n            const result = await sendMessage(formData);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\u00c9xito', description: 'Mensaje enviado correctamente.' });\n                setIsOpen(false);\n            }\n        });\n    }\n\n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogTrigger asChild>\n                <Button>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Nuevo Mensaje\n                </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[625px]\">\n                <DialogHeader>\n                    <DialogTitle>Enviar Nuevo Mensaje</DialogTitle>\n                    <DialogDescription>\n                        Contacta con otros jugadores de Vendetta.\n                    </DialogDescription>\n                </DialogHeader>\n                <form action={handleSubmit} className=\"space-y-4\">\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"recipientId\">Destinatario</Label>\n                        <Select name=\"recipientId\" required>\n                            <SelectTrigger>\n                                <SelectValue placeholder=\"Selecciona un jugador...\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                {otherUsers.map(user => (\n                                    <SelectItem key={user.id} value={user.id}>{user.name}</SelectItem>\n                                ))}\n                            </SelectContent>\n                        </Select>\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"subject\">Asunto</Label>\n                        <Input id=\"subject\" name=\"subject\" placeholder=\"Asunto del mensaje\" required />\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"content\">Mensaje</Label>\n                        <Textarea id=\"content\" name=\"content\" placeholder=\"Escribe tu mensaje aqu\u00ed...\" required />\n                    </div>\n                    <DialogFooter>\n                        <Button type=\"submit\" disabled={isPending}>\n                             {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                             Enviar Mensaje\n                        </Button>\n                    </DialogFooter>\n                </form>\n            </DialogContent>\n        </Dialog>\n    );\n}\n"
                },
                {
                  "name": "message-detail.tsx",
                  "type": "file",
                  "content": "\n'use client';\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { FullMessage, FullBattleReport, FullEspionageReport } from \"@/lib/types\";\nimport { ArrowLeft, Reply, Trash2, Swords, Eye } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Shield } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport Link from \"next/link\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BattleReport as BattleReportType } from \"@/lib/types/simulation.types\";\n\ntype FeedItem = (FullMessage & { type: 'message' }) \n                | (FullBattleReport & { type: 'battle' }) \n                | (FullEspionageReport & { type: 'espionage' });\n\ninterface MessageDetailProps {\n    item: FeedItem;\n    onBack: () => void;\n}\n\nfunction formatNumber(num: number): string {\n    if (num === null || num === undefined) return \"0\";\n    return num.toLocaleString('de-DE');\n}\n\nexport function MessageDetail({ item, onBack }: MessageDetailProps) {\n    if (!item) {\n        return (\n            <div className=\"flex items-center justify-center h-full text-muted-foreground p-8 text-center\">\n                <p>Selecciona una notificaci\u00f3n para leerla.</p>\n            </div>\n        )\n    }\n\n    if (item.type === 'message') {\n        return (\n            <div className=\"flex flex-col h-full\">\n                <div className=\"p-4 border-b flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 flex-shrink-0 md:hidden\" onClick={onBack}>\n                            <ArrowLeft className=\"h-5 w-5\" />\n                        </Button>\n                        <Avatar className=\"h-10 w-10\">\n                             {item.sender ? (\n                                <AvatarImage src={item.sender.avatarUrl || ''} />\n                            ) : (\n                                <Shield className=\"h-full w-full p-2 text-muted-foreground\"/>\n                            )}\n                            <AvatarFallback>{item.sender?.name?.[0] || 'S'}</AvatarFallback>\n                        </Avatar>\n                         <div className=\"overflow-hidden\">\n                            <p className=\"font-semibold truncate\">{item.sender?.name || \"Sistema\"}</p>\n                            <p className=\"text-xs text-muted-foreground\">Recibido: {new Date(item.createdAt).toLocaleString('es-ES')}</p>\n                        </div>\n                    </div>\n                     <div className=\"flex items-center gap-2\">\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                            <Reply className=\"h-4 w-4\" />\n                            <span className=\"sr-only\">Responder</span>\n                        </Button>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-destructive hover:text-destructive\">\n                            <Trash2 className=\"h-4 w-4\" />\n                             <span className=\"sr-only\">Eliminar</span>\n                        </Button>\n                     </div>\n                </div>\n                 <div className=\"p-6 border-b\">\n                     <h2 className=\"text-xl font-bold\">{item.subject}</h2>\n                </div>\n                 {item.battleReportId && (\n                    <div className=\"p-4 border-b\">\n                        <Button asChild className=\"w-full\">\n                            <Link href={`/brawls/${item.battleReportId}`}>\n                                <Swords className=\"mr-2 h-4 w-4\" />\n                                Ver Informe de Batalla\n                            </Link>\n                        </Button>\n                    </div>\n                )}\n                {item.espionageReportId && (\n                    <div className=\"p-4 border-b\">\n                         <Button asChild className=\"w-full\">\n                            <Link href={`/espionage/${item.espionageReportId}`}>\n                                <Eye className=\"mr-2 h-4 w-4\" />\n                                Ver Informe de Espionaje\n                            </Link>\n                        </Button>\n                    </div>\n                )}\n                <ScrollArea className=\"flex-grow\">\n                     <div className=\"p-6 whitespace-pre-wrap text-sm leading-relaxed\">\n                        {item.content}\n                    </div>\n                </ScrollArea>\n           </div>\n        )\n    }\n\n    const details = item.details as BattleReportType;\n\n    return (\n        <div className=\"flex flex-col h-full\">\n             <div className=\"p-4 border-b flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 flex-shrink-0 md:hidden\" onClick={onBack}>\n                        <ArrowLeft className=\"h-5 w-5\" />\n                    </Button>\n                    {item.type === 'battle' ? <Swords className=\"h-8 w-8 text-destructive\"/> : <Eye className=\"h-8 w-8 text-blue-500\"/>}\n                     <div className=\"overflow-hidden\">\n                        <p className=\"font-semibold truncate\">{item.type === 'battle' ? 'Informe de Batalla' : 'Informe de Espionaje'}</p>\n                        <p className=\"text-xs text-muted-foreground\">Recibido: {new Date(item.createdAt).toLocaleString('es-ES')}</p>\n                    </div>\n                </div>\n            </div>\n            <ScrollArea className=\"flex-grow\">\n                <div className=\"p-4 space-y-4\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>{item.type === 'battle' ? 'Resultado del Combate' : 'Resultado del Espionaje'}</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            {item.type === 'battle' && (\n                                <div className=\"space-y-2\">\n                                    <div className=\"flex justify-between\"><span>Atacante:</span> <span className=\"font-bold\">{item.attacker.name}</span></div>\n                                    <div className=\"flex justify-between\"><span>Defensor:</span> <span className=\"font-bold\">{item.defender.name}</span></div>\n                                    <div className=\"flex justify-between\"><span>Ganador:</span> <span className=\"font-bold text-primary\">{details.winner}</span></div>\n                                    <Separator className=\"my-2\"/>\n                                    <p className=\"text-sm text-muted-foreground\">P\u00e9rdidas Atacante:</p>\n                                    <p className=\"text-xs\">Tropas: {formatNumber(details.finalStats.attacker.troopsLost)} | Puntos: {formatNumber(details.finalStats.attacker.pointsLost)}</p>\n                                    <p className=\"text-sm text-muted-foreground\">P\u00e9rdidas Defensor:</p>\n                                    <p className=\"text-xs\">Tropas: {formatNumber(details.finalStats.defender.troopsLost)} | Puntos: {formatNumber(details.finalStats.defender.pointsLost)}</p>\n                                </div>\n                            )}\n                             {item.type === 'espionage' && (\n                                <div className=\"space-y-2\">\n                                     <div className=\"flex justify-between\"><span>Objetivo:</span> <span className=\"font-bold\">{item.defender.name}</span></div>\n                                     <div className=\"flex justify-between\"><span>Resultado:</span> <span className=\"font-bold text-primary\">{item.details.intel ? '\u00c9xito' : 'Fallo'}</span></div>\n                                     <Separator className=\"my-2\"/>\n                                     {item.details.intel ? (\n                                         <p className=\"text-sm text-green-400\">Se obtuvo informaci\u00f3n sobre recursos y edificios.</p>\n                                     ): (\n                                         <p className=\"text-sm text-destructive\">Tus esp\u00edas fueron detectados y neutralizados.</p>\n                                     )}\n                                </div>\n                            )}\n                        </CardContent>\n                    </Card>\n                    <Button asChild className=\"w-full\">\n                        <Link href={`/${item.type === 'battle' ? 'brawls' : 'espionage'}/${item.id}`}>\n                            Ver Informe Completo\n                        </Link>\n                    </Button>\n                </div>\n            </ScrollArea>\n        </div>\n    )\n}\n"
                },
                {
                  "name": "message-folder-list.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Hammer, Inbox, Settings, Shield, Users, Eye } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst folders = [\n    { name: \"Todas\", category: \"ALL\", icon: <Inbox className=\"h-5 w-5\" /> },\n    { name: \"Mensajes\", category: \"JUGADOR\", icon: <Users className=\"h-5 w-5\" /> },\n    { name: \"Batallas\", category: \"BATALLA\", icon: <Shield className=\"h-5 w-5\" /> },\n    { name: \"Espionaje\", category: \"ESPIONAJE\", icon: <Eye className=\"h-5 w-5\" /> },\n    { name: \"Sistema\", category: \"SISTEMA\", icon: <Settings className=\"h-5 w-5\" /> },\n];\n\ninterface MessageFolderListProps {\n    selectedCategory: string;\n    onSelectCategory: (category: string) => void;\n    unreadCounts: Record<string, number>;\n}\n\nexport function MessageFolderList({ selectedCategory, onSelectCategory, unreadCounts }: MessageFolderListProps) {\n\n    return (\n        <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-semibold px-2\">Carpetas</h3>\n            <div className=\"flex flex-col gap-1\">\n                {folders.map(folder => {\n                    const count = unreadCounts[folder.category] || 0;\n                    return (\n                        <Button\n                            key={folder.category}\n                            variant={selectedCategory === folder.category ? \"secondary\" : \"ghost\"}\n                            className=\"w-full justify-start gap-3 px-4 py-6 text-base\"\n                            onClick={() => onSelectCategory(folder.category)}\n                        >\n                            {folder.icon}\n                            <span className=\"flex-grow\">{folder.name}</span>\n                            {count > 0 && <Badge variant=\"destructive\">{count}</Badge>}\n                        </Button>\n                    )\n                })}\n            </div>\n        </div>\n    );\n}\n"
                },
                {
                  "name": "message-list.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Inbox, Trash2, Shield, User, Swords, Eye, CheckCircle, XCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { deleteMessage, markMessageAsRead } from \"@/lib/actions/message.actions\";\nimport { useTransition } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport type { FullMessage, FullBattleReport, FullEspionageReport } from \"@/lib/types\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype FeedItem = (FullMessage & { type: 'message' }) \n                | (FullBattleReport & { type: 'battle' }) \n                | (FullEspionageReport & { type: 'espionage' });\n\ninterface MessageListProps {\n    items: FeedItem[];\n    selectedItemId: string | null;\n    onSelectItem: (item: FeedItem) => void;\n    currentUserId: string;\n}\n\nexport function MessageList({ items, selectedItemId, onSelectItem, currentUserId }: MessageListProps) {\n    const [isDeleting, startDeleteTransition] = useTransition();\n    const { toast } = useToast();\n\n    const handleSelectAndRead = (item: FeedItem) => {\n        onSelectItem(item);\n        if ('isRead' in item && !item.isRead) {\n            markMessageAsRead(item.id);\n        }\n    }\n\n    const handleDelete = (e: React.MouseEvent, messageId: string) => {\n        e.stopPropagation(); \n        startDeleteTransition(async () => {\n            const result = await deleteMessage(messageId);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: 'Mensaje eliminado' });\n                if (selectedItemId === messageId) {\n                    onSelectItem(null as any); \n                }\n            }\n        });\n    }\n    \n    const renderItem = (item: FeedItem) => {\n        const isSelected = selectedItemId === item.id;\n        let isUnread = false;\n        if ('isRead' in item) {\n            isUnread = !item.isRead;\n        }\n\n        if (item.type === 'message') {\n            return (\n                <div \n                    key={item.id} \n                    className={cn(\n                        \"group p-3 rounded-lg flex items-start gap-3 cursor-pointer hover:bg-muted/50 transition-colors border-l-4\",\n                        isSelected ? \"bg-muted border-primary\" : \"border-transparent\",\n                        isUnread && \"bg-primary/5 border-primary/70\"\n                    )}\n                    onClick={() => handleSelectAndRead(item)}\n                >\n                    <Avatar className=\"h-9 w-9 mt-1\">\n                        {item.sender ? (\n                            <AvatarImage src={item.sender.avatarUrl || ''} />\n                        ) : (\n                            <Shield className=\"h-full w-full p-2 text-muted-foreground\"/>\n                        )}\n                        <AvatarFallback>{item.sender?.name?.[0] || 'S'}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-grow overflow-hidden\">\n                        <div className=\"flex justify-between items-baseline\">\n                             <p className={cn(\"font-semibold truncate\", isUnread && \"text-foreground\")}>{item.sender?.name || \"Sistema\"}</p>\n                              <p className=\"text-xs text-muted-foreground flex-shrink-0\">\n                                {new Date(item.createdAt).toLocaleDateString('es-ES', { day: '2-digit', month: 'short' })}\n                              </p>\n                        </div>\n                        <p className={cn(\"font-medium truncate text-sm\", isUnread ? \"text-foreground\" : \"text-muted-foreground\")}>{item.subject}</p>\n                    </div>\n                     <Button \n                        variant=\"ghost\" \n                        size=\"icon\" \n                        className=\"h-8 w-8 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity\" \n                        onClick={(e) => handleDelete(e, item.id)} \n                        disabled={isDeleting}\n                    >\n                        <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                </div>\n            )\n        }\n        \n        const isAttacker = 'attackerId' in item && item.attackerId === currentUserId;\n        \n        if (item.type === 'battle') {\n             const wasVictory = (isAttacker && item.winner === 'attacker') || (!isAttacker && item.winner === 'defender');\n             const opponent = isAttacker ? item.defender : item.attacker;\n             return (\n                 <div key={item.id} onClick={() => onSelectItem(item)} className={cn(\"group p-3 rounded-lg flex items-start gap-3 cursor-pointer hover:bg-muted/50 transition-colors border-l-4\", isSelected ? \"bg-muted border-primary\" : \"border-transparent\")}>\n                     <div className=\"pt-1\"><Swords className=\"h-6 w-6 text-destructive\" /></div>\n                     <div className=\"flex-grow overflow-hidden\">\n                         <p className=\"font-semibold truncate\">{isAttacker ? \"Ataque a \" : \"Defensa de \"} {opponent.name}</p>\n                         <p className=\"text-sm text-muted-foreground\">\n                             <Badge variant={wasVictory ? \"default\" : \"destructive\"} className={cn(wasVictory && \"bg-green-600/80\")}>\n                                {wasVictory ? \"Victoria\" : \"Derrota\"}\n                             </Badge>\n                         </p>\n                     </div>\n                 </div>\n             )\n        }\n        \n         if (item.type === 'espionage') {\n             const opponent = isAttacker ? item.defender : item.attacker;\n             const wasSuccess = !!item.details.intel;\n             return (\n                 <div key={item.id} onClick={() => onSelectItem(item)} className={cn(\"group p-3 rounded-lg flex items-start gap-3 cursor-pointer hover:bg-muted/50 transition-colors border-l-4\", isSelected ? \"bg-muted border-primary\" : \"border-transparent\")}>\n                     <div className=\"pt-1\"><Eye className=\"h-6 w-6 text-blue-500\" /></div>\n                     <div className=\"flex-grow overflow-hidden\">\n                         <p className=\"font-semibold truncate\">{isAttacker ? \"Espionaje a \" : \"Espionaje de \"} {opponent.name}</p>\n                         <p className=\"text-sm text-muted-foreground\">\n                              <Badge variant={wasSuccess ? \"default\" : \"destructive\"} className={cn(wasSuccess && \"bg-green-600/80\")}>\n                                {wasSuccess ? <CheckCircle className=\"h-3 w-3 mr-1\"/> : <XCircle className=\"h-3 w-3 mr-1\"/>}\n                                {wasSuccess ? \"\u00c9xito\" : \"Fallo\"}\n                             </Badge>\n                         </p>\n                     </div>\n                 </div>\n             )\n        }\n    }\n\n    return (\n        <ScrollArea className=\"h-full\">\n            <div className=\"p-2 space-y-1\">\n                {items.length === 0 ? (\n                    <div className=\"flex flex-col items-center justify-center h-full text-muted-foreground p-8\">\n                        <Inbox className=\"h-16 w-16\" />\n                        <p className=\"mt-4 text-lg\">No hay notificaciones</p>\n                    </div>\n                ) : (\n                    items.map(renderItem)\n                )}\n            </div>\n        </ScrollArea>\n    );\n}\n"
                },
                {
                  "name": "messages-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { useState, useMemo } from \"react\";\nimport { MessageList } from \"./message-list\";\nimport { MessageFolderList } from \"./message-folder-list\";\nimport { FullMessage, UserWithProgress } from \"@/lib/data\";\nimport { ComposeMessage } from \"./compose-message\";\nimport { MessageDetail } from \"./message-detail\";\nimport { cn } from \"@/lib/utils\";\nimport { FullBattleReport, FullEspionageReport } from \"@/lib/types\";\n\ntype FeedItem = (FullMessage & { type: 'message' }) \n                | (FullBattleReport & { type: 'battle' }) \n                | (FullEspionageReport & { type: 'espionage' });\n\ninterface MessagesViewProps {\n    currentUser: UserWithProgress;\n    initialFeed: FeedItem[];\n    allUsers: { id: string; name: string }[];\n}\n\nexport function MessagesView({ currentUser, initialFeed, allUsers }: MessagesViewProps) {\n    const [selectedItem, setSelectedItem] = useState<FeedItem | null>(initialFeed[0] || null);\n    const [selectedCategory, setSelectedCategory] = useState('ALL');\n\n    const filteredFeed = useMemo(() => {\n        if (selectedCategory === 'ALL') {\n            return initialFeed;\n        }\n        return initialFeed.filter(item => {\n            if (item.type === 'message') {\n                return item.category === selectedCategory;\n            }\n            if (item.type === 'battle' && selectedCategory === 'BATALLA') return true;\n            if (item.type === 'espionage' && selectedCategory === 'ESPIONAJE') return true;\n             if (item.type === 'system' && selectedCategory === 'SISTEMA') return true;\n            return false;\n        });\n    }, [initialFeed, selectedCategory]);\n    \n    const unreadCounts = useMemo(() => {\n        const counts: Record<string, number> = { ALL: 0, JUGADOR: 0, BATALLA: 0, ESPIONAJE: 0, CONSTRUCCION: 0, SISTEMA: 0 };\n        initialFeed.forEach(item => {\n            if (item.type === 'message' && !item.isRead) {\n                counts[item.category]++;\n                counts['ALL']++;\n            }\n        });\n        return counts;\n    }, [initialFeed]);\n\n    const handleSelectItem = (item: FeedItem) => {\n        setSelectedItem(item);\n    }\n    \n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Centro de Notificaciones</h2>\n                    <p className=\"text-muted-foreground\">\n                        Comun\u00edcate y mantente al tanto de las novedades.\n                    </p>\n                </div>\n                 <div className=\"flex items-center gap-2\">\n                    <ComposeMessage allUsers={allUsers} currentUser={currentUser} />\n                </div>\n            </div>\n            \n            <div className=\"border rounded-lg md:grid md:grid-cols-[250px_1fr] lg:grid-cols-[300px_minmax(0,1fr)_minmax(0,2fr)] h-[calc(100vh-280px)] overflow-hidden\">\n                <div className={cn(\"p-4 border-r\", selectedItem && \"hidden md:block\")}>\n                     <MessageFolderList \n                        selectedCategory={selectedCategory} \n                        onSelectCategory={setSelectedCategory}\n                        unreadCounts={unreadCounts} \n                    />\n                </div>\n\n                <div className={cn(\"border-r\", selectedItem && \"hidden lg:block\")}>\n                     <MessageList \n                        items={filteredFeed}\n                        selectedItemId={selectedItem?.id || null}\n                        onSelectItem={handleSelectItem}\n                        currentUserId={currentUser.id}\n                    />\n                </div>\n\n                <div className={cn(\"lg:col-span-1\", !selectedItem && \"hidden lg:block\")}>\n                    {selectedItem ? (\n                         <MessageDetail \n                            key={selectedItem.id}\n                            item={selectedItem}\n                            onBack={() => setSelectedItem(null)}\n                        />\n                    ) : (\n                        <div className=\"flex items-center justify-center h-full text-muted-foreground p-8 text-center\">\n                            <p>Selecciona una notificaci\u00f3n para leerla.</p>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "mission-status.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState, useTransition } from \"react\";\nimport { ArrowLeftRight, Check, Shield, Swords, Undo2, X, Loader2 } from \"lucide-react\";\nimport { cancelarMision } from \"@/lib/actions/cancel-mission.action\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { IncomingAttack, ColaMisiones, FullConfiguracionTropa as ConfiguracionTropa } from \"@/lib/types\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"../ui/alert-dialog\";\nimport { Button } from \"../ui/button\";\n\ntype MissionStatusProps = {\n    missions: ColaMisiones[];\n    incomingAttacks: IncomingAttack[];\n    allTroops: ConfiguracionTropa[];\n};\n\nconst missionIcons: { [key: string]: React.ReactNode } = {\n    ATAQUE: <Swords className=\"h-4 w-4 text-destructive\" />,\n    DEFENDER: <Shield className=\"h-4 w-4 text-blue-500\" />,\n    TRANSPORTE: <ArrowLeftRight className=\"h-4 w-4 text-green-500\" />,\n    ESPIONAJE: <ArrowLeftRight className=\"h-4 w-4 text-yellow-500\" />,\n    OCUPAR: <Check className=\"h-4 w-4 text-primary\" />,\n    REGRESO: <Undo2 className=\"h-4 w-4 text-gray-400\" />,\n};\n\nfunction formatTime(totalSeconds: number): string {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n    return [hours, minutes, seconds]\n        .map(v => v.toString().padStart(2, '0'))\n        .join(':');\n}\n\nfunction CountdownTimer({ label, endDate, onFinish, className }: {label: string, endDate: Date, onFinish: () => void, className?: string}) {\n    const [timeLeft, setTimeLeft] = useState('');\n\n    useEffect(() => {\n        const end = new Date(endDate).getTime();\n        const intervalId = setInterval(() => {\n            const now = new Date().getTime();\n            const difference = Math.floor((end - now) / 1000);\n\n            if (difference < -1) { \n                setTimeLeft('00:00:00');\n                clearInterval(intervalId);\n                onFinish();\n            } else {\n                setTimeLeft(formatTime(difference));\n            }\n        }, 1000);\n        \n        const now = new Date().getTime();\n        const difference = Math.floor((end - now) / 1000);\n        setTimeLeft(formatTime(difference > 0 ? difference : 0));\n\n        return () => clearInterval(intervalId);\n    }, [endDate, onFinish]);\n\n    return (\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center text-sm\">\n            <span>{label}</span>\n            <span className={`font-mono font-bold ${className}`}>{timeLeft}</span>\n        </div>\n    );\n}\n\nfunction OutgoingMission({ mission, allTroops }: { mission: ColaMisiones, allTroops: ConfiguracionTropa[] }) {\n    const router = useRouter();\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n\n    const [status, setStatus] = useState<{label: string, endDate: Date | null}>({\n        label: \"Calculando...\",\n        endDate: null,\n    });\n    \n    useEffect(() => {\n        const updateTimer = () => {\n            const now = new Date().getTime();\n            \n            let currentLabel = \"Llegando\";\n            let currentEndDate: Date | null = mission.fechaLlegada;\n\n            if (mission.tipoMision === 'REGRESO') {\n                currentLabel = \"Regresando\";\n                currentEndDate = mission.fechaRegreso;\n            } else if (mission.fechaLlegada && now > new Date(mission.fechaLlegada).getTime()) {\n                if (mission.fechaRegreso) {\n                    currentLabel = \"Regresando\";\n                    currentEndDate = mission.fechaRegreso;\n                } else {\n                    setStatus({ label: \"Finalizada\", endDate: null });\n                    router.refresh();\n                    return;\n                }\n            }\n            \n            if (!currentEndDate || now > new Date(currentEndDate).getTime()) {\n                setStatus({ label: \"Completada\", endDate: null });\n                router.refresh();\n                return;\n            }\n            setStatus({ label: currentLabel, endDate: currentEndDate });\n        };\n\n        updateTimer();\n        const intervalId = setInterval(updateTimer, 1000);\n        return () => clearInterval(intervalId);\n\n    }, [mission, router]);\n    \n    if (!status.endDate) return null;\n\n    const handleCancel = () => {\n        startTransition(async () => {\n            const result = await cancelarMision(mission.id);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: 'Misi\u00f3n cancelada', description: result.success });\n            }\n        });\n    };\n\n    const canCancel = mission.tipoMision !== 'REGRESO' && new Date() < new Date(mission.fechaLlegada);\n\n    return (\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center text-sm group\">\n            <div className=\"flex items-center gap-2\">\n                {missionIcons[mission.tipoMision]}\n                <span className={mission.tipoMision === 'REGRESO' ? 'text-green-400' : ''}>\n                    {mission.tipoMision} a {mission.destinoCiudad}:{mission.destinoBarrio}:{mission.destinoEdificio}\n                </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n                {status.endDate && (\n                    <CountdownTimer \n                        label=''\n                        endDate={status.endDate}\n                        onFinish={() => router.refresh()}\n                        className={mission.tipoMision === 'REGRESO' ? 'text-green-400' : 'text-accent'}\n                    />\n                )}\n                {canCancel && (\n                    <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6 rounded-full opacity-0 group-hover:opacity-100 transition-opacity hover:bg-destructive/20 text-destructive/80 hover:text-destructive\">\n                                <X className=\"h-4 w-4\" />\n                            </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                            <AlertDialogHeader>\n                                <AlertDialogTitle>\u00bfCancelar Misi\u00f3n?</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                    Tu flota regresar\u00e1 inmediatamente. El tiempo de regreso ser\u00e1 igual al tiempo que ha estado en viaje. \u00bfEst\u00e1s seguro?\n                                </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                                <AlertDialogCancel>No</AlertDialogCancel>\n                                <AlertDialogAction onClick={handleCancel} disabled={isPending}>\n                                    {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/>}\n                                    S\u00ed, cancelar misi\u00f3n\n                                </AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                )}\n            </div>\n        </div>\n    );\n}\n\nconst getMovementArrival = (movement: ColaMisiones | IncomingAttack): Date => {\n    if ('fechaLlegada' in movement) {\n        return movement.fechaLlegada;\n    }\n    return movement.arrivalTime;\n}\n\nexport function MissionStatus({ missions, incomingAttacks, allTroops }: MissionStatusProps) {\n    const router = useRouter();\n    const allMovements = [\n        ...missions,\n        ...incomingAttacks\n    ].sort((a,b) => getMovementArrival(a).getTime() - getMovementArrival(b).getTime());\n\n    return (\n        <div className=\"bg-card text-card-foreground px-4 py-3 rounded-b-md space-y-2\">\n            {allMovements.length > 0 ? (\n                allMovements.map(movement => {\n                    if ('userId' in movement) { // Es una ColaMisiones (saliente o de regreso)\n                        return <OutgoingMission key={movement.id} mission={movement} allTroops={allTroops} />\n                    } else { // Es un IncomingAttack\n                        return (\n                             <div key={movement.id} className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center text-sm text-destructive\">\n                                <div className=\"flex items-center gap-2\">\n                                    <Swords className=\"h-4 w-4\"/>\n                                    <span>Ataque de {movement.attackerName}</span>\n                                </div>\n                                <CountdownTimer \n                                    label=''\n                                    endDate={movement.arrivalTime}\n                                    onFinish={() => router.refresh()}\n                                    className='text-destructive'\n                                />\n                            </div>\n                        )\n                    }\n                })\n            ) : (\n                <p className=\"text-muted-foreground text-center text-sm py-2\">Ninguna unidad en movimiento</p>\n            )}\n        </div>\n    )\n}\n"
            },
            {
              "name": "missions",
              "type": "directory",
              "children": [
                {
                  "name": "mission-details-view.tsx",
                  "type": "file",
                  "content": "\n'use client'\n\nimport { useState, useEffect, useMemo, useTransition } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport type { ColaMisiones, IncomingAttack, FullConfiguracionTropa } from \"@/lib/types\";\nimport { ArrowLeftRight, Check, Loader2, Shield, Swords, Undo2, Users, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cancelarMision } from \"@/lib/actions/cancel-mission.action\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useRouter } from \"next/navigation\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface MissionDetailsViewProps {\n    missions: ColaMisiones[];\n    incomingAttacks: IncomingAttack[];\n    troopConfigs: FullConfiguracionTropa[];\n}\n\nconst missionIcons: { [key: string]: React.ReactNode } = {\n    ATAQUE: <Swords className=\"h-4 w-4 text-destructive\" />,\n    DEFENDER: <Shield className=\"h-4 w-4 text-blue-500\" />,\n    TRANSPORTE: <ArrowLeftRight className=\"h-4 w-4 text-green-500\" />,\n    ESPIONAJE: <ArrowLeftRight className=\"h-4 w-4 text-yellow-500\" />,\n    OCUPAR: <Check className=\"h-4 w-4 text-primary\" />,\n    REGRESO: <Undo2 className=\"h-4 w-4 text-gray-400\" />,\n};\n\nfunction formatTime(totalSeconds: number): string {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n    return [hours, minutes, seconds]\n        .map(v => v.toString().padStart(2, '0'))\n        .join(':');\n}\n\nfunction Countdown({ endDate, onFinish }: { endDate: Date, onFinish: () => void }) {\n    const [timeLeft, setTimeLeft] = useState(() => {\n        const diff = new Date(endDate).getTime() - new Date().getTime();\n        return Math.max(0, Math.floor(diff / 1000));\n    });\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            const diff = new Date(endDate).getTime() - new Date().getTime();\n            const secondsLeft = Math.max(0, Math.floor(diff / 1000));\n            setTimeLeft(secondsLeft);\n            if (secondsLeft === 0) {\n                clearInterval(interval);\n                onFinish();\n            }\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [endDate, onFinish]);\n\n    return <span className=\"font-mono\">{formatTime(timeLeft)}</span>;\n}\n\nconst MissionRow = ({ mission, type, troopConfigs }: { mission: ColaMisiones | IncomingAttack, type: 'outgoing' | 'incoming' | 'returning', troopConfigs: FullConfiguracionTropa[] }) => {\n    const { toast } = useToast();\n    const router = useRouter();\n    const [isPending, startTransition] = useTransition();\n\n    const handleCancel = (missionId: string) => {\n        startTransition(async () => {\n            const result = await cancelarMision(missionId);\n            if(result.error) toast({ variant: 'destructive', title: 'Error', description: result.error });\n            else toast({ title: '\u00c9xito', description: result.success });\n        })\n    }\n\n    const isOutgoing = 'userId' in mission;\n    const from = isOutgoing ? `${mission.origenCiudad}:${mission.origenBarrio}:${mission.origenEdificio}` : mission.attackerName;\n    const to = isOutgoing ? `${mission.destinoCiudad}:${mission.destinoBarrio}:${mission.destinoEdificio}` : mission.targetProperty;\n    const troops = isOutgoing ? (mission.tropas as {id: string, cantidad: number}[]).reduce((sum, t) => sum + t.cantidad, 0) : mission.totalTroops;\n    const missionType = isOutgoing ? mission.tipoMision : \"ATAQUE\";\n    const startDate = isOutgoing ? mission.fechaInicio : new Date(); // Placeholder for incoming\n    const arrivalDate = isOutgoing ? mission.fechaLlegada : mission.arrivalTime;\n    const returnDate = isOutgoing ? mission.fechaRegreso : null;\n\n    const finalDate = type === 'returning' && returnDate ? returnDate : arrivalDate;\n\n    return (\n        <TableRow>\n            <TableCell>\n                <div><span className=\"font-semibold\">{from}</span></div>\n                <div className=\"text-muted-foreground\">{to}</div>\n            </TableCell>\n            <TableCell className=\"hidden sm:table-cell\">\n                 <div>{new Date(startDate).toLocaleString()}</div>\n                 <div className=\"text-muted-foreground\">{new Date(arrivalDate).toLocaleString()}</div>\n            </TableCell>\n            <TableCell><Countdown endDate={finalDate} onFinish={() => router.refresh()} /></TableCell>\n            <TableCell className=\"text-center\">\n                 <TooltipProvider>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                                <Users />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                           <div className=\"p-2 space-y-1\">\n                                <p className=\"font-bold\">Tropas ({troops})</p>\n                                {isOutgoing && (mission.tropas as {id: string; cantidad: number}[]).map(t => (\n                                    <div key={t.id} className=\"flex justify-between gap-4\">\n                                        <span>{troopConfigs.find(c => c.id === t.id)?.nombre || t.id}</span>\n                                        <span className=\"font-bold\">{t.cantidad.toLocaleString()}</span>\n                                    </div>\n                                ))}\n                           </div>\n                        </TooltipContent>\n                    </Tooltip>\n                </TooltipProvider>\n            </TableCell>\n            <TableCell>\n                <div className=\"flex items-center gap-2\">\n                    {missionIcons[missionType]}\n                    <span className=\"hidden sm:inline\">{missionType}</span>\n                </div>\n            </TableCell>\n             <TableCell className=\"text-right\">\n                {isOutgoing && missionType !== 'REGRESO' && (\n                    <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                            <Button variant=\"destructive\" size=\"sm\" disabled={isPending}>Cancelar</Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                            <AlertDialogHeader>\n                                <AlertDialogTitle>\u00bfCancelar misi\u00f3n?</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                    La flota regresar\u00e1 inmediatamente. Esta acci\u00f3n no se puede deshacer.\n                                </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                                <AlertDialogCancel>No</AlertDialogCancel>\n                                <AlertDialogAction onClick={() => handleCancel(mission.id)} disabled={isPending}>\n                                    {isPending ? <Loader2 className=\"animate-spin mr-2\"/> : <X className=\"mr-2\"/>}\n                                    Confirmar cancelaci\u00f3n\n                                </AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                )}\n            </TableCell>\n        </TableRow>\n    );\n};\n\n\nexport function MissionDetailsView({ missions, incomingAttacks, troopConfigs }: MissionDetailsViewProps) {\n    \n    const outgoingMissions = useMemo(() => missions.filter(m => m.tipoMision !== 'REGRESO'), [missions]);\n    const returningMissions = useMemo(() => missions.filter(m => m.tipoMision === 'REGRESO'), [missions]);\n    const allMovements = useMemo(() => [...outgoingMissions, ...incomingAttacks, ...returningMissions], [outgoingMissions, incomingAttacks, returningMissions]);\n\n    const renderTable = (data: (ColaMisiones | IncomingAttack)[], type: 'outgoing' | 'incoming' | 'returning' | 'all') => (\n        <Table>\n            <TableHeader>\n                <TableRow>\n                    <TableHead>{type === 'incoming' ? 'Atacante/Destino' : 'Origen/Destino'}</TableHead>\n                    <TableHead className=\"hidden sm:table-cell\">Salida/Llegada</TableHead>\n                    <TableHead>Tiempo Restante</TableHead>\n                    <TableHead className=\"text-center\">Tropas</TableHead>\n                    <TableHead>Misi\u00f3n</TableHead>\n                    <TableHead className=\"text-right\">Acci\u00f3n</TableHead>\n                </TableRow>\n            </TableHeader>\n            <TableBody>\n                {data.length > 0 ? (\n                    data.map(item => <MissionRow key={item.id} mission={item} troopConfigs={troopConfigs} type={type === 'all' ? ('userId' in item ? (item.tipoMision === 'REGRESO' ? 'returning' : 'outgoing') : 'incoming') : type} />)\n                ) : (\n                    <TableRow>\n                        <TableCell colSpan={6} className=\"h-24 text-center\">No hay flotas en esta categor\u00eda.</TableCell>\n                    </TableRow>\n                )}\n            </TableBody>\n        </Table>\n    );\n\n    return (\n        <Tabs defaultValue=\"all\" className=\"w-full mt-4\">\n            <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4\">\n                <TabsTrigger value=\"all\">Todas ({allMovements.length})</TabsTrigger>\n                <TabsTrigger value=\"outgoing\">En Misi\u00f3n ({outgoingMissions.length})</TabsTrigger>\n                <TabsTrigger value=\"incoming\">Enemigas ({incomingAttacks.length})</TabsTrigger>\n                <TabsTrigger value=\"returning\">Regresando ({returningMissions.length})</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"all\">{renderTable(allMovements, 'all')}</TabsContent>\n            <TabsContent value=\"outgoing\">{renderTable(outgoingMissions, 'outgoing')}</TabsContent>\n            <TabsContent value=\"incoming\">{renderTable(incomingAttacks, 'incoming')}</TabsContent>\n            <TabsContent value=\"returning\">{renderTable(returningMissions, 'returning')}</TabsContent>\n        </Tabs>\n    )\n}\n"
                }
              ]
            },
            {
              "name": "missions-view.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport { useState, useTransition, useCallback, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { getPropertyOwner } from '@/lib/data';\nimport type { UserWithProgress, MissionInput, FullConfiguracionTropa, FullTropaUsuario } from '@/lib/types';\nimport { debounce } from 'lodash';\nimport { Loader2, User, UserX, Clock, Send, Users, Shield, Package, Wind, PlaneTakeoff, Minus, Plus, DollarSign } from 'lucide-react';\nimport Image from 'next/image';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { enviarMision } from '@/lib/actions/mission.actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { useProperty } from '@/contexts/property-context';\nimport { calcularDistancia, calcularDuracionViaje, calcularVelocidadFlota, convertirACoordenadasVirtuales, calcularCosteMision } from '@/lib/formulas/mission-formulas';\nimport { useSearchParams } from 'next/navigation';\nimport { Slider } from '../ui/slider';\nimport { Separator } from '../ui/separator';\n\ntype TroopInput = {\n    id: string;\n    cantidad: number;\n}\n\nfunction formatDuration(seconds: number): string {\n    if (seconds <= 0) return \"0s\";\n\n    const units: {name: string, seconds: number}[] = [\n        { name: 'd', seconds: 86400 },\n        { name: 'h', seconds: 3600 },\n        { name: 'm', seconds: 60 },\n        { name: 's', seconds: 1 }\n    ];\n\n    let remainingSeconds = seconds;\n    let result = '';\n    let parts = 0;\n\n    for (const unit of units) {\n        if (remainingSeconds >= unit.seconds && parts < 2) {\n            const amount = Math.floor(remainingSeconds / unit.seconds);\n            if (amount > 0) {\n                result += `${amount}${unit.name} `;\n                remainingSeconds %= unit.seconds;\n                parts++;\n            }\n        }\n    }\n\n    return result.trim() || `${Math.round(seconds)}s`;\n}\n\nfunction formatNumber(num: number): string {\n    if (num === null || num === undefined) return \"0\";\n    return num.toLocaleString('de-DE');\n}\n\nexport function MissionsView({ user, troopConfigs }: { user: UserWithProgress, troopConfigs: FullConfiguracionTropa[] }) {\n    const { selectedProperty } = useProperty();\n    const { toast } = useToast();\n    const searchParams = useSearchParams();\n    const [isPending, startTransition] = useTransition();\n    const [isSuccess, setIsSuccess] = useState(false);\n    \n    const [coordinates, setCoordinates] = useState({ \n        ciudad: searchParams.get('ciudad') || selectedProperty?.ciudad.toString() || '', \n        barrio: searchParams.get('barrio') || selectedProperty?.barrio.toString() || '', \n        edificio: searchParams.get('edificio') || '' \n    });\n\n    const [targetOwner, setTargetOwner] = useState<{ id: string, name: string } | null | undefined>(undefined);\n    const [isLoadingTarget, setIsLoadingTarget] = useState(false);\n    const [missionType, setMissionType] = useState('ATAQUE');\n    const [tropas, setTropas] = useState<TroopInput[]>([]);\n    const [travelTime, setTravelTime] = useState<number>(0);\n    const [travelCost, setTravelCost] = useState<number>(0);\n\n    \n    const troopConfigsMap = useMemo(() => new Map(troopConfigs.map(t => [t.id, t])), [troopConfigs]);\n\n    const debouncedFetchOwner = useCallback(\n        debounce(async (ciudad: number, barrio: number, edificio: number) => {\n            if (!ciudad || !barrio || !edificio) {\n                setTargetOwner(undefined);\n                setIsLoadingTarget(false);\n                return;\n            };\n            const owner = await getPropertyOwner({ ciudad, barrio, edificio });\n            setTargetOwner(owner);\n            setIsLoadingTarget(false);\n        }, 500),\n        []\n    );\n\n    useEffect(() => {\n        const ciudad = searchParams.get('ciudad');\n        const barrio = searchParams.get('barrio');\n        const edificio = searchParams.get('edificio');\n\n        const newCoords = {\n            ciudad: ciudad || selectedProperty?.ciudad.toString() || '',\n            barrio: barrio || selectedProperty?.barrio.toString() || '',\n            edificio: edificio || ''\n        }\n        setCoordinates(newCoords);\n\n        if (newCoords.ciudad && newCoords.barrio && newCoords.edificio) {\n            setIsLoadingTarget(true);\n            debouncedFetchOwner(parseInt(newCoords.ciudad, 10), parseInt(newCoords.barrio, 10), parseInt(newCoords.edificio, 10));\n        }\n\n    }, [searchParams, selectedProperty, debouncedFetchOwner]);\n\n    const calculateTravelInfo = useCallback(() => {\n        if (!selectedProperty || tropas.length === 0 || !coordinates.ciudad || !coordinates.barrio || !coordinates.edificio) {\n            setTravelTime(0);\n            setTravelCost(0);\n            return;\n        }\n\n        const activeTroops = tropas.filter(t => t.cantidad > 0);\n        if(activeTroops.length === 0) {\n            setTravelTime(0);\n            setTravelCost(0);\n            return;\n        }\n\n        const velocidad = calcularVelocidadFlota(activeTroops, troopConfigsMap);\n        const origenCoords = convertirACoordenadasVirtuales(selectedProperty);\n        const destinoCoords = convertirACoordenadasVirtuales({\n            ciudad: parseInt(coordinates.ciudad, 10),\n            barrio: parseInt(coordinates.barrio, 10),\n            edificio: parseInt(coordinates.edificio, 10),\n        });\n        const distancia = calcularDistancia(origenCoords, destinoCoords);\n        const duracion = calcularDuracionViaje(distancia, velocidad, activeTroops.map(t => t.id));\n\n        const tropasConSalario = activeTroops.map((t: TroopInput) => {\n            const config = troopConfigsMap.get(t.id);\n            return {\n                cantidad: t.cantidad,\n                salario: config?.salario || 0\n            };\n        });\n        const coste = calcularCosteMision(tropasConSalario, distancia);\n        \n        setTravelTime(duracion);\n        setTravelCost(coste);\n    }, [tropas, coordinates, selectedProperty, troopConfigsMap]);\n\n    \n    useEffect(() => {\n        calculateTravelInfo();\n    }, [tropas, coordinates, selectedProperty, calculateTravelInfo]);\n    \n\n    const handleCoordinateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = e.target;\n        const newCoords = { ...coordinates, [name]: value };\n        setCoordinates(newCoords);\n        \n        const { ciudad, barrio, edificio } = newCoords;\n        if (ciudad && barrio && edificio) {\n            setIsLoadingTarget(true);\n            debouncedFetchOwner(parseInt(ciudad, 10), parseInt(barrio, 10), parseInt(edificio, 10));\n        } else {\n            setTargetOwner(undefined);\n        }\n    };\n    \n    const handleTroopChange = (troopId: string, cantidad: number) => {\n        const tropaMax = selectedProperty?.TropaUsuario.find((t: FullTropaUsuario) => t.configuracionTropa.id === troopId)?.cantidad || 0;\n        const safeCantidad = Math.max(0, Math.min(tropaMax, cantidad));\n\n        setTropas(prev => {\n            const existing = prev.find(t => t.id === troopId);\n            if (existing) {\n                if (safeCantidad > 0) {\n                    return prev.map(t => t.id === troopId ? { ...t, cantidad: safeCantidad } : t);\n                } else {\n                    return prev.filter(t => t.id !== troopId);\n                }\n            } else if (safeCantidad > 0) {\n                return [...prev, { id: troopId, cantidad: safeCantidad }];\n            }\n            return prev;\n        })\n    }\n\n    const setMaxTroops = (troopId: string) => {\n        const available = selectedProperty?.TropaUsuario.find((tropa: FullTropaUsuario) => tropa.configuracionTropa.id === troopId)?.cantidad || 0;\n        handleTroopChange(troopId, available);\n    };\n\n    const setAllMaxTroops = () => {\n        if (!selectedProperty) return;\n        const newTroopInputs = selectedProperty.TropaUsuario\n            .filter((tropa: FullTropaUsuario) => tropa.configuracionTropa.tipo !== 'DEFENSA')\n            .map((tropa: FullTropaUsuario) => ({\n                id: tropa.configuracionTropa.id,\n                cantidad: tropa.cantidad,\n            }));\n        setTropas(newTroopInputs);\n    };\n    \n     const { totalCapacity, totalSalary } = useMemo(() => {\n        return tropas.reduce((acc, t: TroopInput) => {\n            const config = troopConfigsMap.get(t.id);\n            if (config) {\n                acc.totalCapacity += config.capacidad * t.cantidad;\n                acc.totalSalary += config.salario * t.cantidad;\n            }\n            return acc;\n        }, { totalCapacity: 0, totalSalary: 0 });\n    }, [tropas, troopConfigsMap]);\n\n    const handleSubmit = async () => {\n        if (!selectedProperty) {\n            toast({ variant: 'destructive', title: 'Error', description: 'No hay una propiedad de origen seleccionada.' });\n            return;\n        }\n\n        startTransition(async () => {\n            const result = await enviarMision({\n                origenPropiedadId: selectedProperty.id,\n                coordinates: {\n                    ciudad: parseInt(coordinates.ciudad, 10),\n                    barrio: parseInt(coordinates.barrio, 10),\n                    edificio: parseInt(coordinates.edificio, 10)\n                },\n                tropas: tropas.filter(t => t.cantidad > 0),\n                tipo: missionType\n            });\n\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error en la misi\u00f3n', description: result.error });\n            } else {\n                toast({ title: '\u00a1Misi\u00f3n enviada!', description: result.success });\n                setIsSuccess(true);\n                setTimeout(() => {\n                    setTropas([]);\n                    setIsSuccess(false);\n                }, 1500)\n            }\n        });\n    }\n\n    if (!selectedProperty) {\n        return <p>Selecciona una propiedad para enviar misiones.</p>\n    }\n\n    const desiredOrder = [\n        \"maton\", \"portero\", \"acuchillador\", \"pistolero\", \"ocupacion\", \"espia\", \"porteador\", \"cia\", \"fbi\",\n        \"transportista\", \"tactico\", \"francotirador\", \"asesino\", \"ninja\", \"demoliciones\", \"mercenario\"\n    ];\n\n    const availableTroops = selectedProperty.TropaUsuario\n        .filter((t: FullTropaUsuario) => t.cantidad > 0 && t.configuracionTropa.tipo !== 'DEFENSA')\n        .sort((a: FullTropaUsuario, b: FullTropaUsuario) => {\n            const indexA = desiredOrder.indexOf(a.configuracionTropa.id);\n            const indexB = desiredOrder.indexOf(b.configuracionTropa.id);\n            if (indexA === -1) return 1;\n            if (indexB === -1) return -1;\n            return indexA - indexB;\n        });\n\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-4\">\n                <div className=\"space-y-6\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>1. Configuraci\u00f3n de la Misi\u00f3n</CardTitle>\n                            <CardDescription>Define el objetivo y el tipo de misi\u00f3n.</CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                            <div className=\"grid grid-cols-3 gap-4\">\n                                <div className='space-y-2'>\n                                    <Label htmlFor='ciudad'>Ciudad</Label>\n                                    <Input id='ciudad' name='ciudad' placeholder='1' value={coordinates.ciudad} onChange={handleCoordinateChange} />\n                                </div>\n                                <div className='space-y-2'>\n                                    <Label htmlFor='barrio'>Barrio</Label>\n                                    <Input id='barrio' name='barrio' placeholder='1' value={coordinates.barrio} onChange={handleCoordinateChange} />\n                                </div>\n                                <div className='space-y-2'>\n                                    <Label htmlFor='edificio'>Edificio</Label>\n                                    <Input id='edificio' name='edificio' placeholder='1' value={coordinates.edificio} onChange={handleCoordinateChange} />\n                                </div>\n                            </div>\n\n                            <Card className='p-4 bg-muted/50'>\n                                <div className='flex items-center gap-4'>\n                                    {isLoadingTarget ? (\n                                        <Loader2 className=\"h-6 w-6 animate-spin\" />\n                                    ) : targetOwner === undefined ? (\n                                         <UserX className=\"h-6 w-6 text-muted-foreground\" />\n                                    ) : targetOwner === null ? (\n                                         <UserX className=\"h-6 w-6 text-green-500\" />\n                                    ) : (\n                                        <User className=\"h-6 w-6 text-destructive\" />\n                                    )}\n                                    <div>\n                                        <p className='text-sm text-muted-foreground'>Objetivo</p>\n                                        <p className='font-bold'>\n                                            {isLoadingTarget ? 'Buscando...' : targetOwner?.name || 'Nadie'}\n                                        </p>\n                                    </div>\n                                </div>\n                            </Card>\n                            \n                             <div className='space-y-2'>\n                                <Label htmlFor='missionType'>Tipo de Misi\u00f3n</Label>\n                                <Select onValueChange={setMissionType} defaultValue={missionType}>\n                                    <SelectTrigger id='missionType'>\n                                        <SelectValue placeholder=\"Selecciona un tipo\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"ATAQUE\">Ataque</SelectItem>\n                                        <SelectItem value=\"OCUPAR\">Ocupar</SelectItem>\n                                        <SelectItem value=\"DEFENDER\">Defender</SelectItem>\n                                        <SelectItem value=\"TRANSPORTE\">Transporte</SelectItem>\n                                        <SelectItem value=\"ESPIONAJE\">Espionaje</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                             </div>\n                        </CardContent>\n                    </Card>\n                </div>\n\n                <div className=\"space-y-6\">\n                    <Card>\n                        <CardHeader>\n                            <div className=\"flex justify-between items-center\">\n                                <div>\n                                    <CardTitle>2. Selecci\u00f3n de Tropas</CardTitle>\n                                    <CardDescription>Elige las unidades de {selectedProperty.nombre}</CardDescription>\n                                </div>\n                                <Button variant=\"secondary\" size=\"sm\" onClick={setAllMaxTroops}><Users className=\"mr-2\"/>Todas</Button>\n                            </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2 max-h-96 overflow-y-auto pr-2\">\n                             {availableTroops && availableTroops.length > 0 ? availableTroops.map((tropa: FullTropaUsuario) => {\n                                const cantidadActual = tropas.find(t => t.id === tropa.configuracionTropaId)?.cantidad || 0;\n                                return (\n                                <div key={tropa.configuracionTropaId} className='p-3 border rounded-lg space-y-3'>\n                                    <div className='flex items-center gap-3 flex-1'>\n                                        <div className=\"w-12 h-10 relative rounded-md overflow-hidden border flex-shrink-0\">\n                                            <Image src={tropa.configuracionTropa.urlImagen} alt={tropa.configuracionTropa.nombre} fill className='object-contain' />\n                                        </div>\n                                        <div>\n                                            <p className='font-semibold'>{tropa.configuracionTropa.nombre}</p>\n                                            <p className='text-xs text-muted-foreground'>Disponibles: {tropa.cantidad}</p>\n                                        </div>\n                                    </div>\n                                     <div className='flex items-center gap-2'>\n                                        <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => handleTroopChange(tropa.configuracionTropaId, cantidadActual - 1)}><Minus /></Button>\n                                        <Slider\n                                            value={[cantidadActual]}\n                                            onValueChange={(value) => handleTroopChange(tropa.configuracionTropaId, value[0])}\n                                            max={tropa.cantidad}\n                                            step={1}\n                                            className=\"flex-1\"\n                                        />\n                                        <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => handleTroopChange(tropa.configuracionTropaId, cantidadActual + 1)}><Plus/></Button>\n                                        <Input \n                                            type='number'\n                                            min=\"0\"\n                                            max={tropa.cantidad}\n                                            value={cantidadActual}\n                                            onChange={(e) => handleTroopChange(tropa.configuracionTropaId, parseInt(e.target.value) || 0)}\n                                            className='h-9 w-24 text-center'\n                                        />\n                                    </div>\n                                </div>\n                            )}) : (\n                                <p className=\"text-sm text-center text-muted-foreground py-4\">No tienes tropas de ataque en esta propiedad.</p>\n                            )}\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n             <Card>\n                <CardHeader>\n                    <CardTitle>3. Resumen de la Misi\u00f3n</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                     <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 text-center\">\n                        <div className=\"p-3 bg-muted rounded-md\">\n                            <p className=\"text-sm text-muted-foreground\">Objetivo</p>\n                            <p className=\"font-bold\">{coordinates.ciudad}:{coordinates.barrio}:{coordinates.edificio}</p>\n                        </div>\n                        <div className=\"p-3 bg-muted rounded-md\">\n                            <p className=\"text-sm text-muted-foreground\">Tipo</p>\n                            <p className=\"font-bold\">{missionType}</p>\n                        </div>\n                        <div className=\"p-3 bg-muted rounded-md\">\n                            <p className=\"text-sm text-muted-foreground\">Tiempo de Viaje (ida)</p>\n                            <p className=\"font-bold flex items-center justify-center gap-2\"><Clock className=\"h-4 w-4\"/> {formatDuration(travelTime)}</p>\n                        </div>\n                        <div className=\"p-3 bg-muted rounded-md\">\n                            <p className=\"text-sm text-muted-foreground\">Capacidad de Carga</p>\n                            <p className=\"font-bold flex items-center justify-center gap-2\"><Package className=\"h-4 w-4\"/> {formatNumber(totalCapacity)}</p>\n                        </div>\n                         <div className=\"p-3 bg-muted rounded-md\">\n                            <p className=\"text-sm text-muted-foreground\">Coste de la Misi\u00f3n</p>\n                            <p className=\"font-bold flex items-center justify-center gap-2\"><DollarSign className=\"h-4 w-4 text-green-500\"/> {formatNumber(travelCost)}</p>\n                        </div>\n                     </div>\n                     <Separator />\n                    <Button onClick={handleSubmit} disabled={isPending || tropas.length === 0} className='w-full' size=\"lg\">\n                        {isPending ? <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" /> : (isSuccess ? <PlaneTakeoff className=\"mr-2 h-5 w-5\"/> : <Send className=\"mr-2 h-5 w-5\" />)}\n                        {isPending ? 'Enviando Flota...' : (isSuccess ? '\u00a1Misi\u00f3n en Camino!' : 'Confirmar y Enviar Misi\u00f3n')}\n                    </Button>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"
            },
            {
              "name": "overview",
              "type": "directory",
              "children": [
                {
                  "name": "family-card-server.tsx",
                  "type": "file",
                  "content": "\nimport { getFamilyCardData } from '@/lib/data';\nimport { FamilyCard } from '@/components/dashboard/overview/family-card';\n\nexport async function FamilyCardServer({ userId }: { userId: string }) {\n  const family = await getFamilyCardData(userId);\n  return <FamilyCard family={family as any} />;\n}\n"
                },
                {
                  "name": "family-card.tsx",
                  "type": "file",
                  "content": "\n'use client'\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from \"@/components/ui/tooltip\";\nimport type { FullFamily } from \"@/lib/types\";\nimport { Users } from \"lucide-react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\n\ninterface FamilyCardProps {\n    family?: FullFamily | null;\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nexport function FamilyCard({ family }: FamilyCardProps) {\n    if (!family) {\n        return (\n            <Card className=\"h-full flex flex-col items-center justify-center p-6 text-center transition-transform hover:scale-105\">\n                <Users className=\"h-16 w-16 text-muted-foreground mb-4\" />\n                <h3 className=\"text-xl font-bold\">Sin Familia</h3>\n                <p className=\"text-muted-foreground mb-4\">No perteneces a ninguna familia. \u00a1Crea o \u00fanete a una!</p>\n                <Button asChild>\n                    <Link href=\"/family/find\">\n                        Buscar o Crear Familia\n                    </Link>\n                </Button>\n            </Card>\n        );\n    }\n\n    const topMembers = family.members\n      .sort((a, b) => (b.user.puntuacion?.puntosHonorTotales || 0) - (a.user.puntuacion?.puntosHonorTotales || 0))\n      .slice(0, 3);\n\n\n    return (\n        <Card className=\"group relative overflow-hidden h-full flex flex-col transition-all duration-300\">\n             <Image \n                src=\"/nuevas/vendettasilueta.jpg\" \n                alt=\"Family background\"\n                fill\n                className=\"object-cover transition-transform duration-500 ease-in-out group-hover:scale-110 opacity-30\"\n                data-ai-hint=\"dark meeting room\"\n            />\n            <div className=\"absolute inset-0 bg-black/60 z-0\" />\n            <div className=\"relative z-10 flex flex-col flex-grow p-4\">\n                 <div className=\"flex flex-col sm:flex-row items-center gap-4 text-white mb-4 text-center sm:text-left\">\n                    <Avatar className=\"h-20 w-20 border-2 border-primary/50 shrink-0\">\n                        <AvatarImage src={family.avatarUrl || ''} />\n                        <AvatarFallback className=\"text-2xl\">{family.tag}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-grow\">\n                        <CardTitle className=\"text-2xl font-bold tracking-wider [text-shadow:0_2px_4px_rgb(0_0_0_/_0.8)]\">[{family.tag}] {family.name}</CardTitle>\n                         <p className=\"text-sm text-white/80 flex items-center justify-center sm:justify-start gap-2\"><Users className=\"h-4 w-4\" />{family.members.length} Miembros</p>\n                    </div>\n                     <Button asChild size=\"sm\" variant=\"outline\" className=\"shrink-0 mt-4 sm:mt-0\">\n                        <Link href={`/family/members?id=${family.id}`}>\n                            Ver Familia\n                        </Link>\n                    </Button>\n                </div>\n                 <div className=\"text-white flex-grow\">\n                    <h4 className=\"font-semibold mb-2 text-sm\">Top Miembros (Honor)</h4>\n                    <div className=\"space-y-2\">\n                         {topMembers.map(member => (\n                            <TooltipProvider key={member.userId}>\n                                <Tooltip>\n                                    <TooltipTrigger asChild>\n                                        <div className=\"flex items-center gap-3 text-sm bg-black/20 p-2 rounded-md transition-all hover:bg-primary/20\">\n                                            <Avatar className=\"h-8 w-8\">\n                                                <AvatarImage src={member.user.avatarUrl || ''} />\n                                                <AvatarFallback>{member.user.name ? member.user.name.charAt(0) : 'U'}</AvatarFallback>\n                                            </Avatar>\n                                            <span className=\"font-medium flex-grow truncate\">{member.user.name || 'Usuario desconocido'}</span>\n                                            <span className=\"font-mono text-amber-400\">{formatPoints(member.user.puntuacion?.puntosHonorTotales)}</span>\n                                        </div>\n                                    </TooltipTrigger>\n                                    <TooltipContent>\n                                        <p className=\"font-bold\">{member.user.name}</p>\n                                        <p>Puntos de Honor: {formatPoints(member.user.puntuacion?.puntosHonorTotales)}</p>\n                                    </TooltipContent>\n                                </Tooltip>\n                            </TooltipProvider>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </Card>\n    );\n}\n"
                },
                {
                  "name": "global-stats-server.tsx",
                  "type": "file",
                  "content": "\nimport { getGlobalStatsData } from '@/lib/data';\nimport { GlobalStats } from './global-stats';\nimport { calcularPoderAtaque } from '@/lib/formulas/score-formulas';\n\nexport async function GlobalStatsServer({ userId }: { userId: string }) {\n  const data = await getGlobalStatsData(userId);\n  \n  if (!data) return null;\n\n  const honorLevel = data.entrenamientos[0]?.nivel || 0;\n  const propertyCount = data._count.propiedades;\n  const lealtad = await calcularPoderAtaque(propertyCount, honorLevel);\n  \n  const stats = {\n    puntosEntrenamiento: data.puntuacion?.puntosEntrenamientos || 0,\n    puntosEdificios: data.puntuacion?.puntosHabitaciones || 0,\n    puntosTropas: data.puntuacion?.puntosTropas || 0,\n    puntosTotales: data.puntuacion?.puntosTotales || 0,\n    propiedades: propertyCount,\n    lealtad: lealtad,\n  };\n\n  return <GlobalStats stats={stats} />;\n}\n"
                },
                {
                  "name": "global-stats.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Card } from \"@/components/ui/card\";\nimport { formatNumber } from \"@/lib/utils\";\nimport Link from \"next/link\";\n\ninterface GlobalStatsProps {\n    stats: {\n        puntosEntrenamiento: number;\n        puntosEdificios: number;\n        puntosTropas: number;\n        puntosTotales: number;\n        propiedades: number;\n        lealtad: number;\n    }\n}\n\ninterface StatCardProps {\n    label: string;\n    value: string | number;\n    subtext?: string;\n    href?: string;\n}\n\nconst StatCard = ({ label, value, subtext, href }: StatCardProps) => (\n    <Card className=\"bg-destructive/80 p-4 text-center text-white transition-all hover:bg-destructive/90 hover:-translate-y-1\">\n        <div className=\"text-sm font-semibold uppercase tracking-wider opacity-80\">{label}</div>\n        <div className=\"text-3xl font-bold font-mono my-1\">{typeof value === 'number' ? formatNumber(value) : value}</div>\n        {href ? (\n             <Link href={href} className=\"text-xs text-amber-300 hover:text-amber-400 hover:underline\">{subtext}</Link>\n        ) : (\n             subtext && <div className=\"text-xs opacity-70\">{subtext}</div>\n        )}\n       \n    </Card>\n);\n\nexport function GlobalStats({ stats }: GlobalStatsProps) {\n    const statItems = [\n        { label: \"Puntos Entrenamiento\", value: Math.floor(stats.puntosEntrenamiento) },\n        { label: \"Puntos Edificios\", value: Math.floor(stats.puntosEdificios) },\n        { label: \"Puntos Tropas\", value: Math.floor(stats.puntosTropas) },\n        { label: \"Puntos Totales\", value: Math.floor(stats.puntosTotales) },\n        { label: \"Propiedades\", value: stats.propiedades },\n        { label: \"Lealtad\", value: `${Math.round(stats.lealtad)}%`, subtext: \"Ver honor\", href: \"/powerattack\" }\n    ];\n\n    return (\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            {statItems.map(item => (\n                <StatCard key={item.label} {...item} />\n            ))}\n        </div>\n    )\n}\n"
                },
                {
                  "name": "incoming-attacks-server.tsx",
                  "type": "file",
                  "content": "\nimport { getIncomingAttacksData } from '@/lib/data';\nimport { IncomingAttacks } from '@/components/dashboard/incoming-attacks';\n\nexport async function IncomingAttacksServer({ userId }: { userId: string }) {\n  const attacks = await getIncomingAttacksData(userId);\n  return <IncomingAttacks attacks={attacks} />;\n}\n"
                },
                {
                  "name": "mission-overview-server.tsx",
                  "type": "file",
                  "content": "\nimport { getMissionsData, getIncomingAttacksData, getTroopConfigurations } from '@/lib/data';\nimport { MissionOverview } from '@/components/dashboard/overview/mission-overview';\n\nexport async function MissionOverviewServer({ userId }: { userId: string }) {\n  const [missions, incomingAttacks, allTroops] = await Promise.all([\n    getMissionsData(userId),\n    getIncomingAttacksData(userId),\n    getTroopConfigurations()\n  ]);\n  \n  return <MissionOverview missions={missions} incomingAttacks={incomingAttacks} allTroops={allTroops} />;\n}\n"
                },
                {
                  "name": "mission-overview.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { useState, useEffect, useTransition } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport type { ColaMisiones, IncomingAttack, FullConfiguracionTropa, ResourceCost } from '@/lib/types';\nimport { ArrowLeftRight, Check, Loader2, Shield, Swords, Undo2, Users, X } from 'lucide-react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { cancelarMision } from '@/lib/actions/cancel-mission.action';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Separator } from '@/components/ui/separator';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { cn } from '@/lib/utils';\nimport Image from 'next/image';\nimport { resourceIcons } from '@/lib/constants';\n\nconst missionIcons: { [key: string]: React.ReactNode } = {\n    ATAQUE: <Swords className=\"h-4 w-4 text-destructive\" />,\n    DEFENDER: <Shield className=\"h-4 w-4 text-blue-500\" />,\n    TRANSPORTE: <ArrowLeftRight className=\"h-4 w-4 text-green-500\" />,\n    ESPIONAJE: <ArrowLeftRight className=\"h-4 w-4 text-yellow-500\" />,\n    OCUPAR: <Check className=\"h-4 w-4 text-primary\" />,\n    REGRESO: <Undo2 className=\"h-4 w-4 text-gray-400\" />,\n};\n\nfunction formatTime(totalSeconds: number): string {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n    return [hours, minutes, seconds].map(v => v.toString().padStart(2, '0')).join(':');\n}\n\nfunction Countdown({ endDate, onFinish }: { endDate: Date; onFinish: () => void }) {\n    const [timeLeft, setTimeLeft] = useState(() => {\n        const diff = new Date(endDate).getTime() - new Date().getTime();\n        return Math.max(0, Math.floor(diff / 1000));\n    });\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            const diff = new Date(endDate).getTime() - new Date().getTime();\n            const secondsLeft = Math.max(0, Math.floor(diff / 1000));\n            setTimeLeft(secondsLeft);\n            if (secondsLeft <= 0) {\n                clearInterval(interval);\n                onFinish();\n            }\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [endDate, onFinish]);\n\n    return <span className=\"font-mono\">{formatTime(timeLeft)}</span>;\n}\n\ninterface MissionOverviewProps {\n    missions: ColaMisiones[];\n    incomingAttacks: IncomingAttack[];\n    allTroops: FullConfiguracionTropa[];\n}\n\nconst MissionRow = ({ mission, type, allTroops }: { mission: ColaMisiones | IncomingAttack, type: 'outgoing' | 'incoming' | 'returning', allTroops: FullConfiguracionTropa[] }) => {\n    const { toast } = useToast();\n    const router = useRouter();\n    const [isPending, startTransition] = useTransition();\n\n    const handleCancel = (missionId: string) => {\n        startTransition(async () => {\n            const result = await cancelarMision(missionId);\n            if(result.error) toast({ variant: 'destructive', title: 'Error', description: result.error });\n            else toast({ title: '\u00c9xito', description: result.success });\n        })\n    }\n\n    const isOutgoing = 'userId' in mission;\n    const from = isOutgoing ? `${mission.origenCiudad}:${mission.origenBarrio}` : mission.attackerName;\n    const to = isOutgoing ? `${mission.destinoCiudad}:${mission.destinoBarrio}` : mission.targetProperty;\n    const troops = isOutgoing ? (mission.tropas as {id: string, cantidad: number}[]).reduce((sum, t) => sum + t.cantidad, 0) : mission.totalTroops;\n    const missionType = isOutgoing ? mission.tipoMision : 'ATAQUE';\n    const startDate = isOutgoing ? mission.fechaInicio : new Date(); // Placeholder\n    const arrivalDate = isOutgoing ? mission.fechaLlegada : mission.arrivalTime;\n    const returnDate = isOutgoing ? mission.fechaRegreso : null;\n    const resources = (isOutgoing && mission.tipoMision === 'REGRESO' && mission.recursos) ? mission.recursos as ResourceCost : null;\n\n    const finalDate = type === 'returning' && returnDate ? returnDate : arrivalDate;\n\n    return (\n        <TableRow className=\"animate-fade-in-up\">\n            <TableCell><div className=\"flex items-center gap-2\">{missionIcons[missionType]} <span className=\"hidden sm:inline\">{missionType}</span></div></TableCell>\n            <TableCell>\n                <p className=\"font-semibold\">{isOutgoing ? `a ${to}` : `de ${from}`}</p>\n                <p className=\"text-xs text-muted-foreground\">{new Date(finalDate).toLocaleString('es-ES')}</p>\n            </TableCell>\n            <TableCell className=\"text-center\">\n                 <TooltipProvider>\n                    <Tooltip>\n                        <TooltipTrigger asChild><Button variant=\"ghost\" size=\"sm\" className=\"font-mono\">{troops.toLocaleString('de-DE')}</Button></TooltipTrigger>\n                        <TooltipContent>\n                           <div className=\"p-2 space-y-2 w-48\">\n                                <p className=\"font-bold text-base\">Carga de Flota</p>\n                                <Separator/>\n                                <div className=\"space-y-1 text-sm\">\n                                    <h4 className=\"font-semibold text-muted-foreground\">Tropas</h4>\n                                    {isOutgoing && (mission.tropas as {id: string; cantidad: number}[]).map(t => {\n                                        const config = allTroops.find(c => c.id === t.id);\n                                        return (\n                                            <div key={t.id} className=\"flex justify-between items-center gap-4\">\n                                                <span className=\"flex items-center gap-2\">\n                                                    <Image src={config?.urlImagen || ''} alt={config?.nombre || ''} width={16} height={16} className=\"bg-white/10 rounded-sm\" />\n                                                    {config?.nombre || t.id}\n                                                </span>\n                                                <span className=\"font-bold\">{t.cantidad.toLocaleString('de-DE')}</span>\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                                {resources && (\n                                    <>\n                                        <Separator/>\n                                        <div className=\"space-y-1 text-sm\">\n                                            <h4 className=\"font-semibold text-muted-foreground\">Recursos</h4>\n                                            {Object.entries(resources).map(([key, value]) => (\n                                                value > 0 && (\n                                                    <div key={key} className=\"flex justify-between items-center gap-4\">\n                                                        <span className='capitalize flex items-center gap-2'>\n                                                            <Image src={resourceIcons[key]} alt={key} width={16} height={16} />\n                                                            {key}:\n                                                        </span> \n                                                        <span className=\"font-bold\">{(value as number).toLocaleString('de-DE')}</span>\n                                                    </div>\n                                                )\n                                            ))}\n                                        </div>\n                                    </>\n                                )}\n                           </div>\n                        </TooltipContent>\n                    </Tooltip>\n                </TooltipProvider>\n            </TableCell>\n            <TableCell className=\"text-right font-mono\"><Countdown endDate={finalDate} onFinish={() => router.refresh()} /></TableCell>\n            <TableCell className=\"text-right\">\n                {isOutgoing && missionType !== 'REGRESO' && (\n                    <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-destructive/80 hover:text-destructive\"><X/></Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                            <AlertDialogHeader>\n                                <AlertDialogTitle>\u00bfCancelar misi\u00f3n?</AlertDialogTitle>\n                                <AlertDialogDescription>La flota regresar\u00e1 inmediatamente. Esta acci\u00f3n no se puede deshacer.</AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                                <AlertDialogCancel>No</AlertDialogCancel>\n                                <AlertDialogAction onClick={() => handleCancel(mission.id)} disabled={isPending}>\n                                    {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/> : <X className=\"mr-2\"/>}\n                                    Confirmar\n                                </AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                )}\n            </TableCell>\n        </TableRow>\n    );\n}\n\nconst getMovementArrival = (movement: ColaMisiones | IncomingAttack): Date => {\n    if ('fechaLlegada' in movement) {\n        return movement.fechaLlegada;\n    }\n    return movement.arrivalTime;\n}\n\nexport function MissionOverview({ missions, incomingAttacks, allTroops }: MissionOverviewProps) {\n    const isMobile = useIsMobile();\n    const allMovements = [...missions, ...incomingAttacks].sort(\n        (a, b) => getMovementArrival(a).getTime() - getMovementArrival(b).getTime()\n    );\n\n    if (allMovements.length === 0) return null;\n\n    if (isMobile) {\n        return (\n             <div className=\"space-y-3\">\n                 <h3 className=\"text-lg font-semibold px-4\">Movimiento de Flotas</h3>\n                {allMovements.map((mov) => {\n                    const isOutgoing = 'userId' in mov;\n                    const missionType = isOutgoing ? mov.tipoMision : 'ATAQUE';\n                    const from = isOutgoing ? `${mov.origenCiudad}:${mov.origenBarrio}` : mov.attackerName;\n                    const to = isOutgoing ? `${mov.destinoCiudad}:${mov.destinoBarrio}` : mov.targetProperty;\n                    const finalDate = 'fechaRegreso' in mov && mov.fechaRegreso && mov.tipoMision === 'REGRESO' \n                                        ? mov.fechaRegreso \n                                        : ('fechaLlegada' in mov ? mov.fechaLlegada : mov.arrivalTime);\n\n                    return (\n                        <Card key={mov.id} className={cn(\"p-4\", missionType === 'ATAQUE' && 'border-destructive/50')}>\n                           <div className=\"flex items-start justify-between\">\n                                <div className=\"flex items-center gap-3\">\n                                    {missionIcons[missionType]}\n                                    <div>\n                                        <p className=\"font-bold\">{missionType}</p>\n                                        <p className=\"text-xs text-muted-foreground\">{isOutgoing ? `Hacia ${to}` : `Desde ${from}`}</p>\n                                    </div>\n                                </div>\n                                 <div className=\"text-right\">\n                                    <p className=\"font-mono text-lg\"><Countdown endDate={finalDate} onFinish={() => {}} /></p>\n                                    <p className=\"text-xs text-muted-foreground\">Tiempo Restante</p>\n                                </div>\n                           </div>\n                        </Card>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    return (\n        <Card className=\"animate-fade-in-up\" style={{ animationDelay: '500ms'}}>\n            <CardHeader>\n                <CardTitle>Movimiento de Flotas</CardTitle>\n            </CardHeader>\n            <CardContent>\n                <ScrollArea className=\"h-64\">\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead>Tipo</TableHead>\n                                <TableHead>Origen/Destino</TableHead>\n                                <TableHead className=\"text-center\">Tropas</TableHead>\n                                <TableHead className=\"text-right\">Tiempo Restante</TableHead>\n                                <TableHead className=\"w-[50px]\"></TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {allMovements.map(mov => <MissionRow key={mov.id} mission={mov} type={('userId' in mov) ? (mov.tipoMision === 'REGRESO' ? 'returning' : 'outgoing') : 'incoming'} allTroops={allTroops} />)}\n                        </TableBody>\n                    </Table>\n                </ScrollArea>\n            </CardContent>\n        </Card>\n    );\n}\n"
                },
                {
                  "name": "player-card-server.tsx",
                  "type": "file",
                  "content": "\nimport { getPlayerCardData } from '@/lib/data';\nimport { PlayerCard } from '@/components/dashboard/overview/player-card';\n\nexport async function PlayerCardServer({ userId }: { userId: string }) {\n  const data = await getPlayerCardData(userId);\n  \n  if (!data) return null;\n\n  // We are casting because the data fetched is compatible with UserWithProgress for the card's needs.\n  return <PlayerCard user={data as any} />;\n}\n"
                },
                {
                  "name": "player-card.tsx",
                  "type": "file",
                  "content": "\n'use client'\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { UserWithProgress } from \"@/lib/types\";\nimport { Crown, Shield, User as UserIcon } from \"lucide-react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { FamilyRole } from \"@prisma/client\";\n\ninterface PlayerCardProps {\n    user: UserWithProgress;\n}\n\nconst roleIcons: Record<FamilyRole, React.ReactNode> = {\n    [FamilyRole.LEADER]: <Crown className=\"h-4 w-4 text-amber-400\" />,\n    [FamilyRole.CO_LEADER]: <Shield className=\"h-4 w-4 text-blue-400\" />,\n    [FamilyRole.MEMBER]: <UserIcon className=\"h-4 w-4 text-muted-foreground\" />,\n}\n\nexport function PlayerCard({ user }: PlayerCardProps) {\n    // Simulating progress towards the next level/rank\n    const progress = ( (user.puntuacion?.puntosTotales || 0) % 1000) / 10;\n\n    return (\n         <Card className=\"group relative overflow-hidden h-full flex items-center p-4 transition-all duration-300\">\n            <div className=\"absolute inset-0 bg-black/50 z-0\">\n                 <Image \n                    src=\"/nuevas/edificionuevo.jpg\" \n                    alt=\"Player background\"\n                    fill\n                    className=\"object-cover transition-transform duration-500 ease-in-out group-hover:scale-110 opacity-30\"\n                    data-ai-hint=\"dark office interior\"\n                />\n            </div>\n            <div className=\"relative z-10 flex flex-col sm:flex-row items-center gap-4 w-full text-center sm:text-left\">\n                <Avatar className=\"h-24 w-24 border-4 border-primary/50 shadow-lg shrink-0\">\n                    <AvatarImage src={user.avatarUrl || ''} alt={user.name} data-ai-hint=\"mafia boss\" />\n                    <AvatarFallback className=\"text-4xl\">{user.name?.charAt(0).toUpperCase()}</AvatarFallback>\n                </Avatar>\n                 <div className=\"flex flex-col justify-center flex-grow\">\n                     <CardTitle className=\"text-2xl font-bold tracking-wider text-white [text-shadow:0_2px_4px_rgb(0_0_0_/_0.8)]\">{user.name}</CardTitle>\n                    <p className=\"text-md text-white/80 [text-shadow:0_1px_2px_rgb(0_0_0_/_0.8)] mb-2\">{user.title || 'Nuevo Jefe'}</p>\n                     {user.familyMember && (\n                         <Link href={`/family/members?id=${user.familyMember.family.id}`} className=\"hover:underline flex items-center justify-center sm:justify-start gap-2 text-sm text-primary-foreground/80\">\n                             <Avatar className=\"h-6 w-6 border\">\n                                <AvatarImage src={user.familyMember.family.avatarUrl || ''} />\n                                <AvatarFallback className=\"text-xs\">{user.familyMember.family.tag.charAt(0)}</AvatarFallback>\n                            </Avatar>\n                            <span className=\"font-semibold\">[{user.familyMember.family.tag}]</span>\n                        </Link>\n                    )}\n                 </div>\n            </div>\n        </Card>\n    )\n}\n"
                },
                {
                  "name": "queue-status-server.tsx",
                  "type": "file",
                  "content": "\nimport { getQueueStatusData, getRoomConfigurations, getTroopConfigurations, getUserWithProgressByUsername } from '@/lib/data';\nimport { QueueStatusCard } from '@/components/dashboard/queue-status-card';\nimport { getSessionUser } from '@/lib/auth';\n\n\nexport async function QueueStatusServer({ propertyId }: { propertyId: string }) {\n  const user = await getSessionUser(); // We need the full user object for this component for now.\n  const [allRooms, allTroops] = await Promise.all([\n    getRoomConfigurations(),\n    getTroopConfigurations()\n  ]);\n  \n  if (!user) return null;\n\n  return <QueueStatusCard user={user} allRooms={allRooms} allTroops={allTroops} />;\n}\n"
                }
              ]
            },
            {
              "name": "overview-view.tsx",
              "type": "file",
              "content": "\n// This component is no longer used and can be removed.\n// The logic has been broken down into smaller server components\n// in the src/components/dashboard/overview/ directory.\n// The composition now happens in src/app/(dashboard)/overview/page.tsx.\n'use client';\n\nimport type { UserWithProgress, FullConfiguracionTropa, FullConfiguracionHabitacion } from \"@/lib/types\";\nimport { IncomingAttacks } from \"./incoming-attacks\";\nimport { PlayerCard } from \"./overview/player-card\";\nimport { FamilyCard } from \"./overview/family-card\";\nimport { QueueStatusCard } from \"./queue-status-card\";\nimport { MissionOverview } from \"./overview/mission-overview\";\nimport { GlobalStats } from \"./overview/global-stats\";\n\ninterface OverviewViewProps {\n    user: UserWithProgress;\n    allRooms: { id: string, nombre: string }[];\n    allTroops: FullConfiguracionTropa[];\n}\n\nexport function OverviewView({ user, allRooms, allTroops }: OverviewViewProps) {\n    const components = [\n        <div key=\"player-card\" className=\"lg:col-span-2\">\n            <PlayerCard user={user} />\n        </div>,\n        <div key=\"family-card\" className=\"lg:col-span-2\">\n            <FamilyCard family={user.familyMember?.family as any} />\n        </div>,\n        <div key=\"queue-status\" className=\"lg:col-span-2 xl:col-span-4\">\n            <QueueStatusCard user={user} allRooms={allRooms} allTroops={allTroops} />\n        </div>,\n        <div key=\"global-stats\" className=\"lg:col-span-2 xl:col-span-4\">\n            <GlobalStats stats={{\n                puntosEntrenamiento: user.puntuacion?.puntosEntrenamientos || 0,\n                puntosEdificios: user.puntuacion?.puntosHabitaciones || 0,\n                puntosTropas: user.puntuacion?.puntosTropas || 0,\n                puntosTotales: user.puntuacion?.puntosTotales || 0,\n                propiedades: user.propiedades.length,\n                lealtad: 100 // Placeholder\n            }} />\n        </div>,\n        <div key=\"mission-overview\" className=\"lg:col-span-2 xl:col-span-4\">\n            <MissionOverview missions={user.misiones} incomingAttacks={user.incomingAttacks} allTroops={allTroops}/>\n        </div>\n    ];\n\n    return (\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            {components.map((component, index) => (\n                <div key={index} className=\"animate-fade-in-up\" style={{ animationDelay: `${index * 100}ms` }}>\n                    {component}\n                </div>\n            ))}\n        </div>\n    );\n}\n"
            },
            {
              "name": "overview.tsx",
              "type": "file",
              "content": "// This component is no longer used and can be removed. I will keep it for now to avoid breaking changes, but it can be deleted.\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport Image from \"next/image\"\n\nexport function Overview() {\n  return (\n    <div className=\"flex-1 space-y-4\">\n      <h2 className=\"text-3xl font-bold tracking-tight\">Visi\u00f3n General</h2>\n      <Card className=\"col-span-1 lg:col-span-3\">\n        <CardHeader>\n          <CardTitle>Bienvenido a Vendetta Latino</CardTitle>\n          <CardDescription>\n            Desde aqu\u00ed puedes gestionar todos los aspectos de tus operaciones.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n            <p>Selecciona una opci\u00f3n del men\u00fa lateral para empezar a planificar tu pr\u00f3ximo movimiento.</p>\n            <div className=\"rounded-lg border overflow-hidden\">\n                <Image\n                    src=\"https://placehold.co/1200x400.png\"\n                    alt=\"Placeholder de mapa de la ciudad\"\n                    width={1200}\n                    height={400}\n                    className=\"object-cover w-full h-auto\"\n                    data-ai-hint=\"dark city map\"\n                />\n            </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"
            },
            {
              "name": "powerattack-view.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { UserWithProgress } from '@/lib/types';\nimport { cn } from '@/lib/utils';\nimport { Target } from 'lucide-react';\n\ninterface PowerAttackViewProps {\n    user: UserWithProgress;\n}\n\n// Function to calculate power based on the provided formula\nconst calculatePower = (propertyCount: number, honorLevel: number): number => {\n    if (propertyCount < 1) propertyCount = 1;\n    if (honorLevel < 0) honorLevel = 0;\n    const power = 1 / (1 + (Math.pow((propertyCount - 1), (4.5 - (honorLevel / 10)))) / 10000000);\n    return power * 100;\n};\n\nexport function PowerAttackView({ user }: PowerAttackViewProps) {\n    const userHonorLevel = user.entrenamientos.find(t => t.configuracionEntrenamientoId === 'honor')?.nivel || 0;\n    const userPropertyCount = user.propiedades.length;\n    const currentUserPower = calculatePower(userPropertyCount, userHonorLevel);\n\n    const tableData = useMemo(() => {\n        const data = [];\n        for (let i = 1; i <= 100; i++) {\n            const row: (string | number)[] = [i];\n            for (let j = 0; j <= 10; j++) {\n                const power = calculatePower(i, j);\n                row.push(Math.round(power) + '%');\n            }\n            data.push(row);\n        }\n        return data;\n    }, []);\n\n    const headers = [\"C.Edis\", ...Array.from({ length: 11 }, (_, i) => `H ${i}`)];\n\n    return (\n        <div className=\"space-y-6\">\n            <div>\n                <h2 className=\"text-3xl font-bold tracking-tight\">Tabla de Poder de Ataque</h2>\n                <p className=\"text-muted-foreground\">\n                    Tu poder de ataque aumenta con el honor y disminuye con el n\u00famero de propiedades.\n                </p>\n            </div>\n\n            <Card className=\"border-primary/50 animate-fade-in-up\">\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                        <Target className=\"h-6 w-6 text-primary\" />\n                        Tu Poder de Ataque Actual\n                    </CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <p className=\"text-3xl sm:text-4xl font-bold font-mono text-primary\">{currentUserPower.toFixed(2)}%</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                        Calculado con {userPropertyCount} propiedades y Honor nivel {userHonorLevel}.\n                    </p>\n                </CardContent>\n            </Card>\n\n            <Card className=\"animate-fade-in-up\" style={{ animationDelay: '100ms' }}>\n                <CardContent className=\"p-0\">\n                    <ScrollArea className=\"w-full whitespace-nowrap rounded-md border\">\n                        <Table className=\"min-w-full\">\n                            <TableHeader>\n                                <TableRow>\n                                    {headers.map((header, index) => (\n                                        <TableHead \n                                            key={header} \n                                            className={cn(\n                                                \"sticky top-0 z-20 bg-muted/95 backdrop-blur-sm p-2 text-center\", \n                                                index === 0 && \"sticky left-0 z-30\",\n                                                (index - 1) === userHonorLevel && \"bg-primary/30 text-primary-foreground\"\n                                            )}\n                                        >\n                                            {header}\n                                        </TableHead>\n                                    ))}\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {tableData.map((row, rowIndex) => (\n                                    <TableRow key={rowIndex} className={cn(\"hover:bg-muted/40\", (rowIndex + 1) === userPropertyCount && \"bg-primary/20 hover:bg-primary/30\")}>\n                                        {row.map((cell, cellIndex) => (\n                                            <TableCell \n                                                key={cellIndex} \n                                                className={cn(\n                                                    \"font-mono text-xs sm:text-sm p-1 sm:p-2 text-center\",\n                                                    cellIndex === 0 && \"sticky left-0 bg-muted/95 backdrop-blur-sm font-semibold\",\n                                                    cellIndex === userHonorLevel + 1 && \"bg-primary/20\"\n                                                )}\n                                            >\n                                                {cell}\n                                            </TableCell>\n                                        ))}\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </ScrollArea>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n"
            },
            {
              "name": "profile",
              "type": "directory",
              "children": [
                {
                  "name": "profile-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { UserProfileData } from \"@/lib/types\";\nimport { Send, Target, X } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useMemo } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { calcularPuntosPropiedad } from \"@/lib/formulas/score-formulas\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\ninterface ProfileViewProps {\n    user: UserProfileData;\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nexport function ProfileView({ user }: ProfileViewProps) {\n    const router = useRouter();\n\n    const propertiesWithPoints = useMemo(() => {\n        if (!user.propiedades) return [];\n        return user.propiedades.map(prop => ({\n            ...prop,\n            puntos: calcularPuntosPropiedad(prop as any)\n        })).sort((a, b) => b.puntos - a.puntos);\n    }, [user.propiedades]);\n\n    const handleSendMission = (ciudad: number, barrio: number, edificio: number) => {\n        const params = new URLSearchParams();\n        params.set('ciudad', ciudad.toString());\n        params.set('barrio', barrio.toString());\n        params.set('edificio', edificio.toString());\n        router.push(`/missions?${params.toString()}`);\n    }\n\n\n    return (\n        <div className=\"space-y-6\">\n            <Card className=\"overflow-hidden\">\n                <div className=\"relative h-40 bg-muted\">\n                    <Image \n                        src=\"/img/general/fondo.jpg\" \n                        alt=\"Profile Banner\" \n                        fill \n                        className=\"object-cover\"\n                        data-ai-hint=\"dark city skyline\"\n                    />\n                     <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent\" />\n                </div>\n                <div className=\"p-4 flex flex-col items-center sm:flex-row sm:items-end gap-4 -mt-16 sm:-mt-20 z-10 relative\">\n                     <Avatar className=\"h-32 w-32 border-4 border-background shadow-lg\">\n                        <AvatarImage src={user.avatarUrl || ''} alt={user.name} data-ai-hint=\"mafia boss\" />\n                        <AvatarFallback className=\"text-4xl\">{user.name?.charAt(0).toUpperCase()}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-grow text-center sm:text-left\">\n                        {user.familyMember && (\n                             <Link href={`/family/members?id=${user.familyMember.family.id}`} className=\"flex items-center gap-2 hover:underline justify-center sm:justify-start\">\n                                 <Avatar className=\"h-6 w-6\">\n                                    <AvatarImage src={user.familyMember.family.avatarUrl || ''} />\n                                    <AvatarFallback>{user.familyMember.family.tag.charAt(0)}</AvatarFallback>\n                                </Avatar>\n                                <span className=\"font-semibold text-primary\">[{user.familyMember.family.tag}] {user.familyMember.family.name}</span>\n                             </Link>\n                        )}\n                        <h2 className=\"text-4xl font-bold tracking-tight font-heading\">{user.name}</h2>\n                        <p className=\"text-lg text-muted-foreground\">{user.title || 'Jefe Mafioso'}</p>\n                    </div>\n                    <div className=\"text-center sm:text-right\">\n                        <p className=\"text-xs text-muted-foreground\">Puntos Totales</p>\n                        <p className=\"text-4xl font-bold text-primary font-mono\">{formatPoints(user.puntuacion?.puntosTotales)}</p>\n                    </div>\n                </div>\n            </Card>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"md:col-span-3 space-y-6\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Estad\u00edsticas de Puntuaci\u00f3n</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                            <div className=\"flex justify-between items-baseline\"><span className=\"text-muted-foreground\">Puntos de Edificios</span><span className=\"font-semibold font-mono\">{formatPoints(user.puntuacion?.puntosHabitaciones)}</span></div>\n                            <Separator />\n                            <div className=\"flex justify-between items-baseline\"><span className=\"text-muted-foreground\">Puntos de Tropas</span><span className=\"font-semibold font-mono\">{formatPoints(user.puntuacion?.puntosTropas)}</span></div>\n                            <Separator />\n                            <div className=\"flex justify-between items-baseline\"><span className=\"text-muted-foreground\">Puntos de Entrenamiento</span><span className=\"font-semibold font-mono\">{formatPoints(user.puntuacion?.puntosEntrenamientos)}</span></div>\n                            <Separator />\n                             <div className=\"flex justify-between items-baseline\"><span className=\"text-muted-foreground\">Puntos de Honor (Atacante)</span><span className=\"font-semibold font-mono text-green-400\">{formatPoints(user.puntuacion?.puntosHonorAtacante)}</span></div>\n                             <Separator />\n                             <div className=\"flex justify-between items-baseline\"><span className=\"text-muted-foreground\">Puntos de Honor (Defensor)</span><span className=\"font-semibold font-mono text-red-400\">{formatPoints(user.puntuacion?.puntosHonorDefensor)}</span></div>\n                             <Separator />\n                             <div className=\"flex justify-between items-baseline\"><span className=\"font-bold\">Puntos de Honor (Total)</span><span className=\"font-semibold font-mono text-primary\">{formatPoints(user.puntuacion?.puntosHonorTotales)}</span></div>\n                            <Separator />\n                             <div className=\"flex justify-between text-xs text-muted-foreground pt-2\">\n                                <span>Miembro desde</span>\n                                <span>{new Date(user.createdAt).toLocaleDateString('es-ES')}</span>\n                            </div>\n                        </CardContent>\n                    </Card>\n                </div>\n                \n                 <div className=\"md:col-span-3\">\n                    <Card>\n                        <CardHeader className=\"bg-destructive/90 text-destructive-foreground rounded-t-lg\">\n                            <CardTitle>EDIFICIOS</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"p-0\">\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead className=\"w-[150px]\">Posici\u00f3n</TableHead>\n                                        <TableHead className=\"w-[120px]\">Enviar tropa</TableHead>\n                                        <TableHead>Nombre</TableHead>\n                                        <TableHead className=\"text-right\">Puntos</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {propertiesWithPoints.map(prop => (\n                                        <TableRow key={prop.id}>\n                                            <TableCell className=\"font-mono\">{prop.ciudad}:{prop.barrio}:{prop.edificio}</TableCell>\n                                            <TableCell>\n                                                <Button variant=\"ghost\" size=\"icon\" onClick={() => handleSendMission(prop.ciudad, prop.barrio, prop.edificio)} className=\"h-6 w-6 text-destructive hover:text-destructive hover:bg-destructive/10\">\n                                                    <X className=\"h-5 w-5\" />\n                                                </Button>\n                                            </TableCell>\n                                            <TableCell className=\"font-semibold\">{prop.nombre}</TableCell>\n                                            <TableCell className=\"text-right font-mono\">{formatPoints(prop.puntos)}</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </div>\n    )\n}\n"
                }
              ]
            },
            {
              "name": "property-selector.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport * as React from 'react'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Building, Check, ChevronLeft, ChevronRight } from 'lucide-react'\nimport type { FullPropiedad } from '@/lib/types'\nimport { useProperty } from '@/contexts/property-context'\nimport { cn } from '@/lib/utils'\n\ninterface PropertySelectorProps {\n  properties: FullPropiedad[]\n}\n\nexport function PropertySelector({ properties }: PropertySelectorProps) {\n  const { selectedProperty, setSelectedPropertyById } = useProperty();\n\n  const handlePropertyChange = (direction: 'next' | 'prev') => {\n    if (!selectedProperty || properties.length <= 1) return;\n\n    const currentIndex = properties.findIndex(p => p.id === selectedProperty.id);\n    if (currentIndex === -1) return;\n\n    let nextIndex;\n    if (direction === 'next') {\n        nextIndex = (currentIndex + 1) % properties.length;\n    } else {\n        nextIndex = (currentIndex - 1 + properties.length) % properties.length;\n    }\n    \n    const nextPropertyId = properties[nextIndex].id;\n    setSelectedPropertyById(nextPropertyId);\n  }\n\n  if (!properties || properties.length === 0) {\n    return null\n  }\n  \n  if (properties.length === 1) {\n    return (\n       <div className=\"p-2\">\n            <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                className=\"w-full justify-start\"\n            >\n                <Building className=\"mr-2 h-4 w-4\" />\n                <span className=\"truncate\">{selectedProperty?.nombre || 'Propiedad'}</span>\n            </Button>\n       </div>\n    )\n  }\n\n  return (\n    <div className=\"p-2 flex items-center gap-1\">\n        <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 shrink-0 transition-colors\" onClick={() => handlePropertyChange('prev')}>\n            <ChevronLeft className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Propiedad anterior</span>\n        </Button>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            className=\"w-full h-8 justify-center bg-muted/50 hover:bg-muted\"\n          >\n            <div className=\"flex items-center gap-2 truncate\">\n              <Building className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"truncate text-sm font-medium\">{selectedProperty?.nombre || 'Seleccionar...'}</span>\n            </div>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-[var(--sidebar-width)] -translate-x-2\">\n          <DropdownMenuLabel>Tus Propiedades</DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          {properties.map((property) => (\n            <DropdownMenuItem\n              key={property.id}\n              onSelect={() => setSelectedPropertyById(property.id)}\n            >\n              <Check\n                className={cn('mr-2 h-4 w-4',\n                  selectedProperty?.id === property.id ? 'opacity-100' : 'opacity-0'\n                )}\n              />\n              <span>{property.nombre} [{property.ciudad}:{property.barrio}:{property.edificio}]</span>\n            </DropdownMenuItem>\n          ))}\n        </DropdownMenuContent>\n      </DropdownMenu>\n       <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 shrink-0 transition-colors\" onClick={() => handlePropertyChange('next')}>\n            <ChevronRight className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Siguiente propiedad</span>\n        </Button>\n    </div>\n  )\n}\n\n"
            },
            {
              "name": "queue-status-card.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport type { UserWithProgress, FullPropiedad, ColaConstruccion, FullConfiguracionTropa } from '@/lib/types';\nimport { ConstructionStatus } from './construction-status';\nimport { RecruitmentStatus } from './recruitment-status';\nimport { TrainingStatus } from './training-status';\nimport { Hammer, Swords, Users, BrainCircuit } from 'lucide-react';\nimport { Card, CardHeader, CardTitle, CardContent } from '../ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from '../ui/scroll-area';\n\ntype QueueCardProps = {\n    user: UserWithProgress;\n    allRooms: { id: string; nombre: string; }[];\n    allTroops: FullConfiguracionTropa[];\n};\n\nexport function QueueStatusCard({ user, allRooms, allTroops }: QueueCardProps) {\n    \n    const activeConstructionsPerProperty = user.propiedades\n        .map((p: FullPropiedad) => {\n            const activeConstruction = p.colaConstruccion.find((c: ColaConstruccion) => c.fechaFinalizacion && new Date(c.fechaFinalizacion) > new Date());\n            return activeConstruction ? { ...activeConstruction, propiedadNombre: p.nombre } : null;\n        })\n        .filter((c): c is NonNullable<typeof c> => c !== null);\n\n    const activeRecruitments = user.propiedades\n        .filter((p: FullPropiedad) => p.colaReclutamiento)\n        .map((p: FullPropiedad) => ({ ...p.colaReclutamiento!, propiedadNombre: p.nombre }));\n\n    return (\n        <Card className=\"h-full\">\n            <CardHeader>\n                <CardTitle>Colas de Actividad</CardTitle>\n            </CardHeader>\n            <CardContent>\n                <Tabs defaultValue=\"construction\" className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-3\">\n                        <TabsTrigger value=\"construction\"><Hammer className=\"mr-2 h-4 w-4\"/>Construcci\u00f3n</TabsTrigger>\n                        <TabsTrigger value=\"recruitment\"><Users className=\"mr-2 h-4 w-4\"/>Reclutamiento</TabsTrigger>\n                        <TabsTrigger value=\"training\"><BrainCircuit className=\"mr-2 h-4 w-4\"/>Entrenamiento</TabsTrigger>\n                    </TabsList>\n                    <TabsContent value=\"construction\" className=\"mt-4\">\n                        <ScrollArea className=\"h-32\">\n                           <ConstructionStatus constructions={activeConstructionsPerProperty} allRooms={allRooms} />\n                        </ScrollArea>\n                    </TabsContent>\n                    <TabsContent value=\"recruitment\" className=\"mt-4\">\n                        <ScrollArea className=\"h-32\">\n                            <RecruitmentStatus recruitments={activeRecruitments} />\n                        </ScrollArea>\n                    </TabsContent>\n                    <TabsContent value=\"training\" className=\"mt-4\">\n                         <ScrollArea className=\"h-32\">\n                            <TrainingStatus trainings={user.colaEntrenamientos} />\n                        </ScrollArea>\n                    </TabsContent>\n                </Tabs>\n            </CardContent>\n        </Card>\n    );\n}\n"
            },
            {
              "name": "rankings",
              "type": "directory",
              "children": [
                {
                  "name": "battles-rankings-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Link from \"next/link\";\nimport { Swords } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport type { FullBattleReport } from \"@/lib/types\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport type { BattleReport } from '@/lib/types/simulation.types';\nimport { useRouter } from \"next/navigation\";\n\ninterface BattlesRankingsViewProps {\n    reports: FullBattleReport[];\n    currentUserId: string;\n}\n\nfunction formatNumber(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nexport function BattlesRankingsView({ reports }: BattlesRankingsViewProps) {\n    const router = useRouter();\n    const processedReports = reports.map(report => {\n        const details = report.details as unknown as BattleReport;\n        const totalTropasDestruidas = (details?.finalStats?.attacker.troopsLost ?? 0) + (details?.finalStats?.defender.troopsLost ?? 0);\n        const totalPuntosDestruidos = (details?.finalStats?.attacker.pointsLost ?? 0) + (details?.finalStats?.defender.pointsLost ?? 0);\n        return {\n            ...report,\n            totalTropasDestruidas,\n            totalPuntosDestruidos\n        };\n    });\n    \n    const handleRowClick = (reportId: string) => {\n        router.push(`/brawls/${reportId}`);\n    }\n\n    return (\n        <div className=\"animate-fade-in\">\n            <Card className=\"mt-4\">\n                <CardContent className=\"p-0\">\n                    {/* Desktop Table */}\n                    <Table className=\"hidden md:table\">\n                        <TableHeader>\n                            <TableRow className=\"bg-muted/50 hover:bg-muted/80\">\n                                <TableHead className=\"font-bold text-center\">Enfrentamiento</TableHead>\n                                <TableHead className=\"text-right font-bold\">Tropas Destruidas</TableHead>\n                                <TableHead className=\"text-right font-bold\">Puntos Destruidos</TableHead>\n                                <TableHead className=\"text-right font-bold\">D\u00eda</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {processedReports.map((report) => (\n                                <TableRow key={report.id} onClick={() => handleRowClick(report.id)} className=\"cursor-pointer\">\n                                    <TableCell>\n                                        <div className=\"flex items-center justify-center gap-4\">\n                                            <Link href={`/profile/${report.attacker.id}`} className=\"flex items-center gap-2 hover:underline text-green-400 font-semibold\" onClick={(e) => e.stopPropagation()}>\n                                                <Avatar className=\"h-8 w-8\"><AvatarImage src={report.attacker.avatarUrl || ''} /><AvatarFallback>{report.attacker.name.charAt(0)}</AvatarFallback></Avatar>\n                                                {report.attacker.name}\n                                            </Link>\n                                            <Swords className=\"h-6 w-6 text-destructive\" />\n                                             <Link href={`/profile/${report.defender.id}`} className=\"flex items-center gap-2 hover:underline text-red-400 font-semibold\" onClick={(e) => e.stopPropagation()}>\n                                                <Avatar className=\"h-8 w-8\"><AvatarImage src={report.defender.avatarUrl || ''} /><AvatarFallback>{report.defender.name.charAt(0)}</AvatarFallback></Avatar>\n                                                {report.defender.name}\n                                            </Link>\n                                        </div>\n                                    </TableCell>\n                                    <TableCell className=\"text-right font-mono\">{formatNumber(report.totalTropasDestruidas)}</TableCell>\n                                    <TableCell className=\"text-right font-mono text-primary\">{formatNumber(report.totalPuntosDestruidos)}</TableCell>\n                                    <TableCell className=\"text-right text-xs text-muted-foreground\">{new Date(report.createdAt).toLocaleDateString()}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    {/* Mobile Cards */}\n                     <div className=\"md:hidden space-y-2 p-2\">\n                        {processedReports.map((report) => (\n                            <Card key={report.id} className=\"p-4\" onClick={() => handleRowClick(report.id)}>\n                                <div className=\"flex justify-between items-center text-sm\">\n                                    <Link href={`/profile/${report.attacker.id}`} className=\"font-semibold text-green-400 hover:underline\" onClick={(e) => e.stopPropagation()}>{report.attacker.name}</Link>\n                                    <Swords className=\"h-5 w-5 text-destructive\" />\n                                    <Link href={`/profile/${report.defender.id}`} className=\"font-semibold text-red-400 hover:underline\" onClick={(e) => e.stopPropagation()}>{report.defender.name}</Link>\n                                </div>\n                                <Separator className=\"my-3\"/>\n                                <div className=\"space-y-1 text-xs\">\n                                    <div className=\"flex justify-between\"><span>Tropas Destruidas:</span><span className=\"font-semibold font-mono\">{formatNumber(report.totalTropasDestruidas)}</span></div>\n                                    <div className=\"flex justify-between\"><span>Puntos Destruidos:</span><span className=\"font-semibold font-mono\">{formatNumber(report.totalPuntosDestruidos)}</span></div>\n                                    <div className=\"flex justify-between\"><span>Fecha:</span><span className=\"font-semibold font-mono\">{new Date(report.createdAt).toLocaleString()}</span></div>\n                                </div>\n                            </Card>\n                        ))}\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"
                },
                {
                  "name": "family-rankings-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport type { FullFamily } from \"@/lib/types\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Medal } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport Link from \"next/link\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface FamilyRankingsViewProps {\n    families: FullFamily[];\n    currentUserFamilyId?: string | null;\n    page: number;\n    pageSize: number;\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nconst medalColors = [\n    \"text-amber-400\", // Gold\n    \"text-slate-400\", // Silver\n    \"text-amber-600\"  // Bronze\n];\n\nexport function FamilyRankingsView({ families, currentUserFamilyId, page, pageSize }: FamilyRankingsViewProps) {\n    if (!families || families.length === 0) {\n        return (\n             <Card>\n                <CardContent className=\"p-6 text-center text-muted-foreground\">\n                    No hay familias en la clasificaci\u00f3n.\n                </CardContent>\n            </Card>\n        )\n    }\n\n    // You might need to calculate total points for families in the future\n    const sortedFamilies = families; //.sort((a, b) => (b.totalPoints || 0) - (a.totalPoints || 0));\n\n    return (\n        <div className=\"animate-fade-in\">\n            <Card className=\"mt-4\">\n                <CardContent className=\"p-0\">\n                    {/* Desktop Table */}\n                    <Table className=\"hidden md:table\">\n                        <TableHeader>\n                            <TableRow className=\"bg-muted/50 hover:bg-muted/80\">\n                                <TableHead className=\"w-[80px] font-bold\">#</TableHead>\n                                <TableHead className=\"font-bold\">NOMBRE</TableHead>\n                                <TableHead className=\"text-right font-bold\">PUNTOS TOTALES</TableHead>\n                                <TableHead className=\"text-right font-bold\">MIEMBROS</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {sortedFamilies.map((family, index) => {\n                                const rank = page * pageSize + index + 1;\n                                return (\n                                <TableRow key={family.id} className={cn(family.id === currentUserFamilyId && \"bg-primary/10 hover:bg-primary/20\")}>\n                                    <TableCell className=\"font-medium text-lg flex items-center gap-2\">\n                                        {rank <= 3 && <Medal className={cn(\"h-5 w-5\", medalColors[rank - 1])} />}\n                                        {rank}\n                                    </TableCell>\n                                    <TableCell className=\"font-bold\">\n                                         <Link href={`/family/members?id=${family.id}`} className=\"hover:underline flex items-center gap-3\">\n                                             <Avatar className=\"h-10 w-10\">\n                                                <AvatarImage src={family.avatarUrl || ''} />\n                                                <AvatarFallback>{family.tag}</AvatarFallback>\n                                            </Avatar>\n                                            <span>[{family.tag}] {family.name}</span>\n                                        </Link>\n                                    </TableCell>\n                                    <TableCell className=\"text-right font-bold text-primary font-mono\">{formatPoints(0)}</TableCell>\n                                    <TableCell className=\"text-right font-mono\">{family.members.length}</TableCell>\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n                     {/* Mobile Cards */}\n                    <div className=\"md:hidden\">\n                        <div className=\"space-y-2 p-2\">\n                            {sortedFamilies.map((family, index) => {\n                                const rank = page * pageSize + index + 1;\n                                return (\n                                <Card key={family.id} className={cn(\"p-4\", family.id === currentUserFamilyId && \"bg-primary/10 border-primary/20\")}>\n                                     <div className=\"flex justify-between items-center\">\n                                        <div className=\"flex items-center gap-4\">\n                                            <span className=\"text-lg font-bold text-muted-foreground w-8 flex items-center gap-1\">\n                                                {rank <= 3 && <Medal className={cn(\"h-5 w-5\", medalColors[rank-1])} />}\n                                                #{rank}\n                                            </span>\n                                            <Link href={`/family/members?id=${family.id}`} className=\"hover:underline\">\n                                                <span className=\"font-bold text-lg\">[{family.tag}] {family.name}</span>\n                                            </Link>\n                                        </div>\n                                         <div className=\"text-right\">\n                                            <div className=\"font-bold text-primary text-lg\">{formatPoints(0)}</div>\n                                            <div className=\"text-xs text-muted-foreground\">Puntos</div>\n                                        </div>\n                                    </div>\n                                    <Separator className=\"my-3\" />\n                                     <div className=\"text-right text-sm\">\n                                        <span className=\"text-muted-foreground\">Miembros:</span>\n                                        <span className=\"font-semibold ml-2\">{family.members.length}</span>\n                                    </div>\n                                </Card>\n                            )})}\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n"
                },
                {
                  "name": "honor-rankings-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport type { UserForRanking } from \"@/lib/data\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Link from \"next/link\";\nimport { Medal } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface HonorRankingsViewProps {\n    users: UserForRanking[];\n    currentUserId: string;\n    page: number;\n    pageSize: number;\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nconst medalColors = [\n    \"text-amber-400\", // Gold\n    \"text-slate-400\", // Silver\n    \"text-amber-600\"  // Bronze\n];\n\nexport function HonorRankingsView({ users, currentUserId, page, pageSize }: HonorRankingsViewProps) {\n    return (\n        <div className=\"animate-fade-in\">\n            <Card className=\"mt-4\">\n                <CardContent className=\"p-0\">\n                    {/* Desktop Table */}\n                    <Table className=\"hidden md:table\">\n                        <TableHeader>\n                            <TableRow className=\"bg-muted/50 hover:bg-muted/80\">\n                                <TableHead className=\"w-[80px] font-bold\">#</TableHead>\n                                <TableHead className=\"font-bold\">NOMBRE</TableHead>\n                                <TableHead className=\"text-right font-bold\">PUNTOS DE HONOR (ATAQUE)</TableHead>\n                                <TableHead className=\"text-right font-bold\">PUNTOS DE HONOR (DEFENSA)</TableHead>\n                                <TableHead className=\"text-right font-bold\">HONOR TOTAL</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {users.map((user, index) => {\n                                const rank = page * pageSize + index + 1;\n                                return (\n                                <TableRow key={user.id} className={cn(user.id === currentUserId && \"bg-primary/10 hover:bg-primary/20\")}>\n                                    <TableCell className=\"font-medium text-lg flex items-center gap-2\">\n                                        {rank <= 3 && <Medal className={cn(\"h-5 w-5\", medalColors[rank - 1])} />}\n                                        {rank}\n                                    </TableCell>\n                                    <TableCell className=\"font-bold\">\n                                        <Link href={`/profile/${user.id}`} className=\"hover:underline\">\n                                            {user.name}\n                                        </Link>\n                                    </TableCell>\n                                    <TableCell className=\"text-right font-mono\">{formatPoints(user.puntuacion?.puntosHonorAtacante)}</TableCell>\n                                    <TableCell className=\"text-right font-mono\">{formatPoints(user.puntuacion?.puntosHonorDefensor)}</TableCell>\n                                    <TableCell className=\"text-right font-bold text-primary font-mono\">{formatPoints(user.puntuacion?.puntosHonorTotales)}</TableCell>\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n\n                    {/* Mobile Cards */}\n                    <div className=\"md:hidden\">\n                        <div className=\"space-y-2 p-2\">\n                            {users.map((user, index) => {\n                                const rank = page * pageSize + index + 1;\n                                return (\n                                <Card key={user.id} className={cn(\"p-4\", user.id === currentUserId && \"bg-primary/10 border-primary/20\")}>\n                                    <div className=\"flex justify-between items-center\">\n                                        <div className=\"flex items-center gap-4\">\n                                            <span className=\"text-lg font-bold text-muted-foreground w-8 flex items-center gap-1\">\n                                                {rank <= 3 && <Medal className={cn(\"h-5 w-5\", medalColors[rank - 1])} />}\n                                                #{rank}\n                                            </span>\n                                            <Link href={`/profile/${user.id}`} className=\"hover:underline\">\n                                                <span className=\"font-bold text-lg\">{user.name}</span>\n                                            </Link>\n                                        </div>\n                                        <div className=\"text-right\">\n                                            <div className=\"font-bold text-primary text-lg\">{formatPoints(user.puntuacion?.puntosHonorTotales)}</div>\n                                            <div className=\"text-xs text-muted-foreground\">Honor Total</div>\n                                        </div>\n                                    </div>\n                                    <Separator className=\"my-3\" />\n                                    <div className=\"grid grid-cols-2 gap-x-4 gap-y-2 text-sm\">\n                                        <div className=\"flex justify-between\">\n                                            <span className=\"text-muted-foreground\">Honor (Ataque):</span>\n                                            <span className=\"font-semibold\">{formatPoints(user.puntuacion?.puntosHonorAtacante)}</span>\n                                        </div>\n                                        <div className=\"flex justify-between\">\n                                            <span className=\"text-muted-foreground\">Honor (Defensa):</span>\n                                            <span className=\"font-semibold\">{formatPoints(user.puntuacion?.puntosHonorDefensor)}</span>\n                                        </div>\n                                    </div>\n                                </Card>\n                            )})}\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n"
                },
                {
                  "name": "player-rankings-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport type { UserForRanking } from \"@/lib/data\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Link from \"next/link\";\nimport { Medal } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PlayerRankingsViewProps {\n    users: UserForRanking[];\n    currentUserId: string;\n    page: number;\n    pageSize: number;\n}\n\nfunction formatPoints(points: number | null | undefined): string {\n    if (points === null || points === undefined) return \"0\";\n    return Math.floor(points).toLocaleString('de-DE');\n}\n\nconst medalColors = [\n    \"text-amber-400\", // Gold\n    \"text-slate-400\", // Silver\n    \"text-amber-600\"  // Bronze\n];\n\nexport function PlayerRankingsView({ users, currentUserId, page, pageSize }: PlayerRankingsViewProps) {\n    return (\n        <div className=\"animate-fade-in\">\n            <Card className=\"mt-4\">\n                <CardContent className=\"p-0\">\n                    {/* Vista de Tabla para Escritorio */}\n                    <Table className=\"hidden md:table\">\n                        <TableHeader>\n                            <TableRow className=\"bg-muted/50 hover:bg-muted/80\">\n                                <TableHead className=\"w-[80px] font-bold\">#</TableHead>\n                                <TableHead className=\"font-bold\">NOMBRE</TableHead>\n                                <TableHead className=\"text-right font-bold\">PUNTOS (ENTR\u00c9N.)</TableHead>\n                                <TableHead className=\"text-right font-bold\">PUNTOS (EDIFICIOS)</TableHead>\n                                <TableHead className=\"text-right font-bold\">PUNTOS (TROPAS)</TableHead>\n                                <TableHead className=\"text-right font-bold\">SUMA</TableHead>\n                                <TableHead className=\"text-right font-bold\">PROPIEDADES</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {users.map((user, index) => {\n                                const rank = page * pageSize + index + 1;\n                                return (\n                                <TableRow key={user.id} className={cn(user.id === currentUserId && \"bg-primary/10 hover:bg-primary/20\")}>\n                                    <TableCell className=\"font-medium text-lg flex items-center gap-2\">\n                                        {rank <= 3 && <Medal className={cn(\"h-5 w-5\", medalColors[rank - 1])} />}\n                                        {rank}\n                                    </TableCell>\n                                    <TableCell className=\"font-bold\">\n                                        <Link href={`/profile/${user.id}`} className=\"hover:underline\">\n                                            {user.name}\n                                        </Link>\n                                    </TableCell>\n                                    <TableCell className=\"text-right font-mono\">{formatPoints(user.puntuacion?.puntosEntrenamientos)}</TableCell>\n                                    <TableCell className=\"text-right font-mono\">{formatPoints(user.puntuacion?.puntosHabitaciones)}</TableCell>\n                                    <TableCell className=\"text-right font-mono\">{formatPoints(user.puntuacion?.puntosTropas)}</TableCell>\n                                    <TableCell className=\"text-right font-bold text-primary font-mono\">{formatPoints(user.puntuacion?.puntosTotales)}</TableCell>\n                                    <TableCell className=\"text-right font-mono\">{user._count.propiedades}</TableCell>\n                                </TableRow>\n                            )})}\n                        </TableBody>\n                    </Table>\n\n                    {/* Vista de Tarjetas para M\u00f3vil */}\n                    <div className=\"md:hidden\">\n                        <div className=\"space-y-2 p-2\">\n                            {users.map((user, index) => {\n                                const rank = page * pageSize + index + 1;\n                                return (\n                                <Card key={user.id} className={cn(\"p-4\", user.id === currentUserId && \"bg-primary/10 border-primary/20\")}>\n                                    <div className=\"flex justify-between items-center\">\n                                        <div className=\"flex items-center gap-4\">\n                                            <span className=\"text-lg font-bold text-muted-foreground w-8 flex items-center gap-1\">\n                                                {rank <= 3 && <Medal className={cn(\"h-5 w-5\", medalColors[rank - 1])} />}\n                                                #{rank}\n                                            </span>\n                                            <Link href={`/profile/${user.id}`} className=\"hover:underline\">\n                                                <span className=\"font-bold text-lg\">{user.name}</span>\n                                            </Link>\n                                        </div>\n                                        <div className=\"text-right\">\n                                            <div className=\"font-bold text-primary text-lg\">{formatPoints(user.puntuacion?.puntosTotales)}</div>\n                                            <div className=\"text-xs text-muted-foreground\">Puntos Totales</div>\n                                        </div>\n                                    </div>\n                                    <Separator className=\"my-3\" />\n                                    <div className=\"grid grid-cols-2 gap-x-4 gap-y-2 text-sm\">\n                                        <div className=\"flex justify-between\">\n                                            <span className=\"text-muted-foreground\">Entrenamiento:</span>\n                                            <span className=\"font-semibold\">{formatPoints(user.puntuacion?.puntosEntrenamientos)}</span>\n                                        </div>\n                                        <div className=\"flex justify-between\">\n                                            <span className=\"text-muted-foreground\">Edificios:</span>\n                                            <span className=\"font-semibold\">{formatPoints(user.puntuacion?.puntosHabitaciones)}</span>\n                                        </div>\n                                        <div className=\"flex justify-between\">\n                                            <span className=\"text-muted-foreground\">Tropas:</span>\n                                            <span className=\"font-semibold\">{formatPoints(user.puntuacion?.puntosTropas)}</span>\n                                        </div>\n                                        <div className=\"flex justify-between\">\n                                            <span className=\"text-muted-foreground\">Propiedades:</span>\n                                            <span className=\"font-semibold\">{user._count.propiedades}</span>\n                                        </div>\n                                    </div>\n                                </Card>\n                            )})}\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n"
                },
                {
                  "name": "ranking-type-selector.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useRouter, usePathname, useSearchParams } from \"next/navigation\";\nimport { Users, Users2, Trophy, Swords } from \"lucide-react\";\n\nconst categories = [\n    { value: '0', label: 'Jugadores', icon: <Users /> },\n    { value: '1', label: 'Familias', icon: <Users2 /> },\n    { value: '2', label: 'Honor', icon: <Trophy /> },\n    { value: '3', label: 'Batallas', icon: <Swords /> }\n];\n\nconst ranges = [\n    { value: '0', label: '1-100' },\n    { value: '1', label: '101-200' },\n    { value: '2', label: '201-300' },\n    { value: '3', label: '301-400' },\n    { value: '4', label: '401-500' },\n];\n\nexport function RankingTypeSelector() {\n    const router = useRouter();\n    const pathname = usePathname();\n    const searchParams = useSearchParams();\n    \n    const currentType = searchParams.get('type') || '0';\n    const currentRange = searchParams.get('range') || '0';\n    const isBattleRanking = currentType === '3';\n\n    const handleValueChange = (key: 'type' | 'range', value: string) => {\n        const params = new URLSearchParams(searchParams);\n        if (key === 'type') {\n            // Reset range when type changes\n            params.set('type', value);\n            params.delete('range');\n        } else {\n            params.set('range', value);\n        }\n        router.push(`${pathname}?${params.toString()}`);\n    };\n\n    return (\n        <div className=\"flex flex-col gap-2 w-full\">\n             <Tabs value={currentType} onValueChange={(value) => handleValueChange('type', value)} className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 h-auto\">\n                    {categories.map(cat => (\n                        <TabsTrigger key={cat.value} value={cat.value} className=\"gap-2 py-2\">\n                            {cat.icon}\n                            {cat.label}\n                        </TabsTrigger>\n                    ))}\n                </TabsList>\n            </Tabs>\n             {!isBattleRanking && (\n                <Tabs value={currentRange} onValueChange={(value) => handleValueChange('range', value)} className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-5\">\n                        {ranges.map(range => (\n                            <TabsTrigger key={range.value} value={range.value}>{range.label}</TabsTrigger>\n                        ))}\n                    </TabsList>\n                </Tabs>\n             )}\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "recruitment-status.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport type { FullColaReclutamiento } from \"@/lib/types\";\n\ntype RecruitmentStatusProps = {\n    recruitments: (FullColaReclutamiento & { propiedadNombre: string })[];\n};\n\nfunction formatTime(totalSeconds: number): string {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n    return [hours, minutes, seconds]\n        .map(v => v.toString().padStart(2, '0'))\n        .join(':');\n}\n\nfunction CountdownTimer({ label, endDate, onFinish }: {label: string, endDate: string, onFinish: () => void}) {\n    const [timeLeft, setTimeLeft] = useState('');\n\n    useEffect(() => {\n        const end = new Date(endDate).getTime();\n        const intervalId = setInterval(() => {\n            const now = new Date().getTime();\n            const difference = Math.floor((end - now) / 1000);\n\n            if (difference <= 0) {\n                setTimeLeft('00:00:00');\n                clearInterval(intervalId);\n                onFinish();\n            } else {\n                setTimeLeft(formatTime(difference));\n            }\n        }, 1000);\n        \n        const now = new Date().getTime();\n        const difference = Math.floor((end - now) / 1000);\n        setTimeLeft(formatTime(difference > 0 ? difference : 0));\n\n        return () => clearInterval(intervalId);\n    }, [endDate, onFinish]);\n\n    return (\n        <div className=\"flex justify-between items-center text-sm\">\n            <span>{label}</span>\n            <span className=\"font-mono text-accent\">{timeLeft}</span>\n        </div>\n    );\n}\n\nexport function RecruitmentStatus({ recruitments }: RecruitmentStatusProps) {\n    const router = useRouter();\n\n    const handleRefresh = () => {\n        router.refresh();\n    };\n\n    return (\n        <div className=\"bg-card text-card-foreground px-4 py-3 rounded-b-md space-y-2\">\n            {recruitments.length > 0 ? (\n                 recruitments.map(queueItem => (\n                    <CountdownTimer \n                        key={queueItem.id}\n                        label={`${queueItem.propiedadNombre}: ${queueItem.cantidad} x ${queueItem.tropaConfig.nombre}`}\n                        endDate={new Date(queueItem.fechaFinalizacion).toISOString()}\n                        onFinish={handleRefresh}\n                     />\n                ))\n            ) : (\n                <p className=\"text-muted-foreground text-center text-sm\">No hay reclutamientos en cola.</p>\n            )}\n        </div>\n    );\n}\n"
            },
            {
              "name": "recruitment-view.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport Image from \"next/image\"\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Clock, PlusCircle, Ban, Info, Loader2, Dumbbell, ShieldCheck, Warehouse, Wind, DollarSign, Minus, Plus } from \"lucide-react\"\nimport { iniciarReclutamiento } from \"@/lib/actions/troop.actions\"\nimport { useEffect, useState, useTransition, useMemo } from \"react\"\nimport { Alert, AlertDescription, AlertTitle } from \"../ui/alert\"\nimport { Terminal } from \"lucide-react\"\nimport { Input } from \"../ui/input\"\nimport { useProperty } from \"@/contexts/property-context\"\nimport { Dialog, DialogTrigger } from \"../ui/dialog\"\nimport { TroopDetailsModal } from \"./troop-details-modal\"\nimport { RECRUITMENT_TROOP_ORDER, TROOP_TYPE_DEFENSE } from \"@/lib/constants\"\nimport type { UserWithProgress, FullConfiguracionTropa, FullTropaUsuario } from \"@/lib/types\"\nimport { cn } from \"@/lib/utils\"\nimport { Slider } from \"../ui/slider\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from \"../ui/carousel\"\n\nfunction formatNumber(num: number | bigint): string {\n    const numberValue = Number(num);\n    if (numberValue < 1000) {\n      return numberValue.toString();\n    }\n    const suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n    const i = Math.floor(Math.log10(numberValue) / 3);\n    const shortValue = (numberValue / Math.pow(1000, i));\n    return shortValue.toFixed(i > 0 ? 1 : 0) + suffixes[i];\n  }\n\nfunction formatDuration(seconds: number): string {\n    if (seconds <= 0) return \"0s\";\n\n    const units: {name: string, seconds: number}[] = [\n        { name: 'd', seconds: 86400 },\n        { name: 'h', seconds: 3600 },\n        { name: 'm', seconds: 60 },\n        { name: 's', seconds: 1 }\n    ];\n\n    let remainingSeconds = seconds;\n    let result = '';\n    let parts = 0;\n\n    for (const unit of units) {\n        if (remainingSeconds >= unit.seconds && parts < 2) {\n            const amount = Math.floor(remainingSeconds / unit.seconds);\n            if (amount > 0) {\n                result += `${amount}${unit.name} `;\n                remainingSeconds %= unit.seconds;\n                parts++;\n            }\n        }\n    }\n\n    return result.trim() || '0s';\n}\n\ntype TroopWithStats = FullConfiguracionTropa & {\n    ataqueActual: number;\n    defensaActual: number;\n    capacidadActual: number;\n    velocidadActual: number;\n    salarioActual: number;\n}\n\ntype RecruitmentViewProps = {\n    troopConfigsWithStats: TroopWithStats[];\n    user: UserWithProgress;\n}\n\nfunction RecruitmentQueueAlert() {\n    const { selectedProperty } = useProperty();\n    const [tiempoRestante, setTiempoRestante] = useState(\"\");\n    const colaReclutamiento = selectedProperty?.colaReclutamiento;\n\n    useEffect(() => {\n        if (!colaReclutamiento) return;\n\n        const interval = setInterval(() => {\n            const ahora = new Date().getTime();\n            const fin = new Date(colaReclutamiento.fechaFinalizacion).getTime();\n            const diferencia = Math.max(0, fin - ahora);\n            setTiempoRestante(formatDuration(Math.floor(diferencia / 1000)));\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [colaReclutamiento]);\n\n    if (!selectedProperty || !colaReclutamiento) return null;\n\n    return (\n        <Alert>\n            <Terminal className=\"h-4 w-4\" />\n            <AlertTitle>Reclutamiento en curso en {selectedProperty?.nombre}</AlertTitle>\n            <AlertDescription>\n                Reclutando {colaReclutamiento.cantidad} x {colaReclutamiento.tropaConfig.nombre}. Tiempo restante: {tiempoRestante}\n            </AlertDescription>\n        </Alert>\n    )\n}\n\nfunction TroopForm({ troop, availableCount }: { troop: TroopWithStats, availableCount: number }) {\n    const { selectedProperty } = useProperty();\n    const { toast } = useToast();\n    const [cantidad, setCantidad] = useState(0);\n    const [isPending, startTransition] = useTransition();\n    \n    const colaReclutamientoActiva = !!selectedProperty?.colaReclutamiento;\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!selectedProperty || cantidad === 0) return;\n\n        startTransition(async () => {\n            const result = await iniciarReclutamiento(selectedProperty.id, troop.id, cantidad);\n            if (result?.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else {\n                toast({ title: '\\u00c9xito', description: `Reclutando ${cantidad} x ${troop.nombre}.` });\n                setCantidad(0);\n            }\n        });\n    }\n    \n    return (\n        <form onSubmit={handleSubmit} className=\"flex items-center gap-2\">\n            <div className='flex items-center gap-1 w-full'>\n                <Slider\n                    value={[cantidad]}\n                    onValueChange={(value) => setCantidad(value[0])}\n                    max={availableCount}\n                    step={1}\n                    className=\"flex-1\"\n                    disabled={colaReclutamientoActiva || isPending}\n                />\n                 <Input \n                    type='number'\n                    min=\"0\"\n                    max={availableCount}\n                    value={cantidad}\n                    onChange={(e) => setCantidad(parseInt(e.target.value) || 0)}\n                    className='h-8 w-20 text-center'\n                    disabled={colaReclutamientoActiva || isPending}\n                />\n            </div>\n            <Button type=\"submit\" variant=\"destructive\" size=\"sm\" disabled={colaReclutamientoActiva || isPending || cantidad === 0}>\n                {isPending ? <Loader2 className=\"animate-spin\" /> : (colaReclutamientoActiva ? <Ban/> : <PlusCircle />)}\n            </Button>\n        </form>\n    )\n}\n\nexport function RecruitmentView({ user, troopConfigsWithStats }: RecruitmentViewProps) {\n  const { selectedProperty } = useProperty();\n\n  if (!selectedProperty) {\n    return (\n      <div className=\"main-view\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Reclutamiento</h2>\n        <Card>\n          <CardContent className=\"p-6\">\n              <p>Por favor, selecciona una propiedad para reclutar tropas.</p>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const userTroopsMap = new Map(selectedProperty.TropaUsuario.map((t: FullTropaUsuario) => [t.configuracionTropa.id, t]));\n  const userTrainingsMap = new Map(user.entrenamientos.map(t => [t.configuracionEntrenamientoId, t.nivel]));\n\n  const troopsWithData = troopConfigsWithStats.map(config => {\n    const userTropa = userTroopsMap.get(config.id);\n    const requirements = config.requisitos || [];\n    const meetsRequirements = requirements.every(reqId => (userTrainingsMap.get(reqId) || 0) >= 1);\n    \n    return {\n      ...config,\n      count: userTropa?.cantidad || 0,\n      meetsRequirements,\n    }\n  });\n\n  const unlockedTroops = troopsWithData.filter(t => t.meetsRequirements);\n\n  const sortedTroops = [...unlockedTroops]\n    .filter(t => t.tipo !== TROOP_TYPE_DEFENSE)\n    .sort((a, b) => {\n        const indexA = RECRUITMENT_TROOP_ORDER.indexOf(a.id);\n        const indexB = RECRUITMENT_TROOP_ORDER.indexOf(b.id);\n        if (indexA === -1) return 1;\n        if (indexB === -1) return -1;\n        return indexA - indexB;\n    });\n\n  return (\n    <div className=\"space-y-4\">\n       <div className=\"flex items-center justify-between\">\n            <div>\n                <h2 className=\"text-3xl font-bold tracking-tight\">Reclutamiento de Tropas</h2>\n                <p className=\"text-muted-foreground\">\n                    Reclutando en: {selectedProperty.nombre}.\n                </p>\n            </div>\n       </div>\n        <RecruitmentQueueAlert />\n        <Carousel\n        opts={{\n          align: \"start\",\n        }}\n        className=\"w-full\"\n      >\n        <CarouselContent>\n              {sortedTroops.map((troop, index) => (\n                <CarouselItem key={troop.id} className=\"md:basis-1/2 lg:basis-1/3\">\n                <Dialog>\n                    <Card className=\"troop-card animate-fade-in-up\" style={{ animationDelay: `${index * 50}ms`}}>\n                        <CardHeader className=\"relative p-0 h-32 overflow-hidden\">\n                           <Image\n                                src={troop.urlImagen || \"https://placehold.co/200x128.png\"}\n                                alt={troop.nombre}\n                                fill\n                                className=\"object-contain\"\n                                data-ai-hint=\"mafia character unit\"\n                            />\n                             <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent p-4 flex flex-col justify-end\">\n                                <CardTitle className=\"text-white [text-shadow:0_1px_3px_rgb(0_0_0_/_0.5)]\">{troop.nombre}</CardTitle>\n                                <div className=\"text-sm text-primary-foreground/90 font-bold [text-shadow:0_1px_3px_rgb(0_0_0_/_0.5)]\">\n                                    Posees: <span className=\"text-primary-foreground\">{troop.count}</span>\n                                </div>\n                            </div>\n                            <DialogTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 absolute top-2 right-2 text-white/80 hover:text-white hover:bg-white/20\">\n                                    <Info className=\"h-5 w-5\" />\n                                    <span className=\"sr-only\">Detalles</span>\n                                </Button>\n                            </DialogTrigger>\n                        </CardHeader>\n\n                        <CardContent className=\"flex-grow space-y-3 p-4\">\n                             <div className=\"grid grid-cols-3 gap-x-2 gap-y-1 text-center text-xs\">\n                                <div title=\"Ataque\"><Dumbbell className=\"h-3 w-3 mx-auto mb-1 text-red-500\"/>{formatNumber(troop.ataqueActual)}</div>\n                                <div title=\"Defensa\"><ShieldCheck className=\"h-3 w-3 mx-auto mb-1 text-blue-500\"/>{formatNumber(troop.defensaActual)}</div>\n                                <div title=\"Capacidad de Carga\"><Warehouse className=\"h-3 w-3 mx-auto mb-1 text-yellow-500\"/>{formatNumber(troop.capacidadActual)}</div>\n                                <div title=\"Velocidad\"><Wind className=\"h-3 w-3 mx-auto mb-1 text-green-500\"/>{formatNumber(troop.velocidadActual)}</div>\n                                <div title=\"Salario\"><DollarSign className=\"h-3 w-3 mx-auto mb-1 text-gray-400\"/>{formatNumber(troop.salarioActual)}</div>\n                                <div title=\"Tiempo\"><Clock className=\"h-3 w-3 mx-auto mb-1 text-gray-400\" />{formatDuration(troop.duracion)}</div>\n                            </div>\n                            <div className=\"flex items-center justify-center gap-x-3 text-sm\">\n                                {Number(troop.costoArmas) > 0 && <div className=\"flex items-center gap-1.5\" title={`${Number(troop.costoArmas).toLocaleString('de-DE')} Armas`}><Image src=\"/img/recursos/armas.svg\" alt=\"Armas\" width={16} height={16} /><span>{formatNumber(troop.costoArmas)}</span></div>}\n                                {Number(troop.costoMunicion) > 0 && <div className=\"flex items-center gap-1.5\" title={`${Number(troop.costoMunicion).toLocaleString('de-DE')} Munici\u00f3n`}><Image src=\"/img/recursos/municion.svg\" alt=\"Munici\u00f3n\" width={16} height={16} /><span>{formatNumber(troop.costoMunicion)}</span></div>}\n                                {Number(troop.costoDolares) > 0 && <div className=\"flex items-center gap-1.5\" title={`${Number(troop.costoDolares).toLocaleString('de-DE')} D\u00f3lares`}><Image src=\"/img/recursos/dolares.svg\" alt=\"D\u00f3lares\" width={16} height={16} /><span>{formatNumber(troop.costoDolares)}</span></div>}\n                            </div>\n                        </CardContent>\n                        <CardFooter className=\"p-4 pt-0\">\n                           <TroopForm troop={troop} availableCount={troop.count} />\n                        </CardFooter>\n                    </Card>\n                    <TroopDetailsModal \n                        troop={troop}\n                        user={user}\n                        ataqueActual={troop.ataqueActual}\n                        defensaActual={troop.defensaActual}\n                        capacidadActual={troop.capacidadActual}\n                        velocidadActual={troop.velocidadActual}\n                        salarioActual={troop.salarioActual}\n                     />\n                </Dialog>\n                </CarouselItem>\n              ))}\n        </CarouselContent>\n        <CarouselPrevious />\n        <CarouselNext />\n      </Carousel>\n    </div>\n  )\n}\n\n    "
            },
            {
              "name": "resource-bar.tsx",
              "type": "file",
              "content": "\n\n'use client'\n\nimport { LiveClock } from \"./live-clock\";\nimport type { UserWithProgress } from '@/lib/types';\nimport { useProperty } from '@/contexts/property-context';\nimport Image from \"next/image\";\nimport { calculateStorageCapacity, calcularProduccionTotalPorSegundo, ProductionData } from \"@/lib/formulas/room-formulas\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { useEffect, useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from \"@/components/ui/dialog\";\nimport { Button } from \"../ui/button\";\nimport { Separator } from \"../ui/separator\";\nimport { Progress } from \"../ui/progress\";\n\nconst resourceIcons: { [key: string]: string } = {\n    armas: '/img/recursos/armas.svg',\n    municion: '/img/recursos/municion.svg',\n    alcohol: '/img/recursos/alcohol.svg',\n    dolares: '/img/recursos/dolares.svg',\n};\n\nfunction AnimatedNumber({ value }: { value: number }) {\n    const [currentValue, setCurrentValue] = useState(value);\n\n    useEffect(() => {\n        const diff = value - currentValue;\n        if (Math.abs(diff) < 1) {\n            setCurrentValue(value);\n            return;\n        }\n\n        let start: number | null = null;\n        const duration = 1000; // ms\n\n        const step = (timestamp: number) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const percentage = Math.min(progress / duration, 1);\n            const nextValue = currentValue + diff * percentage;\n            \n            if (progress < duration) {\n                setCurrentValue(nextValue);\n                requestAnimationFrame(step);\n            } else {\n                 setCurrentValue(value); // Ensure it ends on the exact value\n            }\n        };\n\n        requestAnimationFrame(step);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [value]);\n\n    return <span>{Math.floor(currentValue).toLocaleString('de-DE')}</span>;\n}\n\n\nfunction formatNumber(num: number | bigint | undefined) {\n    if (typeof num === 'undefined') return '0';\n    const numberValue = Number(num);\n    return Math.floor(numberValue).toLocaleString('de-DE');\n}\n\nfunction formatDuration(totalSeconds: number): string {\n    if (totalSeconds <= 0 || !isFinite(totalSeconds)) return \"\u221e\";\n    \n    const d = Math.floor(totalSeconds / (3600*24));\n    const h = Math.floor(totalSeconds % (3600*24) / 3600);\n    const m = Math.floor(totalSeconds % 3600 / 60);\n\n    let result = '';\n    if (d > 0) result += `${d}d `;\n    if (h > 0) result += `${h}h `;\n    if (m > 0 && d === 0) result += `${m}m`; // Only show minutes if days are not shown\n    \n    return result.trim() || \"< 1m\";\n}\n\ninterface ResourceBarProps {\n    user: UserWithProgress | null;\n}\n\nconst ResourceTooltipContent = ({ resource, capacity, production, safeStorage }: { resource: any, capacity: number, production: ProductionData, safeStorage: number }) => {\n    const timeToFill = production.produccionNeta > 0 ? (capacity - Number(resource.value)) / (production.produccionNeta / 3600) : Infinity;\n\n    return (\n        <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Producci\u00f3n:</span>\n                <span className=\"font-mono text-green-400\">+{formatNumber(production.produccionBruta)}/h</span>\n            </div>\n             {production.consumoTotal > 0 && (\n                <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Consumo:</span>\n                    <span className=\"font-mono text-destructive\">-{formatNumber(production.consumoTotal)}/h</span>\n                </div>\n            )}\n             {production.consumoTotal > 0 && (\n                 <>\n                    <Separator className=\"my-1\"/>\n                     <div className=\"flex justify-between items-center font-bold\">\n                        <span>Balance final:</span>\n                        <span className={`font-mono ${production.produccionNeta >= 0 ? 'text-green-400' : 'text-destructive'}`}>\n                            {production.produccionNeta >= 0 ? '+' : ''}{formatNumber(production.produccionNeta)}/h\n                        </span>\n                    </div>\n                 </>\n             )}\n            <Separator className=\"my-2\"/>\n             <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Almacenamiento:</span>\n                <span className=\"font-mono\">{formatNumber(capacity)}</span>\n            </div>\n             <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Seguro:</span>\n                <span className=\"font-mono\">{formatNumber(safeStorage)}</span>\n            </div>\n             <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Tiempo hasta llenar:</span>\n                <span className=\"font-mono\">{formatDuration(timeToFill)}</span>\n            </div>\n        </div>\n    )\n}\n\nexport function ResourceBar({ user }: ResourceBarProps) {\n    const { selectedProperty } = useProperty();\n    const isMobile = useIsMobile();\n\n    if (!user || !selectedProperty) {\n        return (\n            <div className=\"w-full bg-black/50 backdrop-blur-md text-white p-2\">\n                <div className=\"container mx-auto flex items-center justify-center\">\n                    <p>Selecciona una propiedad para ver tus recursos.</p>\n                </div>\n            </div>\n        );\n    }\n\n    const capacity = calculateStorageCapacity(selectedProperty);\n    const production = calcularProduccionTotalPorSegundo(selectedProperty);\n\n    const resources = [\n        { name: 'ARMAS', key: 'armas', value: selectedProperty.armas, icon: resourceIcons.armas, capacity: capacity.armas, production: production.armas, safe: Math.floor(capacity.armas * 0.1) },\n        { name: 'MUNICION', key: 'municion', value: selectedProperty.municion, icon: resourceIcons.municion, capacity: capacity.municion, production: production.municion, safe: Math.floor(capacity.municion * 0.1) },\n        { name: 'ALCOHOL', key: 'alcohol', value: selectedProperty.alcohol, icon: resourceIcons.alcohol, capacity: capacity.alcohol, production: production.alcohol, safe: Math.floor(capacity.alcohol * 0.1) },\n        { name: 'DOLARES', key: 'dolares', value: selectedProperty.dolares, icon: resourceIcons.dolares, capacity: capacity.dolares, production: production.dolares, safe: Math.floor(capacity.dolares * 0.1) },\n    ];\n\n    return (\n        <header className=\"w-full bg-black/50 backdrop-blur-md text-white shadow-md z-20 border-b border-white/10\" suppressHydrationWarning>\n            <div className=\"container mx-auto flex h-full items-center justify-between p-2\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 items-center justify-around gap-x-2 sm:gap-x-4 gap-y-2 w-full\">\n                    {resources.map((res) => {\n                         const resourceName = res.name.charAt(0) + res.name.slice(1).toLowerCase();\n                         const percentage = res.capacity > 0 ? (Number(res.value) / res.capacity) * 100 : 0;\n                         const progressColor = percentage > 95 ? \"bg-red-600\" : percentage > 80 ? \"bg-yellow-500\" : \"bg-primary\";\n                         \n                         const trigger = (\n                             <div className=\"flex flex-col items-center gap-0.5 w-full\">\n                                <div className=\"flex items-center gap-1 sm:gap-2\">\n                                     <Image src={res.icon} alt={res.name} width={16} height={16} className=\"h-4 w-4\" />\n                                     <span className=\"text-xs font-semibold tracking-wider uppercase text-muted-foreground\">{res.name}</span>\n                                 </div>\n                                <span className=\"text-lg sm:text-xl font-bold tabular-nums text-foreground font-mono\">\n                                     <AnimatedNumber value={Number(res.value)} />\n                                </span>\n                                <Progress value={percentage} className=\"h-1 mt-1 bg-muted/50\" indicatorClassName={progressColor} />\n                             </div>\n                        );\n\n                        if(isMobile) {\n                            return (\n                                <Dialog key={res.name}>\n                                    <DialogTrigger asChild>\n                                        {trigger}\n                                    </DialogTrigger>\n                                    <DialogContent>\n                                        <DialogHeader>\n                                            <DialogTitle>Detalles de {resourceName}</DialogTitle>\n                                        </DialogHeader>\n                                        <ResourceTooltipContent resource={res} capacity={res.capacity} production={res.production} safeStorage={res.safe} />\n                                         <DialogFooter>\n                                            <DialogClose asChild>\n                                                <Button type=\"button\" variant=\"secondary\">Cerrar</Button>\n                                            </DialogClose>\n                                        </DialogFooter>\n                                    </DialogContent>\n                                </Dialog>\n                            )\n                        }\n\n                        return (\n                            <TooltipProvider key={res.name} delayDuration={0}>\n                                 <Tooltip>\n                                    <TooltipTrigger asChild>{trigger}</TooltipTrigger>\n                                    <TooltipContent>\n                                        <div className=\"p-2 space-y-2\">\n                                            <h3 className=\"font-bold text-lg text-primary\">{resourceName}</h3>\n                                            <Separator />\n                                            <ResourceTooltipContent resource={res} capacity={res.capacity} production={res.production} safeStorage={res.safe} />\n                                        </div>\n                                    </TooltipContent>\n                                </Tooltip>\n                            </TooltipProvider>\n                        )\n                    })}\n                </div>\n                <div className=\"hidden lg:flex\">\n                     <LiveClock />\n                </div>\n            </div>\n        </header>\n    );\n}\n"
            },
            {
              "name": "resources-view.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useState, useMemo } from \"react\";\nimport { calculateStorageCapacity, calculateSafeStorage, calcularProduccionTotalPorSegundo } from \"@/lib/formulas/room-formulas\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport Image from \"next/image\";\nimport type { UserWithProgress, FullPropiedad } from \"@/lib/types\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"../ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { resourceIcons } from \"@/lib/constants\";\nimport { cn } from \"@/lib/utils\";\nimport { Progress } from \"../ui/progress\";\n\nconst resourceNames: { [key: string]: string } = {\n    armas: \"Armas\",\n    municion: \"Munici\u00f3n\",\n    alcohol: \"Alcohol\",\n    dolares: \"D\u00f3lares\",\n};\n\nfunction formatNumber(num: number): string {\n    return Math.floor(num).toLocaleString('de-DE');\n}\n\nfunction formatProduction(num: number): string {\n    const sign = num >= 0 ? '+' : '';\n    return `${sign}${formatNumber(num)}`;\n}\n\ninterface ResourcesViewProps {\n    user: UserWithProgress;\n}\n\nexport function ResourcesView({ user }: ResourcesViewProps) {\n    const [selectedPropertyId, setSelectedPropertyId] = useState('all');\n\n    const productionData = useMemo(() => {\n        const propertiesToCalc = selectedPropertyId === 'all' \n            ? user.propiedades\n            : user.propiedades.filter((p: FullPropiedad) => p.id === selectedPropertyId);\n        \n        return propertiesToCalc.reduce((acc, propiedad) => {\n            const prod = calcularProduccionTotalPorSegundo(propiedad);\n            acc.armas += prod.armas.produccionNeta;\n            acc.municion += prod.municion.produccionNeta;\n            acc.alcohol += prod.alcohol.produccionNeta;\n            acc.dolares += prod.dolares.produccionNeta;\n            return acc;\n        }, { armas: 0, municion: 0, alcohol: 0, dolares: 0 });\n\n    }, [user.propiedades, selectedPropertyId]);\n\n    const storageAndResourceData = useMemo(() => {\n        const propertiesToCalc = selectedPropertyId === 'all'\n            ? user.propiedades\n            : user.propiedades.filter((p: FullPropiedad) => p.id === selectedPropertyId);\n\n        if (propertiesToCalc.length === 0) {\n            return {\n                armas: { capacidad: 0, seguro: 0, actual: 0 },\n                municion: { capacidad: 0, seguro: 0, actual: 0 },\n                alcohol: { capacidad: 0, seguro: 0, actual: 0 },\n                dolares: { capacidad: 0, seguro: 0, actual: 0 }\n            };\n        }\n\n        return propertiesToCalc.reduce((acc, prop) => {\n            const capacity = calculateStorageCapacity(prop);\n            const safe = calculateSafeStorage(prop);\n            acc.armas.capacidad += capacity.armas;\n            acc.armas.seguro += safe.armas;\n            acc.armas.actual += Number(prop.armas);\n            acc.municion.capacidad += capacity.municion;\n            acc.municion.seguro += safe.municion;\n            acc.municion.actual += Number(prop.municion);\n            acc.alcohol.capacidad += capacity.alcohol;\n            acc.alcohol.seguro += safe.alcohol;\n            acc.alcohol.actual += Number(prop.alcohol);\n            acc.dolares.capacidad += capacity.dolares;\n            acc.dolares.seguro += safe.dolares;\n            acc.dolares.actual += Number(prop.dolares);\n            return acc;\n        }, {\n            armas: { capacidad: 0, seguro: 0, actual: 0 },\n            municion: { capacidad: 0, seguro: 0, actual: 0 },\n            alcohol: { capacidad: 0, seguro: 0, actual: 0 },\n            dolares: { capacidad: 0, seguro: 0, actual: 0 }\n        });\n    }, [user.propiedades, selectedPropertyId]);\n\n    const productionTableRows = [\n        { label: \"Total por hora\", multiplier: 1 },\n        { label: \"Total por d\u00eda\", multiplier: 24 },\n        { label: \"Total por semana\", multiplier: 24 * 7 },\n    ];\n    \n    const storageCards = [\n        { title: \"Almac\u00e9n de Armas\", resourceKey: \"armas\" },\n        { title: \"Dep\u00f3sito\", resourceKey: \"municion\" },\n        { title: \"Almac\u00e9n de Alcohol\", resourceKey: \"alcohol\" },\n        { title: \"Caja Fuerte\", resourceKey: \"dolares\" },\n    ];\n\n    return (\n        <div className=\"space-y-4 mt-4 animate-fade-in\">\n            <Select value={selectedPropertyId} onValueChange={setSelectedPropertyId}>\n                <SelectTrigger className=\"w-full md:w-[280px]\">\n                    <SelectValue placeholder=\"Filtrar por propiedad...\" />\n                </SelectTrigger>\n                <SelectContent>\n                    <SelectItem value=\"all\">Todas las propiedades</SelectItem>\n                    {user.propiedades.map((prop: FullPropiedad) => (\n                        <SelectItem key={prop.id} value={prop.id}>{prop.nombre}</SelectItem>\n                    ))}\n                </SelectContent>\n            </Select>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle>Resumen de Producci\u00f3n</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead className=\"w-[150px]\"></TableHead>\n                                {Object.keys(resourceNames).map(key => (\n                                    <TableHead key={key} className=\"text-right flex items-center justify-end gap-2\">\n                                        <Image src={resourceIcons[key]} alt={resourceNames[key]} width={16} height={16} />\n                                        {resourceNames[key]}\n                                    </TableHead>\n                                ))}\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {productionTableRows.map(row => (\n                                <TableRow key={row.label} className=\"hover:bg-muted/50\">\n                                    <TableCell className=\"font-medium\">{row.label}</TableCell>\n                                    {Object.keys(productionData).map(key => {\n                                        const value = productionData[key as keyof typeof productionData] * row.multiplier;\n                                        return (\n                                            <TableCell key={key} className={cn(\"text-right font-mono\", value >= 0 ? 'text-green-400' : 'text-destructive')}>\n                                                {formatProduction(value)}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                 {storageCards.map((card, index) => {\n                     const data = storageAndResourceData[card.resourceKey as keyof typeof storageAndResourceData];\n                     const progress = data.capacidad > 0 ? (data.actual / data.capacidad) * 100 : 0;\n                     const safeProgress = data.capacidad > 0 ? (data.seguro / data.capacidad) * 100 : 0;\n                     return (\n                        <Card key={card.title} className=\"animate-fade-in-up relative overflow-hidden\" style={{ animationDelay: `${index * 100}ms`}}>\n                             <CardHeader className=\"flex-row items-center gap-3\">\n                                <Image src={resourceIcons[card.resourceKey]} alt={card.title} width={32} height={32} />\n                                <CardTitle>{card.title}</CardTitle>\n                             </CardHeader>\n                            <CardContent className=\"space-y-3\">\n                                <Progress value={progress} className=\"h-3\" indicatorClassName=\"bg-primary/80\" />\n                                <div className=\"flex justify-between items-baseline\">\n                                    <span className=\"text-muted-foreground text-sm\">Capacidad:</span>\n                                    <span className=\"font-bold text-lg font-mono\">{formatNumber(data.capacidad)}</span>\n                                </div>\n                                 <div className=\"flex justify-between items-baseline\">\n                                    <span className=\"text-muted-foreground text-sm\">Seguro:</span>\n                                    <span className=\"font-bold text-lg font-mono\">{formatNumber(data.seguro)}</span>\n                                </div>\n                                <div className=\"flex justify-between items-baseline\">\n                                    <span className=\"text-muted-foreground text-sm\">Actual:</span>\n                                    <span className=\"font-bold text-lg font-mono text-primary\">{formatNumber(data.actual)}</span>\n                                </div>\n                            </CardContent>\n                        </Card>\n                     )\n                 })}\n            </div>\n        </div>\n    );\n}\n"
            },
            {
              "name": "room-card.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport Image from \"next/image\"\nimport { Dialog, DialogTrigger } from \"@/components/ui/dialog\"\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Clock, PlusCircle, Ban, Info, Loader2 } from \"lucide-react\"\nimport { RoomDetailsModal } from \"./room-details-modal\"\nimport { cn, formatDuration, formatNumber } from \"@/lib/utils\"\nimport { Progress } from \"../ui/progress\"\n\n// This type should be defined in a central place like `src/lib/types/index.ts`\n// but for now, we define it here based on the data from RoomsView.\nexport type RoomCardData = {\n    id: string;\n    nombre: string;\n    descripcion: string;\n    urlImagen: string;\n    nivel: number;\n    nivelProyectado: number;\n    nivelSiguiente: number;\n    costos: {\n        armas: number;\n        municion: number;\n        dolares: number;\n        alcohol: number;\n    };\n    puntos: number;\n    produccionBase: number;\n    produccionRecurso: string | null;\n    tiempo: number;\n    enConstruccion: boolean;\n    construccionActiva?: {\n        id: string;\n        duracion: number;\n    };\n    meetsRequirements: boolean;\n    requirementsText: string | null;\n};\n\ninterface RoomCardProps {\n    room: RoomCardData;\n    timeLeft: number | undefined;\n    isQueueFull: boolean;\n    isSubmitting: boolean;\n    onUpgrade: (roomId: string) => void;\n    index: number;\n}\n\nexport function RoomCard({ room, timeLeft, isQueueFull, isSubmitting, onUpgrade, index }: RoomCardProps) {\n    const progress = room.construccionActiva && timeLeft !== undefined ? 100 - (timeLeft / room.construccionActiva.duracion) * 100 : 0;\n\n    return (\n        <Dialog>\n            <Card className={cn(\n                \"room-card animate-fade-in-up flex flex-col\",\n                isSubmitting && \"border-amber-500 animate-pulse\",\n                !room.meetsRequirements && \"opacity-60\"\n            )}\n                style={{ animationDelay: `${index * 50}ms` }}\n            >\n                <CardHeader className=\"relative p-0 overflow-hidden h-32\">\n                    <Image\n                        src={room.urlImagen || \"https://placehold.co/200x128.png\"}\n                        alt={room.nombre}\n                        fill\n                        className=\"object-cover\"\n                        data-ai-hint=\"game building\"\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent p-4 flex flex-col justify-end\">\n                        <CardTitle className=\"text-white [text-shadow:0_1px_3px_rgb(0_0_0_/_0.5)]\">{room.nombre}</CardTitle>\n                        <div className=\"text-sm text-primary-foreground/90 font-bold [text-shadow:0_1px_3px_rgb(0_0_0_/_0.5)]\">\n                            Nivel {room.nivelProyectado}\n                        </div>\n                    </div>\n                </CardHeader>\n                <CardContent className=\"flex-grow space-y-3 p-4\">\n                    {room.enConstruccion && room.construccionActiva && timeLeft !== undefined && (\n                        <div className=\"space-y-1\">\n                            <div className=\"flex justify-between items-baseline text-xs\">\n                                <span className=\"text-amber-500 font-semibold\">En progreso...</span>\n                                <span className=\"font-mono\">{formatDuration(timeLeft)}</span>\n                            </div>\n                            <Progress value={progress} className=\"h-2 bg-amber-500/20\" indicatorClassName=\"bg-amber-500\" />\n                        </div>\n                    )}\n                    <p className=\"text-sm text-muted-foreground line-clamp-2 min-h-[40px]\">{room.descripcion}</p>\n                    <div className=\"grid grid-cols-3 gap-x-3 text-sm\">\n                        {room.costos.armas > 0 && <div className=\"flex items-center gap-1.5\" title={`${room.costos.armas.toLocaleString('de-DE')} Armas`}><Image src=\"/img/recursos/armas.svg\" alt=\"Armas\" width={16} height={16} /><span>{formatNumber(room.costos.armas)}</span></div>}\n                        {room.costos.municion > 0 && <div className=\"flex items-center gap-1.5\" title={`${room.costos.municion.toLocaleString('de-DE')} Munici\u00f3n`}><Image src=\"/img/recursos/municion.svg\" alt=\"Munici\u00f3n\" width={16} height={16} /><span>{formatNumber(room.costos.municion)}</span></div>}\n                        {room.costos.dolares > 0 && <div className=\"flex items-center gap-1.5\" title={`${room.costos.dolares.toLocaleString('de-DE')} D\u00f3lares`}><Image src=\"/img/recursos/dolares.svg\" alt=\"D\u00f3lares\" width={16} height={16} /><span>{formatNumber(room.costos.dolares)}</span></div>}\n                    </div>\n                    <div className=\"flex items-center gap-1.5 text-xs text-muted-foreground\">\n                        <Clock className=\"h-3 w-3\" />\n                        <span>{formatDuration(room.tiempo)}</span>\n                    </div>\n                </CardContent>\n                <CardFooter className=\"p-4 pt-0\">\n                    <div className=\"flex items-center gap-2 w-full\">\n                        <DialogTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9\">\n                                <Info className=\"h-5 w-5\" />\n                                <span className=\"sr-only\">Detalles</span>\n                            </Button>\n                        </DialogTrigger>\n                        <form className=\"flex-grow\" action={() => onUpgrade(room.id)}>\n                            {room.meetsRequirements ? (\n                                <Button type=\"submit\" variant=\"outline\" size=\"sm\" className=\"w-full\" disabled={isQueueFull || isSubmitting}>\n                                    {isSubmitting ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : (isQueueFull ? <Ban className=\"mr-2 h-4 w-4\" /> : <PlusCircle className=\"mr-2 h-4 w-4\" />)}\n                                    {isSubmitting ? 'Enviando...' : (isQueueFull ? 'Cola llena' : `Ampliar a Nvl ${room.nivelSiguiente}`)}\n                                </Button>\n                            ) : (\n                                <div className=\"text-xs text-destructive text-center p-2 bg-destructive/10 rounded-md\">\n                                    <p className=\"font-bold\">Requisitos no cumplidos:</p>\n                                    <p>{room.requirementsText}</p>\n                                </div>\n                            )}\n                        </form>\n                    </div>\n                </CardFooter>\n                 <RoomDetailsModal room={{\n                    ...room,\n                    nivel: room.nivelProyectado,\n                    costoArmas: BigInt(room.costos.armas),\n                    costoMunicion: BigInt(room.costos.municion),\n                    costoDolares: BigInt(room.costos.dolares),\n                    duracion: room.tiempo,\n                    // Estos son campos que necesita RoomWithLevel pero no est\u00e1n en RoomCardData\n                    // Se pueden a\u00f1adir con valores por defecto o traerlos desde el servidor si son necesarios\n                    requisitos: [],\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                }} />\n            </Card>\n        </Dialog>\n    )\n}\n"
            },
            {
              "name": "room-details-modal.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport Image from 'next/image';\nimport { DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogClose, DialogFooter } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { calcularCostosNivel, calcularProduccionRecurso } from '@/lib/formulas/room-formulas';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { Separator } from '../ui/separator';\nimport { Button } from '../ui/button';\nimport type { FullConfiguracionHabitacion } from '@/lib/types';\n\ntype RoomWithLevel = FullConfiguracionHabitacion & { nivel: number };\n\ninterface RoomDetailsModalProps {\n  room: RoomWithLevel;\n}\n\nfunction formatNumber(num: number): string {\n    return num.toLocaleString('de-DE');\n}\n\nfunction getBenefitText(roomId: string, level: number): string {\n    if (!roomId) return '-';\n    \n    // Simplificado, en un futuro se puede hacer m\u00e1s din\u00e1mico\n    if (roomId.includes('almacen') || roomId.includes('deposito') || roomId.includes('caja_fuerte')) {\n        return `+${formatNumber(level * 5000)} Capacidad`;\n    }\n    if (roomId === 'oficina_del_jefe') return `-${level * 2}% Tiempo const.`;\n    if (roomId === 'escuela_especializacion') return `-${level * 2}% Tiempo entren.`;\n    if (roomId === 'campo_de_entrenamiento') return `-${level * 5}% Tiempo reclut.`;\n    if (roomId.includes('seguridad') || roomId.includes('torreta') || roomId.includes('minas')) return `+${level * 5}% Defensa`;\n\n    return 'Beneficio mejorado';\n}\n\nfunction CostList({ costos }: { costos: { armas: number, municion: number, dolares: number }}) {\n    return (\n        <div className=\"flex flex-col gap-1 sm:grid sm:grid-cols-3 sm:gap-x-2 text-xs\">\n            {costos.armas > 0 && <div className=\"flex items-center gap-1.5\" title='Armas'><Image src=\"/img/recursos/armas.svg\" alt=\"Armas\" width={14} height={14} /><span>{formatNumber(costos.armas)}</span></div>}\n            {costos.municion > 0 && <div className=\"flex items-center gap-1.5\" title='Munici\u00f3n'><Image src=\"/img/recursos/municion.svg\" alt=\"Munici\u00f3n\" width={14} height={14} /><span>{formatNumber(costos.municion)}</span></div>}\n            {costos.dolares > 0 && <div className=\"flex items-center gap-1.5\" title='D\u00f3lares'><Image src=\"/img/recursos/dolares.svg\" alt=\"D\u00f3lares\" width={14} height={14} /><span>{formatNumber(costos.dolares)}</span></div>}\n        </div>\n    )\n}\n\nexport function RoomDetailsModal({ room }: RoomDetailsModalProps) {\n  const projectionLevels = Array.from({ length: 5 }, (_, i) => room.nivel + i + 1);\n\n  return (\n    <DialogContent className=\"max-w-3xl w-full p-0 flex flex-col h-full sm:h-auto max-h-screen\">\n        <DialogHeader className=\"p-6 pb-4 shrink-0\">\n            <div className=\"flex flex-col sm:flex-row items-start gap-4\">\n            <div className=\"w-24 h-20 relative rounded-md overflow-hidden border flex-shrink-0\">\n                <Image src={room.urlImagen} alt={room.nombre} fill className=\"object-cover\" data-ai-hint=\"game building icon\" />\n            </div>\n            <div className=\"flex-grow\">\n                <DialogTitle className=\"text-2xl\">{room.nombre}</DialogTitle>\n                <DialogDescription>\n                Nivel actual: <span className=\"font-bold text-primary\">{room.nivel}</span>\n                </DialogDescription>\n                <p className=\"text-sm text-muted-foreground mt-2\">{room.descripcion}</p>\n            </div>\n            </div>\n        </DialogHeader>\n       \n        <ScrollArea className=\"flex-grow min-h-0 px-6\">\n            <h3 className=\"font-semibold mb-2\">Proyecci\u00f3n de Mejoras</h3>\n            \n            {/* Vista de tabla para escritorio */}\n            <Table className=\"hidden sm:table\">\n            <TableHeader>\n                <TableRow>\n                <TableHead className=\"w-[80px]\">Nivel</TableHead>\n                <TableHead>Costos</TableHead>\n                <TableHead className=\"text-right\">Producci\u00f3n / Beneficio</TableHead>\n                </TableRow>\n            </TableHeader>\n            <TableBody>\n                {projectionLevels.map((level) => {\n                const costos = calcularCostosNivel(level, room);\n                const produccion = room.produccionRecurso \n                    ? calcularProduccionRecurso(room.id, level)\n                    : 0;\n\n                return (\n                    <TableRow key={level}>\n                    <TableCell className=\"font-medium text-primary\">{level}</TableCell>\n                    <TableCell>\n                        <CostList costos={costos} />\n                    </TableCell>\n                    <TableCell className=\"text-right text-green-400 font-mono text-sm\">\n                        {produccion > 0 \n                        ? `+${formatNumber(produccion)}/h`\n                        : getBenefitText(room.id, level)\n                        }\n                    </TableCell>\n                    </TableRow>\n                );\n                })}\n            </TableBody>\n            </Table>\n\n            {/* Vista de lista/tarjetas para m\u00f3vil */}\n            <div className=\"sm:hidden space-y-4\">\n                {projectionLevels.map((level) => {\n                    const costos = calcularCostosNivel(level, room);\n                    const produccion = room.produccionRecurso\n                        ? calcularProduccionRecurso(room.id, level)\n                        : 0;\n                    \n                    return (\n                        <div key={level} className=\"p-3 border rounded-lg\">\n                            <div className=\"flex justify-between items-center mb-2\">\n                                <span className=\"font-bold text-primary\">Nivel {level}</span>\n                                <span className=\"text-sm text-green-400 font-mono\">\n                                    {produccion > 0 \n                                      ? `+${formatNumber(produccion)}/h`\n                                      : getBenefitText(room.id, level)\n                                    }\n                                </span>\n                            </div>\n                             <Separator className=\"my-2\" />\n                            <div className=\"text-xs text-muted-foreground mb-1\">Costos:</div>\n                            <CostList costos={costos} />\n                        </div>\n                    )\n                })}\n            </div>\n        </ScrollArea>\n        <DialogFooter className=\"p-6 pt-4 border-t shrink-0\">\n             <DialogClose asChild>\n                <Button type=\"button\" variant=\"secondary\" className=\"w-full\">\n                    Cerrar\n                </Button>\n            </DialogClose>\n        </DialogFooter>\n    </DialogContent>\n  );\n}\n"
            },
            {
              "name": "rooms-view.tsx",
              "type": "file",
              "content": "\n\n'use client'\n\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { iniciarAmpliacion } from \"@/lib/actions/room.actions\"\nimport { ConstructionQueue } from \"./construction-queue\"\nimport { useEffect, useState, useMemo } from \"react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useRouter } from \"next/navigation\"\nimport { useProperty } from \"@/contexts/property-context\"\nimport { calcularCostosNivel, calcularTiempoConstruccion } from \"@/lib/formulas/room-formulas\"\nimport type { FullConfiguracionHabitacion, UserWithProgress, FullPropiedad } from \"@/lib/types\"\nimport { ID_OFICINA_JEFE, MAX_CONSTRUCTION_QUEUE_SIZE, ROOM_ORDER } from \"@/lib/constants\"\nimport { RoomCard } from \"./room-card\"\n\ntype RoomsViewProps = {\n    user: UserWithProgress;\n    allRoomConfigs: FullConfiguracionHabitacion[];\n    initialProperty?: FullPropiedad;\n}\n\nexport function RoomsView({ user, allRoomConfigs, initialProperty }: RoomsViewProps) {\n    const router = useRouter();\n    const { selectedProperty: contextSelectedProperty } = useProperty();\n    const [isSubmitting, setIsSubmitting] = useState<string | null>(null);\n    const { toast } = useToast();\n    const [timers, setTimers] = useState<Record<string, number>>({});\n\n    const selectedProperty = initialProperty || contextSelectedProperty;\n\n    useEffect(() => {\n        if (!selectedProperty) return;\n\n        const construccionEnCola = selectedProperty.colaConstruccion.filter(c => c.fechaFinalizacion);\n        if (construccionEnCola.length === 0) return;\n\n        const intervalId = setInterval(() => {\n            const now = new Date().getTime();\n            const newTimers: Record<string, number> = {};\n            let needsRefresh = false;\n\n            construccionEnCola.forEach(item => {\n                const endTime = new Date(item.fechaFinalizacion!).getTime();\n                const newTimeLeft = Math.max(0, Math.floor((endTime - now) / 1000));\n                newTimers[item.id] = newTimeLeft;\n                if (newTimeLeft === 0) {\n                    needsRefresh = true;\n                }\n            });\n\n            setTimers(newTimers);\n\n            if (needsRefresh) {\n                router.refresh();\n            }\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [selectedProperty, router]);\n\n    const roomsData = useMemo(() => {\n        if (!selectedProperty) return [];\n\n        const userRoomsMap = new Map(selectedProperty.habitaciones.map(h => [h.configuracionHabitacionId, h]));\n        const construccionEnCola = selectedProperty.colaConstruccion;\n        const nivelOficinaJefe = userRoomsMap.get(ID_OFICINA_JEFE)?.nivel || 1;\n\n        return ROOM_ORDER.map(id => {\n            const config = allRoomConfigs.find(c => c.id === id);\n            if (!config) return null;\n\n            const userRoom = userRoomsMap.get(id);\n            const nivelBase = userRoom ? userRoom.nivel : 0;\n            const mejorasEnCola = construccionEnCola.filter(c => c.habitacionId === id);\n            const nivelProyectado = nivelBase + mejorasEnCola.length;\n            const nivelSiguiente = nivelProyectado + 1;\n\n            const costosSiguienteNivel = calcularCostosNivel(nivelSiguiente, config);\n            const tiempoSiguienteNivel = calcularTiempoConstruccion(nivelSiguiente, config, nivelOficinaJefe);\n\n            const requirements = config.requisitos || [];\n            const meetsRequirements = requirements.every(req => (userRoomsMap.get(req.requiredRoomId)?.nivel || 0) >= req.requiredLevel);\n            const requirementsText = !meetsRequirements\n                ? requirements.map(req => `${allRoomConfigs.find(r => r.id === req.requiredRoomId)?.nombre || req.requiredRoomId} (Nvl ${req.requiredLevel})`).join(', ')\n                : null;\n\n            const construccionActiva = mejorasEnCola.find(c => c.fechaFinalizacion);\n\n            return {\n                ...config,\n                nivel: nivelBase,\n                nivelProyectado,\n                nivelSiguiente,\n                costos: costosSiguienteNivel,\n                tiempo: tiempoSiguienteNivel,\n                enConstruccion: !!construccionActiva,\n                construccionActiva,\n                meetsRequirements,\n                requirementsText,\n            };\n        }).filter((r): r is NonNullable<typeof r> => r !== null && (r.nivel > 0 || r.meetsRequirements));\n\n    }, [selectedProperty, allRoomConfigs]);\n\n    if (!selectedProperty) {\n        return (\n            <div className=\"main-view\">\n                <h2 className=\"text-3xl font-bold tracking-tight\">Gesti\u00f3n de Habitaciones</h2>\n                <Card>\n                    <CardContent className=\"p-6\">\n                        <p>Por favor, selecciona una propiedad para gestionar sus habitaciones.</p>\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n\n    const handleAmpliacion = async (habitacionId: string) => {\n        if (!selectedProperty) return;\n        setIsSubmitting(habitacionId);\n        const resultado = await iniciarAmpliacion(selectedProperty.id, habitacionId);\n        if (resultado?.error) {\n            toast({\n                title: \"Error al ampliar\",\n                description: resultado.error,\n                variant: \"destructive\"\n            })\n        } else if (resultado?.success) {\n            toast({\n                title: \"\u00a1\u00c9xito!\",\n                description: resultado.success\n            })\n        }\n        setIsSubmitting(null); // Reset submitting state\n    }\n\n    const simpleRoomConfigs = allRoomConfigs.map(r => ({ id: r.id, nombre: r.nombre, urlImagen: r.urlImagen }));\n    const isQueueFull = selectedProperty.colaConstruccion.length >= MAX_CONSTRUCTION_QUEUE_SIZE;\n\n    return (\n        <div className=\"space-y-4\">\n            <ConstructionQueue propiedad={selectedProperty} allRooms={simpleRoomConfigs} />\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Gesti\u00f3n de Habitaciones</h2>\n                    <p className=\"text-muted-foreground\">\n                        Ampl\u00eda y gestiona los edificios de tu propiedad: {selectedProperty.nombre}.\n                    </p>\n                </div>\n            </div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-4\">\n                {roomsData.map((room, index) => (\n                    <RoomCard\n                        key={room.id}\n                        room={room}\n                        timeLeft={room.construccionActiva ? timers[room.construccionActiva.id] : undefined}\n                        isQueueFull={isQueueFull}\n                        isSubmitting={isSubmitting === room.id}\n                        onUpgrade={handleAmpliacion}\n                        index={index}\n                    />\n                ))}\n            </div>\n        </div>\n    )\n}\n"
            },
            {
              "name": "security",
              "type": "directory",
              "children": [
                {
                  "name": "security-summary.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ShieldCheck, ShieldAlert, Box } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface SecuritySummaryProps {\n    totalDefensePower: number;\n    munitionConsumption: number;\n}\n\nfunction AnimatedNumber({ value }: { value: number }) {\n    const [currentValue, setCurrentValue] = useState(0);\n\n    useEffect(() => {\n        const diff = value - currentValue;\n        if (Math.abs(diff) < 1 && value !== 0) {\n            setCurrentValue(value);\n            return;\n        }\n\n        let start: number | null = null;\n        const duration = 1000;\n\n        const step = (timestamp: number) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const percentage = Math.min(progress / duration, 1);\n            const nextValue = currentValue + diff * percentage;\n            \n            if (progress < duration) {\n                setCurrentValue(nextValue);\n                requestAnimationFrame(step);\n            } else {\n                 setCurrentValue(value);\n            }\n        };\n\n        requestAnimationFrame(step);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [value]);\n\n    return <span>{Math.floor(currentValue).toLocaleString('de-DE')}</span>;\n}\n\n\nexport function SecuritySummary({ totalDefensePower, munitionConsumption }: SecuritySummaryProps) {\n    return (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card className=\"animate-fade-in-up\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Poder Defensivo Total</CardTitle>\n                    <ShieldCheck className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold text-primary\">\n                        <AnimatedNumber value={totalDefensePower} />\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Suma de la defensa de todas las unidades asignadas.</p>\n                </CardContent>\n            </Card>\n             <Card className=\"animate-fade-in-up\" style={{ animationDelay: '100ms' }}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Bonus de Muros</CardTitle>\n                    <ShieldAlert className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                       +0%\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Bonus por nivel de edificios defensivos (Pr\u00f3ximamente).</p>\n                </CardContent>\n            </Card>\n             <Card className=\"animate-fade-in-up\" style={{ animationDelay: '200ms' }}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Consumo de Munici\u00f3n</CardTitle>\n                    <Box className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                        <AnimatedNumber value={munitionConsumption} /> /h\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">Coste de mantenimiento por hora de las tropas asignadas.</p>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"
                },
                {
                  "name": "security-troop-manager.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { useState, useTransition } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { assignTroopsToSecurity, withdrawTroopsFromSecurity } from \"@/lib/actions/troop.actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, ArrowRight, ArrowLeft } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { FullConfiguracionTropa } from \"@/lib/types\";\n\ntype TroopWithCount = FullConfiguracionTropa & { cantidad: number };\n\ninterface TroopManagerCardProps {\n    title: string;\n    troops: TroopWithCount[];\n    action: (troopId: string, quantity: number) => void;\n    isPending: boolean;\n    buttonText: string;\n    buttonIcon: React.ReactNode;\n}\n\nconst TroopManagerCard = ({ title, troops, action, isPending, buttonText, buttonIcon }: TroopManagerCardProps) => {\n    const [quantities, setQuantities] = useState<Record<string, number>>({});\n\n    const handleQuantityChange = (id: string, value: number, max: number) => {\n        setQuantities(prev => ({\n            ...prev,\n            [id]: Math.max(0, Math.min(value, max))\n        }));\n    }\n\n    const handleAction = (troopId: string) => {\n        const quantity = quantities[troopId];\n        if (quantity > 0) {\n            action(troopId, quantity);\n            setQuantities(prev => ({...prev, [troopId]: 0}));\n        }\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle>{title}</CardTitle>\n            </CardHeader>\n            <CardContent>\n                <ScrollArea className=\"h-96 pr-4\">\n                    <div className=\"space-y-4\">\n                        {troops.length > 0 ? troops.map(troop => (\n                             <div key={troop.id} className=\"p-3 border rounded-lg space-y-3\">\n                                <div className=\"flex items-center gap-4\">\n                                    <Image src={troop.urlImagen || ''} alt={troop.nombre} width={48} height={40} className=\"rounded-md border p-1\" />\n                                    <div>\n                                        <p className=\"font-semibold\">{troop.nombre}</p>\n                                        <p className=\"text-sm text-muted-foreground\">Disponibles: {troop.cantidad.toLocaleString()}</p>\n                                    </div>\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                     <Slider\n                                        value={[quantities[troop.id] || 0]}\n                                        onValueChange={(val) => handleQuantityChange(troop.id, val[0], troop.cantidad)}\n                                        max={troop.cantidad}\n                                        step={1}\n                                        disabled={isPending}\n                                    />\n                                    <Input\n                                        type=\"number\"\n                                        className=\"w-24 h-9 text-center\"\n                                        value={quantities[troop.id] || 0}\n                                        onChange={(e) => handleQuantityChange(troop.id, parseInt(e.target.value, 10) || 0, troop.cantidad)}\n                                        disabled={isPending}\n                                    />\n                                </div>\n                                 <Button \n                                    size=\"sm\" \n                                    className=\"w-full\" \n                                    onClick={() => handleAction(troop.id)}\n                                    disabled={isPending || !quantities[troop.id]}\n                                >\n                                    {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/> : buttonIcon}\n                                    {buttonText}\n                                </Button>\n                             </div>\n                        )) : (\n                            <p className=\"text-center text-muted-foreground py-8\">No hay unidades disponibles.</p>\n                        )}\n                    </div>\n                </ScrollArea>\n            </CardContent>\n        </Card>\n    )\n}\n\ninterface SecurityTroopManagerProps {\n    propertyId: string;\n    availableTroops: TroopWithCount[];\n    assignedTroops: TroopWithCount[];\n}\n\nexport function SecurityTroopManager({ propertyId, availableTroops, assignedTroops }: SecurityTroopManagerProps) {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n\n    const handleAssign = (troopId: string, quantity: number) => {\n        startTransition(async () => {\n            const result = await assignTroopsToSecurity(propertyId, troopId, quantity);\n            if(result.error) toast({ variant: 'destructive', title: 'Error', description: result.error });\n            else toast({ title: '\u00c9xito', description: `${quantity} x ${troopId} asignadas a seguridad.`})\n        });\n    }\n\n    const handleWithdraw = (troopId: string, quantity: number) => {\n         startTransition(async () => {\n            const result = await withdrawTroopsFromSecurity(propertyId, troopId, quantity);\n            if(result.error) toast({ variant: 'destructive', title: 'Error', description: result.error });\n            else toast({ title: '\u00c9xito', description: `${quantity} x ${troopId} retiradas de seguridad.`})\n        });\n    }\n\n    return (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <TroopManagerCard \n                title=\"Unidades en la Propiedad\"\n                troops={availableTroops}\n                action={handleAssign}\n                isPending={isPending}\n                buttonText=\"Asignar a Seguridad\"\n                buttonIcon={<ArrowRight className=\"mr-2 h-4 w-4\"/>}\n            />\n             <TroopManagerCard \n                title=\"Tropas Asignadas a Seguridad\"\n                troops={assignedTroops}\n                action={handleWithdraw}\n                isPending={isPending}\n                buttonText=\"Retirar de Seguridad\"\n                buttonIcon={<ArrowLeft className=\"mr-2 h-4 w-4\"/>}\n            />\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "security-view.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport { useState, useTransition, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { UserWithProgress, FullTropaUsuario, FullConfiguracionTropa } from \"@/lib/types\";\nimport { useProperty } from \"@/contexts/property-context\";\nimport { SecuritySummary } from \"./security/security-summary\";\nimport { SecurityTroopManager } from \"./security/security-troop-manager\";\n\ntype TroopWithStats = FullConfiguracionTropa & {\n    ataqueActual: number;\n    defensaActual: number;\n    capacidadActual: number;\n    velocidadActual: number;\n    salarioActual: number;\n}\n\ntype SecurityViewProps = {\n    defenseTroops: TroopWithStats[];\n    user: UserWithProgress;\n}\n\nexport function SecurityView({ user, defenseTroops }: SecurityViewProps) {\n  const { selectedProperty } = useProperty();\n\n  const troopsData = useMemo(() => {\n    if (!selectedProperty) return { disponibles: [], asignadas: [] };\n\n    const tropasDisponibles = new Map(selectedProperty.TropaUsuario.map(t => [t.configuracionTropaId, t.cantidad]));\n    const tropasAsignadas = new Map(selectedProperty.TropaSeguridadUsuario.map(t => [t.configuracionTropaId, t.cantidad]));\n\n    return {\n        disponibles: defenseTroops.map(config => ({\n            ...config,\n            cantidad: tropasDisponibles.get(config.id) || 0,\n        })).filter(t => t.cantidad > 0),\n        asignadas: defenseTroops.map(config => ({\n            ...config,\n            cantidad: tropasAsignadas.get(config.id) || 0,\n        })).filter(t => t.cantidad > 0)\n    };\n  }, [selectedProperty, defenseTroops]);\n\n  if (!selectedProperty) {\n    return (\n      <div className=\"main-view\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Seguridad</h2>\n        <Card>\n          <CardContent className=\"p-6\">\n              <p>Por favor, selecciona una propiedad para gestionar sus defensas.</p>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const allAssignedTroops = user.propiedades.flatMap(p => p.TropaSeguridadUsuario);\n  const totalDefensePower = allAssignedTroops.reduce((acc, tropa) => {\n    const config = defenseTroops.find(c => c.id === tropa.configuracionTropaId);\n    return acc + ((config?.defensaActual || 0) * tropa.cantidad);\n  }, 0);\n  \n  const totalMunitionConsumption = allAssignedTroops.reduce((acc, tropa) => {\n      const config = defenseTroops.find(c => c.id === tropa.configuracionTropaId);\n      return acc + ((config?.salario || 0) * tropa.cantidad)\n  }, 0)\n\n  return (\n    <div className=\"space-y-4\">\n       <div className=\"flex items-center justify-between\">\n            <div>\n                <h2 className=\"text-3xl font-bold tracking-tight\">Centro de Mando Defensivo</h2>\n                <p className=\"text-muted-foreground\">\n                    Gestiona las unidades defensivas de: {selectedProperty.nombre}.\n                </p>\n            </div>\n       </div>\n       <SecuritySummary \n            totalDefensePower={totalDefensePower}\n            munitionConsumption={totalMunitionConsumption}\n        />\n       <SecurityTroopManager\n            propertyId={selectedProperty.id}\n            availableTroops={troopsData.disponibles}\n            assignedTroops={troopsData.asignadas}\n       />\n    </div>\n  )\n}\n"
            },
            {
              "name": "settings-view.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useState, useTransition, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { updateUserSettings } from '@/lib/actions/user.actions';\nimport type { UserWithProgress } from '@/lib/types';\nimport { Loader2, Check } from 'lucide-react';\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\n\ninterface SettingsViewProps {\n    user: UserWithProgress;\n}\n\nexport function SettingsView({ user }: SettingsViewProps) {\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n    const [isSuccess, setIsSuccess] = useState(false);\n\n    const [name, setName] = useState(user.name);\n    const [title, setTitle] = useState(user.title || '');\n    const [avatarUrl, setAvatarUrl] = useState(user.avatarUrl || '');\n    const [hasChanges, setHasChanges] = useState(false);\n\n    useEffect(() => {\n        const changesMade = name !== user.name || title !== (user.title || '') || avatarUrl !== (user.avatarUrl || '');\n        setHasChanges(changesMade);\n    }, [name, title, avatarUrl, user]);\n\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        startTransition(async () => {\n            const result = await updateUserSettings({\n                name,\n                title,\n                avatarUrl\n            });\n\n            if (result.error) {\n                toast({\n                    variant: 'destructive',\n                    title: 'Error',\n                    description: result.error,\n                });\n            } else {\n                toast({\n                    title: '\u00a1\u00c9xito!',\n                    description: result.success,\n                });\n                setIsSuccess(true);\n                setTimeout(() => setIsSuccess(false), 2000);\n            }\n        });\n    };\n\n    return (\n        <div>\n            <h2 className=\"text-3xl font-bold tracking-tight mb-4\">Ajustes de Perfil</h2>\n            <Card>\n                <form onSubmit={handleSubmit}>\n                    <CardHeader>\n                        <CardTitle>Tu Perfil</CardTitle>\n                        <CardDescription>\n                            Personaliza c\u00f3mo te ven los dem\u00e1s en el mundo de Vendetta.\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6\">\n                             <div className=\"space-y-6\">\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"name\">Nombre de Jugador</Label>\n                                    <Input\n                                        id=\"name\"\n                                        value={name}\n                                        onChange={(e) => setName(e.target.value)}\n                                        disabled={isPending}\n                                    />\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"title\">T\u00edtulo</Label>\n                                    <Input\n                                        id=\"title\"\n                                        value={title}\n                                        onChange={(e) => setTitle(e.target.value)}\n                                        placeholder=\"Ej: 'El Padrino', 'Capo'\"\n                                        disabled={isPending}\n                                    />\n                                </div>\n                             </div>\n                             <div className=\"space-y-2\">\n                                <Label htmlFor=\"avatarUrl\">URL del Avatar</Label>\n                                <div className=\"flex items-start gap-4\">\n                                     <Input\n                                        id=\"avatarUrl\"\n                                        value={avatarUrl}\n                                        onChange={(e) => setAvatarUrl(e.target.value)}\n                                        placeholder=\"https://...\"\n                                        disabled={isPending}\n                                        className=\"flex-grow\"\n                                    />\n                                    <Avatar className=\"h-20 w-20 flex-shrink-0\">\n                                        <AvatarImage src={avatarUrl} alt={name} />\n                                        <AvatarFallback>{name?.charAt(0).toUpperCase()}</AvatarFallback>\n                                    </Avatar>\n                                </div>\n                            </div>\n                        </div>\n                    </CardContent>\n                    <CardFooter>\n                        <Button type=\"submit\" disabled={isPending || !hasChanges || isSuccess} className=\"w-32\">\n                            {isPending ? (\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            ) : isSuccess ? (\n                                <Check className=\"mr-2 h-4 w-4\" />\n                            ) : null}\n                            {isPending ? 'Guardando...' : (isSuccess ? 'Guardado' : 'Guardar')}\n                        </Button>\n                    </CardFooter>\n                </form>\n            </Card>\n        </div>\n    );\n}\n"
            },
            {
              "name": "sidebar-nav.tsx",
              "type": "file",
              "content": "\n\n\"use client\"\n\nimport Link from \"next/link\"\nimport { usePathname, useSearchParams } from \"next/navigation\"\nimport {\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n  SidebarGroup,\n  useSidebar,\n  SidebarGroupLabel,\n} from \"@/components/ui/sidebar\"\nimport { \n    Home, \n    DoorOpen, \n    Users, \n    Shield, \n    Target, \n    Search, \n    FlaskConical, \n    Users2, \n    Package, \n    Map, \n    ClipboardList, \n    Calculator, \n    Mail, \n    BarChart, \n    Trophy,\n    Settings,\n    Swords,\n    Building2,\n    Globe\n} from \"lucide-react\"\nimport { PropertySelector } from \"./property-selector\"\nimport type { UserWithProgress } from \"@/lib/types\"\nimport { useProperty } from \"@/contexts/property-context\"\nimport { cn } from \"@/lib/utils\"\n\ninterface NavItem {\n  href: string\n  label: string\n  icon: React.ReactNode\n}\n\ninterface SidebarNavProps {\n    user: UserWithProgress | null;\n}\n\nconst mainNav: NavItem[] = [\n  { href: \"/overview\", label: \"Visi\u00f3n General\", icon: <Home /> },\n  { href: \"/rooms\", label: \"Habitaciones\", icon: <DoorOpen /> },\n  { href: \"/recruitment\", label: \"Reclutamiento\", icon: <Users /> },\n  { href: \"/training\", label: \"Entrenamiento\", icon: <Target /> },\n  { href: \"/security\", label: \"Seguridad\", icon: <Shield /> },\n  { href: \"/missions\", label: \"Misiones\", icon: <ClipboardList /> },\n]\n\nconst secondaryNav: NavItem[] = [\n    { href: \"/vision/global\", label: \"Visi\u00f3n Global\", icon: <Globe /> },\n    { href: \"/buildings\", label: \"Edificios\", icon: <Building2 /> },\n    { href: \"/technologies\", label: \"Tecnolog\u00edas\", icon: <FlaskConical /> },\n    { href: \"/family\", label: \"Familia\", icon: <Users2 /> },\n    { href: \"/resources\", label: \"Recursos\", icon: <Package /> },\n    { href: \"/map\", label: \"Mapa\", icon: <Map /> },\n    { href: \"/simulator\", label: \"Simulador\", icon: <Calculator /> },\n    { href: \"/brawls\", label: \"Batallas\", icon: <Swords /> },\n]\n\nconst tertiaryNav: NavItem[] = [\n    { href: \"/messages\", label: \"Notificaciones\", icon: <Mail /> },\n    { href: \"/statistics\", label: \"Estad\u00edsticas\", icon: <BarChart /> },\n    { href: \"/rankings\", label: \"Clasificaciones\", icon: <Trophy /> },\n    { href: \"/settings\", label: \"Ajustes\", icon: <Settings /> },\n    { href: \"/search\", label: \"Buscar\", icon: <Search /> },\n]\n\nexport function SidebarNav({ user }: SidebarNavProps) {\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  const { selectedProperty } = useProperty();\n  const { setOpenMobile, isMobile } = useSidebar();\n\n  const handleClick = () => {\n    if (isMobile) {\n        setOpenMobile(false)\n    }\n  }\n\n  const renderNav = (items: NavItem[]) => (\n    <SidebarMenu>\n      {items.map((item) => {\n        const isActive = pathname.startsWith(item.href);\n        const params = new URLSearchParams(searchParams);\n        if (selectedProperty?.id) {\n            params.set('propertyId', selectedProperty.id);\n        } else {\n            params.delete('propertyId');\n        }\n        \n        let finalHref = item.href;\n        if(item.href === '/rooms' && selectedProperty) {\n            finalHref = `/rooms/${selectedProperty.ciudad}:${selectedProperty.barrio}:${selectedProperty.edificio}`;\n        } else {\n            finalHref = `${item.href}?${params.toString()}`;\n        }\n\n        return (\n          <SidebarMenuItem key={item.href}>\n            <SidebarMenuButton\n              as={Link}\n              href={finalHref}\n              isActive={isActive}\n              tooltip={item.label}\n              onClick={handleClick}\n              className={cn(\"h-11 text-base hover:pl-4 relative [&>svg]:size-5\", \n              isActive && \"bg-primary/20 text-primary hover:bg-primary/30 border-l-4 border-primary\"\n              )}\n            >\n              {item.icon}\n              <span>{item.label}</span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        )\n      })}\n    </SidebarMenu>\n  )\n\n  return (\n    <>\n      <SidebarGroup>\n        <SidebarGroupLabel className=\"px-4 text-xs uppercase tracking-wider text-muted-foreground/80\">Principal</SidebarGroupLabel>\n        {renderNav(mainNav)}\n      </SidebarGroup>\n      \n      {user && user.propiedades.length > 0 && <PropertySelector properties={user.propiedades} />}\n\n      <SidebarGroup>\n         <SidebarGroupLabel className=\"px-4 text-xs uppercase tracking-wider text-muted-foreground/80\">Juego</SidebarGroupLabel>\n        {renderNav(secondaryNav)}\n      </SidebarGroup>\n      \n      <SidebarGroup>\n         <SidebarGroupLabel className=\"px-4 text-xs uppercase tracking-wider text-muted-foreground/80\">Comunidad</SidebarGroupLabel>\n        {renderNav(tertiaryNav)}\n      </SidebarGroup>\n    </>\n  )\n}\n"
            },
            {
              "name": "simulator",
              "type": "directory",
              "children": [
                {
                  "name": "quick-report-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport type { BattleReport } from '@/lib/types/simulation.types';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { cn } from '@/lib/utils';\nimport { CheckCircle, XCircle, Swords } from 'lucide-react';\n\ninterface QuickReportViewProps {\n    report: BattleReport | null;\n}\n\nfunction formatNumber(num: number): string {\n    if(num === undefined || num === null) return \"0\";\n    return Math.floor(num).toLocaleString('de-DE');\n}\n\nconst StatLossBar = ({ label, attackerValue, defenderValue }: { label: string, attackerValue: number, defenderValue: number}) => {\n    const total = attackerValue + defenderValue;\n    const attackerPercent = total > 0 ? (attackerValue / total) * 100 : 0;\n    const defenderPercent = total > 0 ? (defenderValue / total) * 100 : 0;\n    \n    return (\n        <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-baseline text-sm\">\n                <span className=\"text-blue-400 font-semibold\">{formatNumber(attackerValue)}</span>\n                <span className=\"text-muted-foreground\">{label}</span>\n                <span className=\"text-red-400 font-semibold\">{formatNumber(defenderValue)}</span>\n            </div>\n            <div className=\"flex w-full h-3 rounded-full bg-muted overflow-hidden\">\n                <div style={{ width: `${attackerPercent}%`}} className=\"bg-blue-600/80 transition-all duration-500 ease-in-out\" />\n                <div style={{ width: `${defenderPercent}%`}} className=\"bg-red-800/80 transition-all duration-500 ease-in-out\" />\n            </div>\n        </div>\n    )\n}\n\nexport function QuickReportView({ report }: QuickReportViewProps) {\n    if (!report) {\n        return null;\n    }\n\n    const getWinnerInfo = () => {\n        switch(report.winner) {\n            case 'attacker':\n                return { text: \"Victoria del Atacante\", icon: <CheckCircle />, className: \"text-green-400\" };\n            case 'defender':\n                return { text: \"Defensa Exitosa\", icon: <XCircle />, className: \"text-red-400\" };\n            default:\n                return { text: \"Empate\", icon: <Swords />, className: \"text-amber-400\" };\n        }\n    }\n\n    const winnerInfo = getWinnerInfo();\n\n    return (\n        <div className=\"w-full font-mono\">\n            <Card className={cn(\"p-4 text-center transition-all duration-300 ease-in-out\", \n                report.winner === 'attacker' && \"bg-green-900/50 border-green-500/50\",\n                report.winner === 'defender' && \"bg-red-900/50 border-red-500/50\",\n                report.winner === 'draw' && \"bg-muted/50\"\n            )}>\n                <h3 className={cn(\"text-xl font-bold flex items-center justify-center gap-2\", winnerInfo.className)}>\n                    {winnerInfo.icon}\n                    {winnerInfo.text}\n                </h3>\n            </Card>\n\n            <Card className=\"mt-4\">\n                <CardHeader>\n                    <CardTitle className=\"text-lg\">Resumen de P\u00e9rdidas</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    <div className=\"flex justify-between text-sm font-bold\">\n                        <span className=\"text-blue-400\">Atacante</span>\n                        <span className=\"text-red-400\">Defensor</span>\n                    </div>\n                    <Separator className=\"bg-white/10\" />\n                    <StatLossBar label=\"Tropas\" attackerValue={report.finalStats.attacker.troopsLost} defenderValue={report.finalStats.defender.troopsLost} />\n                    <StatLossBar label=\"Puntos\" attackerValue={report.finalStats.attacker.pointsLost} defenderValue={report.finalStats.defender.pointsLost} />\n                    <Separator className=\"bg-white/10\" />\n                    <StatLossBar label=\"Armas\" attackerValue={report.finalStats.attacker.resourcesLost.armas} defenderValue={report.finalStats.defender.resourcesLost.armas} />\n                    <StatLossBar label=\"Munici\u00f3n\" attackerValue={report.finalStats.attacker.resourcesLost.municion} defenderValue={report.finalStats.defender.resourcesLost.municion} />\n                    <StatLossBar label=\"D\u00f3lares\" attackerValue={report.finalStats.attacker.resourcesLost.dolares} defenderValue={report.finalStats.defender.resourcesLost.dolares} />\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\n"
                },
                {
                  "name": "simulation-report-display.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport type { BattleReport, CombatStats } from '@/lib/types/simulation.types';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { cn } from '@/lib/utils';\nimport { CheckCircle, XCircle, Swords, Users, Shield, Skull, TrendingDown, Package, Hourglass } from 'lucide-react';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\ninterface SimulationReportDisplayProps {\n    report: BattleReport | null;\n    isSimulating: boolean;\n}\n\nfunction formatNumber(num: number): string {\n    if(num === undefined || num === null) return \"0\";\n    return Math.floor(num).toLocaleString('de-DE');\n}\n\nconst StatCard = ({ title, value, icon, subtext }: { title: string, value: string, icon: React.ReactNode, subtext?: string }) => (\n    <Card className=\"bg-muted/50 p-4 text-center\">\n        <div className=\"flex justify-center items-center text-muted-foreground mb-2\">{icon}</div>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        <p className=\"text-xs text-muted-foreground\">{title}</p>\n        {subtext && <p className=\"text-xs text-muted-foreground/80 mt-1\">{subtext}</p>}\n    </Card>\n)\n\nexport function SimulationReportDisplay({ report, isSimulating }: SimulationReportDisplayProps) {\n\n    if (isSimulating) {\n        return (\n            <div className=\"flex flex-col items-center justify-center h-full bg-card rounded-lg border border-dashed p-8 text-center animate-pulse\">\n                <Hourglass className=\"h-16 w-16 text-primary mb-4 animate-spin\" />\n                <h3 className=\"text-xl font-semibold\">Calculando Escenario de Batalla...</h3>\n                <p className=\"text-muted-foreground\">Las unidades se est\u00e1n posicionando en el campo.</p>\n            </div>\n        )\n    }\n\n    if (!report) {\n        return (\n            <div className=\"flex flex-col items-center justify-center h-full bg-card rounded-lg border border-dashed p-8 text-center\">\n                <div className=\"w-24 h-24 rounded-full bg-muted/50 flex items-center justify-center mb-4\">\n                     <svg width=\"60\" height=\"60\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"text-muted-foreground animate-pulse-slow\">\n                        <path d=\"M12 2L2 7V17L12 22L22 17V7L12 2Z\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                        <path d=\"M2 7L12 12\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                        <path d=\"M12 22V12\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                        <path d=\"M22 7L12 12\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                        <path d=\"M17 4.5L7 9.5\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                    </svg>\n                </div>\n                <h3 className=\"text-xl font-semibold\">Simulador de Batalla</h3>\n                <p className=\"text-muted-foreground\">Configure las fuerzas y ejecute la simulaci\u00f3n para ver el informe aqu\u00ed.</p>\n            </div>\n        );\n    }\n    \n    const getWinnerInfo = () => {\n        switch(report.winner) {\n            case 'attacker':\n                return { text: \"VICTORIA DECISIVA DEL ATACANTE\", icon: <CheckCircle />, className: \"bg-green-800/80 text-green-300 border-green-500/50\" };\n            case 'defender':\n                return { text: \"DERROTA DEL ATACANTE\", icon: <XCircle />, className: \"bg-destructive/80 text-destructive-foreground border-destructive/50\" };\n            default:\n                return { text: \"EMPATE / BATALLA NO CONCLUYENTE\", icon: <Swords />, className: \"bg-amber-800/80 text-amber-300 border-amber-500/50\" };\n        }\n    }\n\n    const winnerInfo = getWinnerInfo();\n    const stats = report.finalStats;\n\n    return (\n        <div className=\"h-full flex flex-col gap-4 animate-fade-in\">\n             <Card className={cn(\"text-center p-4 border-2\", winnerInfo.className)}>\n                <h3 className=\"text-lg font-bold flex items-center justify-center gap-2\">{winnerInfo.icon}{winnerInfo.text}</h3>\n            </Card>\n\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n                <StatCard title=\"Bajas Atacante\" value={formatNumber(stats.attacker.troopsLost)} icon={<Users className=\"text-red-400\"/>} />\n                <StatCard title=\"Bajas Defensor\" value={formatNumber(stats.defender.troopsLost)} icon={<Shield className=\"text-red-400\"/>} />\n                <StatCard title=\"Puntos Perdidos\" value={formatNumber(stats.attacker.pointsLost + stats.defender.pointsLost)} icon={<TrendingDown className=\"text-yellow-400\"/>} subtext=\"Total en batalla\" />\n                <StatCard title=\"Bot\u00edn Estimado\" value={formatNumber(Object.values(stats.attacker.lootedResources || {}).reduce((a,b) => a + b, 0))} icon={<Package className=\"text-green-400\"/>} subtext=\"Recursos saqueados\" />\n            </div>\n\n            <Card className=\"flex-grow flex flex-col\">\n                <CardHeader>\n                    <CardTitle>Desglose de la Batalla</CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-grow p-2\">\n                     <Accordion type=\"single\" collapsible className=\"w-full\" defaultValue=\"round-1\">\n                        {report.rounds.map((round, index) => {\n                            const combinedTroops = round.attacker.troops.map(t => {\n                                const defenderTroop = round.defender.troops.find(d => d.id === t.id);\n                                return {\n                                    id: t.id,\n                                    name: t.nombre,\n                                    attackerInitial: t.initialQuantity,\n                                    attackerLost: t.lostQuantity,\n                                    defenderInitial: defenderTroop?.initialQuantity || 0,\n                                    defenderLost: defenderTroop?.lostQuantity || 0,\n                                };\n                            });\n\n                            return (\n                                <AccordionItem value={`round-${index + 1}`} key={index}>\n                                    <AccordionTrigger>Ronda {index + 1}</AccordionTrigger>\n                                    <AccordionContent>\n                                        <Table>\n                                            <TableHeader>\n                                                <TableRow>\n                                                    <TableHead>Tropa</TableHead>\n                                                    <TableHead className=\"text-center\">Atacante</TableHead>\n                                                    <TableHead className=\"text-center\">Defensor</TableHead>\n                                                </TableRow>\n                                            </TableHeader>\n                                            <TableBody>\n                                                {combinedTroops.filter(t => t.attackerInitial > 0 || t.defenderInitial > 0).map(t => (\n                                                    <TableRow key={t.id}>\n                                                        <TableCell className=\"font-medium\">{t.name}</TableCell>\n                                                        <TableCell className=\"text-center font-mono\">\n                                                            {formatNumber(t.attackerInitial)} <span className=\"text-destructive\">(-{formatNumber(t.attackerLost)})</span>\n                                                        </TableCell>\n                                                          <TableCell className=\"text-center font-mono\">\n                                                            {formatNumber(t.defenderInitial)} <span className=\"text-destructive\">(-{formatNumber(t.defenderLost)})</span>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                ))}\n                                            </TableBody>\n                                        </Table>\n                                    </AccordionContent>\n                                </AccordionItem>\n                            )\n                        })}\n                    </Accordion>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"
                },
                {
                  "name": "simulation-setup.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Upload, Trash2, Minus, Plus, Users, BrainCircuit, Building } from 'lucide-react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport type { UserWithProgress } from '@/lib/types';\nimport { useProperty } from '@/contexts/property-context';\nimport type { SimulatorColumnState } from '../simulator-view';\nimport type { ConfiguracionTropa, ConfiguracionEntrenamiento, ConfiguracionHabitacion } from '@prisma/client';\n\ninterface SimulationSetupProps {\n    user: UserWithProgress;\n    attackerState: SimulatorColumnState;\n    setAttackerState: React.Dispatch<React.SetStateAction<SimulatorColumnState>>;\n    defenderState: SimulatorColumnState;\n    setDefenderState: React.Dispatch<React.SetStateAction<SimulatorColumnState>>;\n    troopConfigs: ConfiguracionTropa[];\n    trainingConfigs: ConfiguracionEntrenamiento[];\n    defenseConfigs: ConfiguracionHabitacion[];\n}\n\ninterface SimulatorColumnProps {\n    title: string;\n    state: SimulatorColumnState;\n    setState: React.Dispatch<React.SetStateAction<SimulatorColumnState>>;\n    troopConfigs: ConfiguracionTropa[];\n    trainingConfigs: ConfiguracionEntrenamiento[];\n    defenseConfigs: ConfiguracionHabitacion[];\n    onLoadData: () => void;\n    isDefender?: boolean;\n}\n\nconst InputRow = ({ label, value, onChange }: { label: string; value: number; onChange: (value: number) => void }) => {\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const val = e.target.value;\n        onChange(parseInt(val, 10) || 0);\n    };\n\n    return (\n        <div className=\"flex items-center justify-between gap-2\">\n            <Label htmlFor={label} className=\"text-sm truncate pr-2 flex-1\">{label}</Label>\n            <div className=\"flex items-center gap-1\">\n                <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => onChange(value - 1)}><Minus className=\"h-4 w-4\"/></Button>\n                 <Input\n                    id={label}\n                    type=\"number\"\n                    min=\"0\"\n                    value={value || ''}\n                    onChange={handleInputChange}\n                    placeholder=\"0\"\n                    className=\"w-20 h-8 text-center [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                />\n                 <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => onChange(value + 1)}><Plus className=\"h-4 w-4\"/></Button>\n            </div>\n        </div>\n    );\n};\n\nconst Section = ({ title, children, value, icon }: { title: string; children: React.ReactNode; value: string; icon: React.ReactNode }) => (\n    <AccordionItem value={value}>\n        <AccordionTrigger className=\"text-base font-semibold hover:no-underline\">\n            <div className=\"flex items-center gap-2\">\n                {icon}\n                {title}\n            </div>\n        </AccordionTrigger>\n        <AccordionContent>\n            <div className=\"space-y-2 pt-2 border-t mt-2\">\n                {children}\n            </div>\n        </AccordionContent>\n    </AccordionItem>\n);\n\n\nfunction SimulatorColumn({ title, state, setState, troopConfigs, trainingConfigs, defenseConfigs, onLoadData, isDefender = false }: SimulatorColumnProps) {\n\n    const handleStateChange = (section: keyof Omit<SimulatorColumnState, 'buildingsLevel' | 'propertyCount'>, id: string, value: number) => {\n        setState(prev => ({ ...prev, [section]: { ...prev[section], [id]: value } }));\n    };\n\n    const handleGeneralValueChange = (field: 'buildingsLevel' | 'propertyCount', value: number) => {\n         setState(prev => ({ ...prev, [field]: value }));\n    }\n\n    const handleClear = () => setState({ troops: {}, trainings: {}, defenses: {}, buildingsLevel: 1, propertyCount: 1 });\n    \n    const troopsToShow = isDefender ? troopConfigs : troopConfigs.filter(t => t.tipo !== 'DEFENSA');\n\n    return (\n        <Card className=\"flex flex-col h-full\">\n            <CardHeader className=\"flex-row items-center justify-between\">\n                <CardTitle>{title}</CardTitle>\n                <div className=\"flex items-center gap-2\">\n                     <Button variant=\"outline\" size=\"sm\" onClick={onLoadData}><Upload className=\"mr-2 h-4 w-4\" /> Cargar</Button>\n                    <Button variant=\"ghost\" size=\"icon\" onClick={handleClear} className=\"h-8 w-8\"><Trash2 className=\"h-4 w-4\" /></Button>\n                </div>\n            </CardHeader>\n            <CardContent className=\"flex-grow overflow-hidden\">\n                <ScrollArea className=\"h-full pr-4\">\n                    <Accordion type=\"multiple\" defaultValue={['troops']} className=\"w-full\">\n                        <Section title=\"Unidades\" value=\"troops\" icon={<Users className=\"h-5 w-5 text-primary\" />}>\n                             {troopsToShow.map(t => (<InputRow key={`${title}-troop-${t.id}`} label={t.nombre} value={state.troops[t.id] || 0} onChange={(val) => handleStateChange('troops', t.id, val)} />))}\n                        </Section>\n                        {isDefender && (\n                            <Section title=\"Defensas\" value=\"defenses\" icon={<Building className=\"h-5 w-5 text-primary\" />}>\n                                {defenseConfigs.map(d => (<InputRow key={`${title}-defense-${d.id}`} label={d.nombre} value={state.defenses[d.id] || 0} onChange={(val) => handleStateChange('defenses', d.id, val)} />))}\n                            </Section>\n                        )}\n                        <Section title=\"Investigaciones\" value=\"trainings\" icon={<BrainCircuit className=\"h-5 w-5 text-primary\" />}>\n                            {trainingConfigs.map(t => (<InputRow key={`${title}-training-${t.id}`} label={t.nombre} value={state.trainings[t.id] || 0} onChange={(val) => handleStateChange('trainings', t.id, val)} />))}\n                        </Section>\n                    </Accordion>\n                </ScrollArea>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport function SimulationSetup({ user, attackerState, setAttackerState, defenderState, setDefenderState, troopConfigs, trainingConfigs, defenseConfigs }: SimulationSetupProps) {\n    const { selectedProperty } = useProperty();\n\n    const handleLoadUserData = (column: 'attacker' | 'defender') => {\n        if (!selectedProperty) return;\n\n        const troops = Object.fromEntries(selectedProperty.TropaUsuario.map(t => [t.configuracionTropaId, t.cantidad]));\n        const trainings = Object.fromEntries(user.entrenamientos.map(t => [t.configuracionEntrenamientoId, t.nivel]));\n        const defenses = Object.fromEntries(selectedProperty.habitaciones.filter(h => defenseConfigs.some(dc => dc.id === h.configuracionHabitacionId)).map(h => [h.configuracionHabitacionId, h.nivel]));\n\n        const newState: SimulatorColumnState = {\n            troops,\n            trainings,\n            defenses: column === 'defender' ? defenses : {},\n            buildingsLevel: 1, \n            propertyCount: user.propiedades.length || 1,\n        };\n\n        if (column === 'attacker') setAttackerState(newState);\n        else setDefenderState(newState);\n    };\n    \n    return (\n        <div className=\"grid grid-cols-2 gap-4 h-full\">\n            <SimulatorColumn \n                title=\"Atacante\"\n                state={attackerState}\n                setState={setAttackerState}\n                troopConfigs={troopConfigs}\n                trainingConfigs={trainingConfigs}\n                defenseConfigs={defenseConfigs}\n                onLoadData={() => handleLoadUserData('attacker')}\n            />\n            <SimulatorColumn \n                title=\"Defensor\"\n                state={defenderState}\n                setState={setDefenderState}\n                troopConfigs={troopConfigs}\n                trainingConfigs={trainingConfigs}\n                defenseConfigs={defenseConfigs}\n                isDefender\n                onLoadData={() => handleLoadUserData('defender')}\n            />\n        </div>\n    )\n}\n"
                }
              ]
            },
            {
              "name": "simulator-view.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useState, useTransition } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { runBattleSimulation } from '@/lib/actions/simulation.actions';\nimport type { BattleReport, SimulationInput } from '@/lib/types/simulation.types';\nimport type { ConfiguracionTropa, ConfiguracionEntrenamiento, ConfiguracionHabitacion } from '@prisma/client';\nimport { Loader2, Trash2 } from 'lucide-react';\nimport { UserWithProgress } from '@/lib/types';\nimport { SimulationSetup } from './simulator/simulation-setup';\nimport { SimulationReportDisplay } from './simulator/simulation-report-display';\n\ninterface SimulatorViewProps {\n    user: UserWithProgress;\n    troopConfigs: ConfiguracionTropa[];\n    trainingConfigs: ConfiguracionEntrenamiento[];\n    defenseConfigs: ConfiguracionHabitacion[];\n}\n\nexport interface SimulatorColumnState {\n    troops: Record<string, number>;\n    trainings: Record<string, number>;\n    defenses: Record<string, number>;\n    buildingsLevel: number;\n    propertyCount: number;\n}\n\nexport const initialColumnState: SimulatorColumnState = {\n    troops: {},\n    trainings: {},\n    defenses: {},\n    buildingsLevel: 1,\n    propertyCount: 1,\n};\n\nexport function SimulatorView({ user, troopConfigs, trainingConfigs, defenseConfigs }: SimulatorViewProps) {\n    const [isPending, startTransition] = useTransition();\n    const [attackerState, setAttackerState] = useState<SimulatorColumnState>(initialColumnState);\n    const [defenderState, setDefenderState] = useState<SimulatorColumnState>(initialColumnState);\n    const [battleReport, setBattleReport] = useState<BattleReport | null>(null);\n\n    const formatSimulationInput = (state: SimulatorColumnState): SimulationInput => {\n        return {\n            troops: Object.entries(state.troops).filter(([,qty]) => qty > 0).map(([id, quantity]) => ({ id, quantity })),\n            trainings: Object.entries(state.trainings).filter(([,lvl]) => lvl > 0).map(([id, level]) => ({ id, level })),\n            defenses: Object.entries(state.defenses).filter(([,lvl]) => lvl > 0).map(([id, level]) => ({ id, level })),\n            buildingsLevel: state.buildingsLevel,\n            propertyCount: state.propertyCount\n        };\n    };\n\n    const handleSimulate = () => {\n        const attackerInput = formatSimulationInput(attackerState);\n        const defenderInput = formatSimulationInput(defenderState);\n        \n        setBattleReport(null); // Clear previous report\n        startTransition(async () => {\n            const report = await runBattleSimulation(attackerInput, defenderInput);\n            setBattleReport(report);\n        });\n    };\n    \n    const handleResetAll = () => {\n        setAttackerState(initialColumnState);\n        setDefenderState(initialColumnState);\n        setBattleReport(null);\n    }\n\n    return (\n        <div>\n            <div className=\"flex flex-wrap items-center justify-between mb-4 gap-4\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Sala de Guerra Virtual</h2>\n                    <p className=\"text-muted-foreground\">\n                        Planifica tus estrategias y calcula los resultados de posibles enfrentamientos.\n                    </p>\n                </div>\n                 <Button onClick={handleResetAll} variant=\"outline\">\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    Reiniciar Simulador\n                </Button>\n            </div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 h-[75vh]\">\n                <SimulationSetup \n                     user={user}\n                     attackerState={attackerState}\n                     setAttackerState={setAttackerState}\n                     defenderState={defenderState}\n                     setDefenderState={setDefenderState}\n                     troopConfigs={troopConfigs}\n                     trainingConfigs={trainingConfigs}\n                     defenseConfigs={defenseConfigs}\n                />\n                <SimulationReportDisplay \n                    report={battleReport} \n                    isSimulating={isPending} \n                />\n            </div>\n            <div className=\"mt-6\">\n                 <Button onClick={handleSimulate} disabled={isPending} size=\"lg\" className=\"w-full\">\n                    {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    {isPending ? \"Calculando...\" : \"INICIAR SIMULACI\u00d3N\"}\n                </Button>\n            </div>\n        </div>\n    );\n}\n"
            },
            {
              "name": "statistics",
              "type": "directory",
              "children": [
                {
                  "name": "stat-category-card.tsx",
                  "type": "file",
                  "content": "\n\n'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Trophy } from \"lucide-react\";\n\nexport interface StatItem {\n    id: string;\n    name: string;\n    userValue: number;\n    maxValue: number;\n}\n\ninterface StatCategoryCardProps {\n    title: string;\n    items: StatItem[];\n}\n\nfunction formatNumber(num: number): string {\n    return num.toLocaleString('de-DE');\n}\n\nexport function StatCategoryCard({ title, items }: StatCategoryCardProps) {\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle>{title}</CardTitle>\n            </CardHeader>\n            <CardContent>\n                <ScrollArea className=\"h-96\">\n                    <div className=\"space-y-6 pr-4\">\n                        {items.map(item => {\n                            const progressPercentage = item.maxValue > 0 ? (item.userValue / item.maxValue) * 100 : 0;\n                            const isServerRecord = item.userValue > 0 && item.userValue === item.maxValue;\n                            return (\n                                <div key={item.id} className=\"space-y-1\">\n                                    <div className=\"flex justify-between items-baseline text-sm\">\n                                        <div className=\"flex items-center gap-2\">\n                                            {isServerRecord && (\n                                                <TooltipProvider>\n                                                    <Tooltip>\n                                                        <TooltipTrigger>\n                                                            <Trophy className=\"h-4 w-4 text-amber-400 animate-pulse\" />\n                                                        </TooltipTrigger>\n                                                        <TooltipContent>\n                                                            <p>R\u00e9cord del Servidor</p>\n                                                        </TooltipContent>\n                                                    </Tooltip>\n                                                </TooltipProvider>\n                                            )}\n                                            <span className=\"font-medium truncate pr-2\">{item.name}</span>\n                                        </div>\n                                        <div className=\"flex items-baseline gap-2\">\n                                            <span className=\"font-bold text-primary\">{formatNumber(item.userValue)}</span>\n                                            <span className=\"text-xs text-muted-foreground\">/ {formatNumber(item.maxValue)}</span>\n                                        </div>\n                                    </div>\n                                    <Progress value={progressPercentage} className=\"h-2\" />\n                                </div>\n                            )\n                        })}\n                    </div>\n                </ScrollArea>\n            </CardContent>\n        </Card>\n    );\n}\n"
                },
                {
                  "name": "stat-table-card.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Trophy } from \"lucide-react\";\n\ninterface StatTableCardProps {\n    title: string;\n    headers: string[];\n    data: (string | number)[][];\n    hasProgress?: boolean;\n}\n\nfunction formatNumber(value: string | number) {\n    if (typeof value === 'number') {\n        return value.toLocaleString('de-DE');\n    }\n    return value;\n}\n\nexport function StatTableCard({ title, headers, data, hasProgress = false }: StatTableCardProps) {\n    const isMobile = useIsMobile();\n    \n    const finalHeaders = hasProgress && !isMobile ? [...headers, 'Progreso'] : headers;\n\n    return (\n        <Card className=\"overflow-hidden\">\n            <div className=\"bg-primary text-primary-foreground p-4\">\n                <h3 className=\"font-heading text-xl tracking-wider\">{title}</h3>\n            </div>\n            <div className=\"bg-card\">\n                 <Table>\n                    <TableHeader>\n                        <TableRow className=\"border-b-white/10 hover:bg-white/5\">\n                            {finalHeaders.map((header, index) => (\n                                <TableHead \n                                    key={index} \n                                    className={cn(\n                                        \"font-bold text-white/90\", \n                                        index > 0 && \"text-right\",\n                                        isMobile && header === 'Nivel M\u00e1ximo' && \"hidden\"\n                                    )}\n                                >\n                                    {header}\n                                </TableHead>\n                            ))}\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        {data.map((row, rowIndex) => {\n                             const userValue = hasProgress ? (row[1] as number) : 0;\n                             const maxValue = hasProgress ? (row[2] as number) : 0;\n                             const progress = maxValue > 0 ? (userValue / maxValue) * 100 : 0;\n                             const isRecord = userValue > 0 && userValue === maxValue;\n                             \n                             return (\n                                <TableRow key={rowIndex} className=\"border-b-white/10 hover:bg-white/5\">\n                                    {row.map((cell, cellIndex) => (\n                                        <TableCell \n                                            key={cellIndex} \n                                            className={cn(\n                                                'py-3',\n                                                cellIndex > 0 ? 'text-right' : 'font-medium',\n                                                isMobile && headers[cellIndex] === 'Nivel M\u00e1ximo' && \"hidden\"\n                                            )}\n                                        >\n                                            <div className=\"flex items-center gap-2\">\n                                                {cellIndex === 0 && isRecord && (\n                                                    <TooltipProvider>\n                                                        <Tooltip>\n                                                            <TooltipTrigger>\n                                                                <Trophy className=\"h-4 w-4 text-amber-400\" />\n                                                            </TooltipTrigger>\n                                                            <TooltipContent>\n                                                                <p>R\u00e9cord del Servidor</p>\n                                                            </TooltipContent>\n                                                        </Tooltip>\n                                                    </TooltipProvider>\n                                                )}\n                                                {formatNumber(cell)}\n                                            </div>\n                                        </TableCell>\n                                    ))}\n                                    {hasProgress && !isMobile && (\n                                        <TableCell className=\"w-[150px]\">\n                                             <Progress value={progress} className=\"h-2\" indicatorClassName=\"bg-gradient-to-r from-green-400 to-cyan-400\" />\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            )\n                        })}\n                    </TableBody>\n                </Table>\n            </div>\n        </Card>\n    );\n}\n"
                },
                {
                  "name": "statistics-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Bar, BarChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { ConfiguracionHabitacion, ConfiguracionTropa, ConfiguracionEntrenamiento, HabitacionUsuario, EntrenamientoUsuario } from \"@prisma/client\";\nimport { UserWithProgress } from \"@/lib/data\";\nimport { StatTableCard } from \"./stat-table-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface TroopStat {\n    userId: string;\n    total: number;\n    configuracionTropaId: string;\n}\n\ninterface ResourceStat {\n    name: string;\n    maxValue: number;\n}\n\ninterface StatisticsViewProps {\n    currentUser: UserWithProgress;\n    allRoomConfigs: ConfiguracionHabitacion[];\n    allTrainingConfigs: ConfiguracionEntrenamiento[];\n    allTroopConfigs: ConfiguracionTropa[];\n    roomStats: HabitacionUsuario[];\n    trainingStats: EntrenamientoUsuario[];\n    troopStats: TroopStat[];\n    resourceStats: ResourceStat[];\n}\n\nexport function StatisticsView({\n    currentUser,\n    allRoomConfigs,\n    allTrainingConfigs,\n    allTroopConfigs,\n    roomStats,\n    trainingStats,\n    troopStats,\n    resourceStats\n}: StatisticsViewProps) {\n\n    // Process room stats\n    const maxRoomLevels = new Map<string, number>();\n    roomStats.forEach(stat => {\n        const currentMax = maxRoomLevels.get(stat.configuracionHabitacionId) || 0;\n        if (stat.nivel > currentMax) {\n            maxRoomLevels.set(stat.configuracionHabitacionId, stat.nivel);\n        }\n    });\n\n    const currentUserRoomLevels = new Map<string, number>();\n    currentUser.propiedades.forEach(p => {\n        p.habitaciones.forEach(h => {\n            const currentLevel = currentUserRoomLevels.get(h.configuracionHabitacionId) || 0;\n            if (h.nivel > currentLevel) {\n                 currentUserRoomLevels.set(h.configuracionHabitacionId, h.nivel);\n            }\n        });\n    });\n\n    const roomStatData = allRoomConfigs.map(config => ([\n        config.nombre,\n        currentUserRoomLevels.get(config.id) || 0,\n        maxRoomLevels.get(config.id) || 0,\n    ]));\n\n    // Process training stats\n    const maxTrainingLevels = new Map<string, number>();\n    trainingStats.forEach(stat => {\n        const currentMax = maxTrainingLevels.get(stat.configuracionEntrenamientoId) || 0;\n        if (stat.nivel > currentMax) {\n            maxTrainingLevels.set(stat.configuracionEntrenamientoId, stat.nivel);\n        }\n    });\n    const currentUserTrainingLevels = new Map(currentUser.entrenamientos.map(t => [t.configuracionEntrenamientoId, t.nivel]));\n    \n    const trainingStatData = allTrainingConfigs.map(config => ([\n        config.nombre,\n        currentUserTrainingLevels.get(config.id) || 0,\n        maxTrainingLevels.get(config.id) || 0,\n    ]));\n\n    // Process troop stats\n    const maxTroopCounts = new Map<string, number>();\n    troopStats.forEach(stat => {\n        const currentMax = maxTroopCounts.get(stat.configuracionTropaId) || 0;\n        if (stat.total > currentMax) {\n            maxTroopCounts.set(stat.configuracionTropaId, stat.total);\n        }\n    });\n\n    const currentUserTroopCounts = new Map<string, number>();\n    troopStats.filter(t => t.userId === currentUser.id).forEach(t => {\n        currentUserTroopCounts.set(t.configuracionTropaId, t.total);\n    });\n\n    const troopStatData = allTroopConfigs.map(config => ([\n        config.nombre,\n        currentUserTroopCounts.get(config.id) || 0,\n        maxTroopCounts.get(config.id) || 0,\n    ]));\n\n    const chartData = resourceStats.map(stat => ({\n        name: stat.name,\n        Capacidad: stat.maxValue,\n    }));\n\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Estad\u00edsticas Globales</h2>\n                    <p className=\"text-muted-foreground\">\n                        Compara tu progreso con los mejores jugadores del servidor.\n                    </p>\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                 <Card className=\"animate-fade-in-up\">\n                    <CardHeader>\n                         <CardTitle className=\"font-heading text-xl tracking-wider text-primary\">CAPACIDAD M\u00c1XIMA DE ALMACENAMIENTO</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                            <BarChart data={chartData}>\n                                <CartesianGrid strokeDasharray=\"3 3\" strokeOpacity={0.2} />\n                                <XAxis dataKey=\"name\" stroke=\"#888888\" fontSize={12} tickLine={false} axisLine={false} />\n                                <YAxis stroke=\"#888888\" fontSize={12} tickLine={false} axisLine={false} tickFormatter={(value) => `${Number(value) / 1000}K`} />\n                                <Tooltip\n                                    contentStyle={{\n                                        background: \"hsl(var(--background))\",\n                                        borderColor: \"hsl(var(--border))\",\n                                        color: \"hsl(var(--foreground))\"\n                                    }}\n                                />\n                                <Bar dataKey=\"Capacidad\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </CardContent>\n                </Card>\n                <div className=\"animate-fade-in-up\" style={{ animationDelay: '100ms' }}>\n                    <StatTableCard title=\"ESTAD\u00cdSTICAS DE HABITACIONES\" headers={['Habitaci\u00f3n', 'Mi Nivel', 'Nivel M\u00e1ximo']} data={roomStatData} hasProgress />\n                </div>\n                <div className=\"animate-fade-in-up\" style={{ animationDelay: '200ms' }}>\n                    <StatTableCard title=\"ESTAD\u00cdSTICAS DE ENTRENAMIENTOS\" headers={['Entrenamiento', 'Mi Nivel', 'Nivel M\u00e1ximo']} data={trainingStatData} hasProgress />\n                </div>\n                <div className=\"animate-fade-in-up\" style={{ animationDelay: '300ms' }}>\n                    <StatTableCard title=\"ESTAD\u00cdSTICAS DE TROPAS\" headers={['Tropa', 'Mis Unidades', 'Unidades M\u00e1ximas']} data={troopStatData} hasProgress />\n                </div>\n            </div>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "technologies",
              "type": "directory",
              "children": [
                {
                  "name": "tech-item-card.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Image from \"next/image\";\nimport { Lock, Unlock, CheckCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport interface Requirement {\n    id: string;\n    name: string;\n    requiredLevel: number;\n    userLevel: number;\n}\n\nexport type TechStatus = 'unlocked' | 'locked' | 'available';\n\ninterface TechItemCardProps {\n    name: string;\n    description: string | null;\n    imageUrl: string | null;\n    requirements: Requirement[];\n    status: TechStatus;\n}\n\nexport function TechItemCard({ name, description, imageUrl, requirements, status }: TechItemCardProps) {\n    const hasRequirements = requirements.length > 0;\n\n    return (\n        <Card className={cn(\n            \"tech-card flex flex-col h-full\",\n            status === 'locked' && \"grayscale opacity-60\",\n            status === 'available' && \"border-primary/50 shadow-lg shadow-primary/10\",\n        )}>\n            <CardHeader className=\"flex flex-row items-start gap-4\">\n                <div className=\"w-20 h-16 relative rounded-md overflow-hidden border flex-shrink-0 group\">\n                    <Image\n                        src={imageUrl || \"https://placehold.co/80x56.png\"}\n                        alt={name}\n                        fill\n                        className=\"object-contain transition-transform duration-300 group-hover:scale-110\"\n                        data-ai-hint=\"game item icon\"\n                    />\n                </div>\n                <div>\n                    <CardTitle className=\"text-lg\">{name}</CardTitle>\n                    <CardDescription className=\"text-xs line-clamp-2\">{description}</CardDescription>\n                </div>\n            </CardHeader>\n            <CardContent className=\"flex-grow flex flex-col pt-0\">\n                <Separator />\n                <div className=\"pt-4 flex-grow\">\n                    <h4 className=\"text-sm font-semibold mb-2 flex items-center gap-2\">\n                        {status === 'unlocked' ? <CheckCircle className=\"h-4 w-4 text-green-500\" /> : <Lock className=\"h-4 w-4 text-destructive\" />}\n                        {status === 'unlocked' ? \"Desbloqueado\" : \"Requisitos para Desbloquear\"}\n                    </h4>\n                    {hasRequirements ? (\n                        <div className=\"space-y-1.5 text-sm text-muted-foreground\">\n                            {requirements.map(req => {\n                                const requirementMet = req.userLevel >= req.requiredLevel;\n                                return (\n                                     <Badge key={req.id} variant={requirementMet ? \"default\" : \"secondary\"} className=\"mr-1 mb-1 bg-opacity-50\">\n                                        {req.name} (Nivel {req.userLevel}/{req.requiredLevel})\n                                    </Badge>\n                                )\n                            })}\n                        </div>\n                    ) : (\n                         <p className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                            <Unlock className=\"h-4 w-4 text-green-500\"/>\n                            Disponible desde el inicio.\n                        </p>\n                    )}\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\n"
                },
                {
                  "name": "technology-tree-view.tsx",
                  "type": "file",
                  "content": "\n'use client';\nimport { useState, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { FullConfiguracionHabitacion, FullConfiguracionTropa, FullConfiguracionEntrenamiento, UserWithProgress } from \"@/lib/types\";\nimport { TechItemCard, TechStatus } from \"./tech-item-card\";\n\ninterface TechnologyTreeViewProps {\n    user: UserWithProgress;\n    rooms: FullConfiguracionHabitacion[];\n    trainings: FullConfiguracionEntrenamiento[];\n    troops: FullConfiguracionTropa[];\n}\n\ntype Category = 'rooms' | 'trainings' | 'troops';\n\nexport function TechnologyTreeView({ user, rooms, trainings, troops }: TechnologyTreeViewProps) {\n    const [activeCategory, setActiveCategory] = useState<Category>('rooms');\n    \n    const userRoomsMap = useMemo(() => new Map(user.propiedades.flatMap(p => p.habitaciones).map(h => [h.configuracionHabitacionId, h.nivel])), [user.propiedades]);\n    const userTrainingsMap = useMemo(() => new Map(user.entrenamientos.map(t => [t.configuracionEntrenamientoId, t.nivel])), [user.entrenamientos]);\n    \n    const roomMap = useMemo(() => new Map(rooms.map(r => [r.id, r.nombre])), [rooms]);\n    const trainingMap = useMemo(() => new Map(trainings.map(t => [t.id, t.nombre])), [trainings]);\n\n    const getStatus = (requirements: { requiredId: string; requiredLevel: number; type: 'room' | 'training' }[]): TechStatus => {\n        let allMet = true;\n        for (const req of requirements) {\n            const userLevel = req.type === 'room' \n                ? (userRoomsMap.get(req.requiredId) || 0)\n                : (userTrainingsMap.get(req.requiredId) || 0);\n            \n            if (userLevel < req.requiredLevel) {\n                allMet = false;\n                break;\n            }\n        }\n        return allMet ? 'unlocked' : 'locked';\n    };\n\n    const getTroopStatus = (requirements: string[]): TechStatus => {\n        const isUnlocked = requirements.every(reqId => (userTrainingsMap.get(reqId) || 0) >= 1);\n        return isUnlocked ? 'unlocked' : 'locked';\n    };\n\n    const processRequirements = (reqs: any[], type: 'room' | 'training' | 'troop') => {\n        return reqs.map(req => {\n            let reqId, reqLevel, reqType, nameMap, userLevelMap;\n            \n            if(type === 'room') {\n                reqId = req.requiredRoomId;\n                reqLevel = req.requiredLevel;\n                reqType = 'room';\n                nameMap = roomMap;\n                userLevelMap = userRoomsMap;\n            } else if (type === 'training') {\n                reqId = req.requiredTrainingId;\n                reqLevel = req.requiredLevel;\n                reqType = 'training';\n                nameMap = trainingMap;\n                userLevelMap = userTrainingsMap;\n            } else { // troop\n                reqId = req;\n                reqLevel = 1; // Troops just need the training unlocked\n                reqType = 'training';\n                nameMap = trainingMap;\n                userLevelMap = userTrainingsMap;\n            }\n\n            return {\n                id: reqId,\n                name: nameMap.get(reqId) || reqId,\n                requiredLevel: reqLevel,\n                userLevel: userLevelMap.get(reqId) || 0,\n            }\n        });\n    }\n\n    const renderItems = (items: any[], type: Category) => {\n        return items.map((item, index) => {\n            const requirements = type === 'rooms' ? processRequirements(item.requisitos, 'room')\n                               : type === 'trainings' ? processRequirements(item.requisitos, 'training')\n                               : processRequirements(item.requisitos || [], 'troop');\n            \n            const status = type === 'rooms' ? getStatus(requirements.map(r => ({ requiredId: r.id, requiredLevel: r.requiredLevel, type: 'room' })))\n                         : type === 'trainings' ? getStatus(requirements.map(r => ({ requiredId: r.id, requiredLevel: r.requiredLevel, type: 'training' })))\n                         : getTroopStatus(item.requisitos || []);\n\n            const isAvailable = status === 'locked' && requirements.every(r => (userTrainingsMap.get(r.id) || 0) >= r.requiredLevel);\n            const finalStatus = status === 'unlocked' ? 'unlocked' : (isAvailable ? 'available' : 'locked');\n            \n            return (\n                 <div key={item.id} className=\"animate-fade-in-up\" style={{ animationDelay: `${index * 50}ms`}}>\n                     <TechItemCard\n                        name={item.nombre}\n                        description={item.descripcion}\n                        imageUrl={item.urlImagen}\n                        status={finalStatus}\n                        requirements={requirements}\n                    />\n                </div>\n            )\n        })\n    }\n    \n    return (\n        <div className=\"w-full mt-4\">\n            <div className=\"flex gap-2 mb-4\">\n                 <Button variant={activeCategory === 'rooms' ? 'default' : 'outline'} onClick={() => setActiveCategory('rooms')}>Habitaciones</Button>\n                 <Button variant={activeCategory === 'trainings' ? 'default' : 'outline'} onClick={() => setActiveCategory('trainings')}>Entrenamientos</Button>\n                 <Button variant={activeCategory === 'troops' ? 'default' : 'outline'} onClick={() => setActiveCategory('troops')}>Tropas</Button>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n                {activeCategory === 'rooms' && renderItems(rooms, 'rooms')}\n                {activeCategory === 'trainings' && renderItems(trainings, 'trainings')}\n                {activeCategory === 'troops' && renderItems(troops, 'troops')}\n            </div>\n        </div>\n    );\n}\n"
                }
              ]
            },
            {
              "name": "training-details-modal.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport Image from 'next/image';\nimport { DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogClose, DialogFooter } from '@/components/ui/dialog';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { Button } from '../ui/button';\nimport type { FullConfiguracionEntrenamiento, UserWithProgress } from '@/lib/types';\nimport { Badge } from '../ui/badge';\nimport { Separator } from '../ui/separator';\n\ninterface TrainingDetailsModalProps {\n  training: FullConfiguracionEntrenamiento & { level: number };\n  requirementsText: string | null;\n}\n\nexport function TrainingDetailsModal({ training, requirementsText }: TrainingDetailsModalProps) {\n  return (\n    <DialogContent className=\"max-w-xl w-full p-0 flex flex-col h-full sm:h-auto max-h-screen\">\n        <DialogHeader className=\"p-6 pb-4 shrink-0\">\n            <div className=\"flex flex-col sm:flex-row items-start gap-4\">\n                <div className=\"w-24 h-20 relative rounded-md overflow-hidden border flex-shrink-0\">\n                    <Image src={training.urlImagen} alt={training.nombre} fill className=\"object-cover\" data-ai-hint=\"skill icon\" />\n                </div>\n                <div className=\"flex-grow\">\n                    <DialogTitle className=\"text-2xl\">{training.nombre}</DialogTitle>\n                    <DialogDescription>\n                        Nivel actual: <span className=\"font-bold text-primary\">{training.level}</span>\n                    </DialogDescription>\n                </div>\n            </div>\n        </DialogHeader>\n       \n        <ScrollArea className=\"flex-grow min-h-0 px-6\">\n            <div className=\"space-y-4\">\n                 <div>\n                    <h4 className=\"font-semibold mb-2\">Descripci\u00f3n</h4>\n                    <p className=\"text-sm text-muted-foreground\">Mejora tus capacidades de {training.nombre.toLowerCase()} para obtener ventajas estrat\u00e9gicas.</p>\n                </div>\n                <Separator/>\n                <div>\n                    <h4 className=\"font-semibold mb-2\">Requisitos para el Siguiente Nivel</h4>\n                    {requirementsText ? (\n                         <div className=\"flex flex-wrap gap-1\">\n                            {requirementsText.split(', ').map(req => (\n                                <Badge key={req} variant=\"secondary\">{req}</Badge>\n                            ))}\n                        </div>\n                    ) : (\n                        <p className=\"text-sm text-muted-foreground\">No hay requisitos para el siguiente nivel.</p>\n                    )}\n                </div>\n            </div>\n        </ScrollArea>\n        <DialogFooter className=\"p-6 pt-4 border-t shrink-0\">\n             <DialogClose asChild>\n                <Button type=\"button\" variant=\"secondary\" className=\"w-full\">\n                    Cerrar\n                </Button>\n            </DialogClose>\n        </DialogFooter>\n    </DialogContent>\n  );\n}\n"
            },
            {
              "name": "training-status.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport type { FullColaEntrenamiento } from \"@/lib/types\";\n\ntype TrainingStatusProps = {\n    trainings: FullColaEntrenamiento[];\n};\n\nfunction formatTime(totalSeconds: number): string {\n    if (totalSeconds < 0) totalSeconds = 0;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = Math.floor(totalSeconds % 60);\n    return [hours, minutes, seconds]\n        .map(v => v.toString().padStart(2, '0'))\n        .join(':');\n}\n\nfunction CountdownTimer({ label, endDate, onFinish }: {label: string, endDate: string, onFinish: () => void}) {\n    const [timeLeft, setTimeLeft] = useState('');\n\n    useEffect(() => {\n        const end = new Date(endDate).getTime();\n        const intervalId = setInterval(() => {\n            const now = new Date().getTime();\n            const difference = Math.floor((end - now) / 1000);\n\n            if (difference < -1) {\n                setTimeLeft('00:00:00');\n                clearInterval(intervalId);\n                onFinish();\n            } else {\n                setTimeLeft(formatTime(difference));\n            }\n        }, 1000);\n        \n        const now = new Date().getTime();\n        const difference = Math.floor((end - now) / 1000);\n        setTimeLeft(formatTime(difference > 0 ? difference : 0));\n\n        return () => clearInterval(intervalId);\n    }, [endDate, onFinish]);\n\n    return (\n        <div className=\"flex justify-between items-center text-sm\">\n            <span>{label}</span>\n            <span className=\"font-mono text-accent\">{timeLeft}</span>\n        </div>\n    );\n}\n\nexport function TrainingStatus({ trainings }: TrainingStatusProps) {\n    const router = useRouter();\n\n    const handleRefresh = () => {\n        router.refresh();\n    };\n\n    return (\n        <div className=\"bg-card text-card-foreground px-4 py-3 rounded-b-md space-y-2\">\n            {trainings.length > 0 ? (\n                 trainings.map(queueItem => (\n                    <CountdownTimer \n                        key={queueItem.id}\n                        label={`${queueItem.propiedad.nombre}: ${queueItem.entrenamiento.nombre} (Nvl ${queueItem.nivelDestino})`}\n                        endDate={new Date(queueItem.fechaFinalizacion).toISOString()}\n                        onFinish={handleRefresh}\n                     />\n                ))\n            ) : (\n                <p className=\"text-muted-foreground text-center text-sm\">-</p>\n            )}\n        </div>\n    );\n}\n"
            },
            {
              "name": "training-view.tsx",
              "type": "file",
              "content": "\n'use client'\n\nimport Image from \"next/image\"\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Clock, BrainCircuit, Info, Hourglass, Ban, Loader2 } from \"lucide-react\"\nimport { iniciarEntrenamiento } from \"@/lib/actions/training.actions\"\nimport type { FullConfiguracionEntrenamiento, UserWithProgress } from \"@/lib/data\"\nimport { useProperty } from \"@/contexts/property-context\"\nimport { useEffect, useState, useTransition } from \"react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Alert, AlertDescription, AlertTitle } from \"../ui/alert\"\nimport { Terminal } from \"lucide-react\"\nimport { Dialog, DialogTrigger } from \"../ui/dialog\"\nimport { TrainingDetailsModal } from \"./training-details-modal\"\nimport { cn } from \"@/lib/utils\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"../ui/tooltip\"\n\nfunction formatNumber(num: number): string {\n    return num.toLocaleString('de-DE');\n}\n\nfunction formatDuration(seconds: number): string {\n    if (seconds <= 0) return \"0s\";\n    const units: {name: string, seconds: number}[] = [\n        { name: 'a\u00f1o', seconds: 31536000 },\n        { name: 'sem', seconds: 604800 },\n        { name: 'd', seconds: 86400 },\n        { name: 'h', seconds: 3600 },\n        { name: 'm', seconds: 60 },\n        { name: 's', seconds: 1 }\n    ];\n    let remainingSeconds = seconds;\n    let result = '';\n    let parts = 0;\n    for (const unit of units) {\n        if (remainingSeconds >= unit.seconds && parts < 3) {\n            const amount = Math.floor(remainingSeconds / unit.seconds);\n            if (amount > 0) {\n                result += `${amount}${unit.name} `;\n                remainingSeconds %= unit.seconds;\n                parts++;\n            }\n        }\n    }\n    return result.trim() || '0s';\n}\n\nfunction TrainingQueueAlert({ user }: { user: UserWithProgress }) {\n    const { selectedProperty } = useProperty();\n    const [tiempoRestante, setTiempoRestante] = useState(\"\");\n    const colaEntrenamiento = user.colaEntrenamientos.find(c => c.propiedadId === selectedProperty?.id);\n\n    useEffect(() => {\n        if (!colaEntrenamiento) return;\n\n        const interval = setInterval(() => {\n            const ahora = new Date().getTime();\n            const fin = new Date(colaEntrenamiento.fechaFinalizacion).getTime();\n            const diferencia = Math.max(0, fin - ahora);\n            setTiempoRestante(formatDuration(Math.floor(diferencia / 1000)));\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [colaEntrenamiento]);\n\n    if (!selectedProperty || !colaEntrenamiento) return null;\n\n    return (\n        <Alert>\n            <Terminal className=\"h-4 w-4\" />\n            <AlertTitle>Entrenamiento en curso en {selectedProperty?.nombre}</AlertTitle>\n            <AlertDescription>\n                Entrenando {colaEntrenamiento.entrenamiento.nombre} a Nivel {colaEntrenamiento.nivelDestino}. Tiempo restante: {tiempoRestante}\n            </AlertDescription>\n        </Alert>\n    )\n}\n\nfunction TrainingForm({ \n    training,\n    propertyId,\n    meetsRequirements,\n    requirementsText,\n    isTrainingInQueue,\n    isPropertyBusy\n}: { \n    training: TrainingData,\n    propertyId: string,\n    meetsRequirements: boolean,\n    requirementsText: string | null,\n    isTrainingInQueue: boolean,\n    isPropertyBusy: boolean\n}) {\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n\n    const handleAction = async () => {\n        startTransition(async () => {\n            const result = await iniciarEntrenamiento(training.id, propertyId);\n            if (result.error) {\n                toast({ variant: 'destructive', title: 'Error', description: result.error });\n            } else if (result.success) {\n                toast({ title: '\u00a1\u00c9xito!', description: result.success });\n            }\n        });\n    }\n    \n    const isDisabled = isPending || !meetsRequirements || isTrainingInQueue || isPropertyBusy;\n\n    const buttonContent = () => {\n        if (isPending) return <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/>Enviando...</>;\n        if (isTrainingInQueue) return <><Hourglass className=\"mr-2 h-4 w-4 text-amber-500\" />En cola</>;\n        if (isPropertyBusy) return <><Ban className=\"mr-2 h-4 w-4\"/>Ocupado</>;\n        return <><BrainCircuit className=\"mr-2 h-4 w-4\" />Entrenar</>;\n    };\n\n    return (\n        <form action={handleAction}>\n             {meetsRequirements ? (\n                 <Button type=\"submit\" variant=\"outline\" size=\"sm\" disabled={isDisabled}>\n                    {buttonContent()}\n                </Button>\n            ) : (\n                 <TooltipProvider>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                             <div className=\"text-xs text-destructive text-center p-2 bg-destructive/10 rounded-md cursor-help\">\n                                Requisitos no cumplidos\n                            </div>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                           <p className=\"text-sm font-bold\">Necesitas:</p>\n                           <p>{requirementsText}</p>\n                        </TooltipContent>\n                    </Tooltip>\n                 </TooltipProvider>\n            )}\n        </form>\n    )\n}\n\ntype TrainingData = FullConfiguracionEntrenamiento & {\n    nivel: number;\n    costos: {\n        armas: number;\n        municion: number;\n        dolares: number;\n    };\n    tiempo: number;\n    meetsRequirements: boolean;\n    requirementsText: string | null;\n}\n\ninterface TrainingViewProps {\n    user: UserWithProgress;\n    trainingsData: TrainingData[];\n}\n\nexport function TrainingView({ user, trainingsData }: TrainingViewProps) {\n  const { selectedProperty } = useProperty();\n\n  if (!selectedProperty) {\n      return (\n        <div className=\"main-view\">\n          <h2 className=\"text-3xl font-bold tracking-tight\">Centro de Entrenamiento</h2>\n          <Card><CardContent className=\"p-6\">Selecciona una propiedad para ver los entrenamientos.</CardContent></Card>\n        </div>\n      )\n  }\n\n  const isPropertyBusy = user.colaEntrenamientos.some(c => c.propiedadId === selectedProperty.id);\n\n  return (\n    <div className=\"space-y-4\">\n       <div className=\"flex items-center justify-between\">\n            <div>\n                <h2 className=\"text-3xl font-bold tracking-tight\">Centro de Entrenamiento</h2>\n                <p className=\"text-muted-foreground\">\n                    Mejora tus habilidades desde {selectedProperty.nombre}.\n                </p>\n            </div>\n       </div>\n       <TrainingQueueAlert user={user} />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n            {trainingsData.map((training, index) => {\n                if(training.nivel === 0 && !training.meetsRequirements) {\n                    return null;\n                }\n\n                const isTrainingInQueue = user.colaEntrenamientos.some(c => c.entrenamientoId === training.id);\n                const isMaxLevel = training.nivel >= 20; // Assuming max level is 20\n                const isAvailable = training.meetsRequirements && !isMaxLevel;\n                const cardState = isTrainingInQueue ? 'in-progress' : isMaxLevel ? 'completed' : isAvailable ? 'available' : 'locked';\n\n                return (\n                  <Dialog key={training.id}>\n                    <Card className={cn(\"training-card animate-fade-in-up\", \n                        cardState === 'in-progress' && 'border-amber-500',\n                        cardState === 'available' && 'border-primary/50 animate-pulse-slow',\n                        cardState === 'completed' && 'border-green-500/50',\n                        cardState === 'locked' && 'opacity-60 grayscale'\n                        )} \n                        style={{ animationDelay: `${index * 50}ms` }}\n                    >\n                        <CardHeader className=\"flex-row items-start gap-4\">\n                            <div className=\"w-20 h-16 relative rounded-md overflow-hidden border flex-shrink-0\">\n                                <Image\n                                    src={training.urlImagen || \"https://placehold.co/80x56.png\"}\n                                    alt={training.nombre}\n                                    fill\n                                    className=\"object-cover\"\n                                    data-ai-hint=\"skill icon\"\n                                />\n                            </div>\n                            <div>\n                                <CardTitle className=\"font-heading tracking-wide\">{training.nombre}</CardTitle>\n                                <div className=\"text-sm text-primary font-bold\">\n                                Nivel {training.nivel}\n                                </div>\n                            </div>\n                        </CardHeader>\n                        <CardContent className=\"flex-grow space-y-3\">\n                            <p className=\"text-sm text-muted-foreground min-h-[40px] line-clamp-2\">\n                                Mejora de {training.nombre.toLowerCase()} para desbloquear nuevas capacidades.\n                            </p>\n                            {!isMaxLevel && (\n                                <>\n                                 <div className=\"text-sm font-semibold\">Mejora a Nivel: {training.nivel + 1}</div>\n                                    <div className=\"grid grid-cols-3 gap-x-3 text-sm\">\n                                        {training.costos.armas > 0 && <div className=\"flex items-center gap-1.5\" title={`${training.costos.armas.toLocaleString('de-DE')} Armas`}><Image src=\"/img/recursos/armas.svg\" alt=\"Armas\" width={16} height={16} /><span>{formatNumber(training.costos.armas)}</span></div>}\n                                        {training.costos.municion > 0 && <div className=\"flex items-center gap-1.5\" title={`${training.costos.municion.toLocaleString('de-DE')} Munici\u00f3n`}><Image src=\"/img/recursos/municion.svg\" alt=\"Munici\u00f3n\" width={16} height={16} /><span>{formatNumber(training.costos.municion)}</span></div>}\n                                        {training.costos.dolares > 0 && <div className=\"flex items-center gap-1.5\" title={`${training.costos.dolares.toLocaleString('de-DE')} D\u00f3lares`}><Image src=\"/img/recursos/dolares.svg\" alt=\"D\u00f3lares\" width={16} height={16} /><span>{formatNumber(training.costos.dolares)}</span></div>}\n                                    </div>\n                                </>\n                            )}\n                        </CardContent>\n                        <CardFooter className=\"flex items-center justify-between\">\n                            {!isMaxLevel && (\n                                <div className=\"flex items-center gap-1.5 text-xs text-muted-foreground\">\n                                    <Clock className=\"h-3 w-3\" />\n                                    <span>{formatDuration(training.tiempo)}</span>\n                                </div>\n                            )}\n                             <div className=\"flex items-center gap-2\">\n                                <DialogTrigger asChild>\n                                    <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9\">\n                                        <Info className=\"h-5 w-5\" />\n                                    </Button>\n                                </DialogTrigger>\n                                {!isMaxLevel && (\n                                    <TrainingForm \n                                        training={training}\n                                        propertyId={selectedProperty.id}\n                                        meetsRequirements={training.meetsRequirements}\n                                        requirementsText={training.requirementsText}\n                                        isTrainingInQueue={isTrainingInQueue}\n                                        isPropertyBusy={isPropertyBusy}\n                                    />\n                                )}\n                            </div>\n                        </CardFooter>\n                    </Card>\n                     <TrainingDetailsModal training={{...training, level: training.nivel}} requirementsText={training.requirementsText} />\n                  </Dialog>\n                )\n            })}\n        </div>\n    </div>\n  )\n}\n"
            },
            {
              "name": "troop-details-modal.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport Image from 'next/image';\nimport { DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogClose, DialogFooter } from '@/components/ui/dialog';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { Button } from '../ui/button';\nimport type { ConfiguracionTropa, UserWithProgress } from '@/lib/types';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\n\ninterface TroopDetailsModalProps {\n  troop: ConfiguracionTropa;\n  user: UserWithProgress;\n  ataqueActual: number;\n  defensaActual: number;\n  capacidadActual: number;\n  velocidadActual: number;\n  salarioActual: number;\n}\n\nfunction formatNumber(num: number): string {\n    if (num === null || num === undefined) return \"0\";\n    return num.toLocaleString('de-DE');\n}\n\nexport function TroopDetailsModal({ troop, user, ataqueActual, defensaActual, capacidadActual, velocidadActual, salarioActual }: TroopDetailsModalProps) {\n    const stats = [\n        { label: 'Ataque', base: troop.ataque, actual: ataqueActual },\n        { label: 'Defensa', base: troop.defensa, actual: defensaActual },\n        { label: 'Capacidad', base: troop.capacidad, actual: capacidadActual },\n        { label: 'Velocidad', base: Number(troop.velocidad), actual: velocidadActual },\n        { label: 'Salario', base: troop.salario, actual: salarioActual },\n        { label: 'Puntos', base: troop.puntos, actual: troop.puntos },\n    ];\n  return (\n    <DialogContent className=\"max-w-3xl w-full p-0 flex flex-col h-full sm:h-auto max-h-screen\">\n       <div className=\"grid sm:grid-cols-2 h-full\">\n         <div className=\"relative hidden sm:block\">\n            <Image src={troop.urlImagen} alt={troop.nombre} fill className=\"object-cover rounded-l-lg\" data-ai-hint=\"mafia character icon\" />\n             <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent\" />\n        </div>\n        <div className=\"flex flex-col\">\n            <DialogHeader className=\"p-6 pb-4 shrink-0\">\n                <div className=\"flex flex-col sm:flex-row items-start gap-4\">\n                    <div className=\"w-24 h-20 relative rounded-md overflow-hidden border flex-shrink-0 sm:hidden\">\n                        <Image src={troop.urlImagen} alt={troop.nombre} fill className=\"object-contain\" data-ai-hint=\"mafia character icon\" />\n                    </div>\n                    <div className=\"flex-grow\">\n                        <DialogTitle className=\"text-2xl\">{troop.nombre}</DialogTitle>\n                        <DialogDescription className=\"text-sm text-muted-foreground mt-2\">{troop.descripcion}</DialogDescription>\n                    </div>\n                </div>\n            </DialogHeader>\n\n            <ScrollArea className=\"flex-grow min-h-0 px-6\">\n                <h3 className=\"font-semibold mb-2\">Estad\u00edsticas de la Tropa</h3>\n                <div className='grid grid-cols-1 sm:grid-cols-2 gap-4'>\n                    <Card>\n                        <CardHeader className='p-4'>\n                            <CardTitle className='text-base'>Estad\u00edsticas Base</CardTitle>\n                        </CardHeader>\n                        <CardContent className='p-4 pt-0 grid grid-cols-2 gap-x-4 gap-y-2 text-sm'>\n                            {stats.map(stat => (\n                                <div key={`base-${stat.label}`} className='flex justify-between items-baseline'>\n                                    <span className='text-muted-foreground'>{stat.label}:</span>\n                                    <span className='font-mono font-semibold'>{formatNumber(Number(stat.base))}</span>\n                                </div>\n                            ))}\n                        </CardContent>\n                    </Card>\n                     <Card className='bg-muted/30'>\n                        <CardHeader className='p-4'>\n                            <CardTitle className='text-base text-primary'>Estad\u00edsticas Actuales (con Bonus)</CardTitle>\n                        </CardHeader>\n                        <CardContent className='p-4 pt-0 grid grid-cols-2 gap-x-4 gap-y-2 text-sm'>\n                             {stats.map(stat => (\n                                <div key={`actual-${stat.label}`} className='flex justify-between items-baseline'>\n                                    <span className='text-muted-foreground'>{stat.label}:</span>\n                                    <span className='font-mono font-bold text-primary'>{formatNumber(stat.actual)}</span>\n                                </div>\n                            ))}\n                        </CardContent>\n                    </Card>\n                </div>\n            </ScrollArea>\n            <DialogFooter className=\"p-6 pt-4 border-t shrink-0\">\n                <DialogClose asChild>\n                    <Button type=\"button\" variant=\"secondary\" className=\"w-full\">\n                        Cerrar\n                    </Button>\n                </DialogClose>\n            </DialogFooter>\n        </div>\n       </div>\n    </DialogContent>\n  );\n}\n"
            },
            {
              "name": "troop-overview.tsx",
              "type": "file",
              "content": "\n\n'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport type { FullTropaUsuario } from '@/lib/types';\nimport Image from 'next/image';\n\ninterface TroopOverviewProps {\n    troops: FullTropaUsuario[];\n}\n\nfunction formatNumber(num: number): string {\n    if (num === null || num === undefined) return \"0\";\n    return num.toLocaleString('de-DE');\n}\n\nexport function TroopOverview({ troops }: TroopOverviewProps) {\n    const attackTroops = troops.filter(t => t.configuracionTropa.tipo === 'ATAQUE' && t.cantidad > 0);\n\n    return (\n        <Card className=\"h-full\">\n            <CardHeader className=\"p-2 bg-primary/80 text-primary-foreground rounded-t-lg\">\n                <CardTitle className=\"text-sm font-semibold tracking-wider text-center\">TROPAS EN EDIFICIO</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4\">\n                {attackTroops.length === 0 ? (\n                    <div className=\"text-center text-sm text-muted-foreground py-4\">\n                       <p>No hay tropas de ataque en este edificio.</p>\n                    </div>\n                ) : (\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4\">\n                        {attackTroops.map(troop => (\n                            <div key={troop.configuracionTropaId} className=\"flex flex-col items-center justify-center text-center p-2 rounded-md hover:bg-muted/50\">\n                                <div className=\"relative h-16 w-16 mb-2\">\n                                     <Image\n                                        src={troop.configuracionTropa.urlImagen || \"https://placehold.co/64x64.png\"}\n                                        alt={troop.configuracionTropa.nombre}\n                                        fill\n                                        className=\"object-contain\"\n                                        data-ai-hint=\"mafia unit character\"\n                                    />\n                                </div>\n                                <p className=\"text-sm font-semibold truncate text-muted-foreground\">{troop.configuracionTropa.nombre}</p>\n                                <p className=\"text-lg font-bold text-foreground\">{formatNumber(troop.cantidad)}</p>\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n"
            },
            {
              "name": "vision",
              "type": "directory",
              "children": [
                {
                  "name": "global-view.tsx",
                  "type": "file",
                  "content": "\n'use client'\n\nimport { useMemo, useState } from \"react\";\nimport type { FullPropiedad, UserWithProgress } from \"@/lib/types\";\nimport { calcularProduccionTotalPorSegundo } from \"@/lib/formulas/room-formulas\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { resourceIcons, RECRUITMENT_TROOP_ORDER, SECURITY_TROOP_ORDER } from \"@/lib/constants\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface GlobalVisionViewProps {\n    user: UserWithProgress;\n}\n\nfunction formatNumber(num: number): string {\n    if (num === null || num === undefined) return \"0\";\n    return Math.floor(num).toLocaleString('de-DE');\n}\n\nexport function GlobalVisionView({ user }: GlobalVisionViewProps) {\n    const isMobile = useIsMobile();\n    const [openAccordions, setOpenAccordions] = useState<string[]>(['resources', 'production']);\n\n    const { propertiesData, empireTotals, troopNames } = useMemo(() => {\n        const troopNamesMap = new Map<string, string>();\n        \n        const propertiesData = user.propiedades.map(prop => {\n            const production = calcularProduccionTotalPorSegundo(prop);\n            const troops = new Map<string, number>();\n            [...prop.TropaUsuario, ...prop.TropaSeguridadUsuario].forEach(t => {\n                if (!troopNamesMap.has(t.configuracionTropa.id)) {\n                    troopNamesMap.set(t.configuracionTropa.id, t.configuracionTropa.nombre);\n                }\n                troops.set(t.configuracionTropa.id, (troops.get(t.configuracionTropa.id) || 0) + t.cantidad);\n            });\n\n            return {\n                id: prop.id,\n                nombre: prop.nombre,\n                coords: `[${prop.ciudad}:${prop.barrio}:${prop.edificio}]`,\n                resources: {\n                    armas: Number(prop.armas),\n                    municion: Number(prop.municion),\n                    alcohol: Number(prop.alcohol),\n                    dolares: Number(prop.dolares),\n                },\n                production: {\n                    armas: production.armas.produccionNeta * 3600,\n                    municion: production.municion.produccionNeta * 3600,\n                    alcohol: production.alcohol.produccionNeta * 3600,\n                    dolares: production.dolares.produccionNeta * 3600,\n                },\n                troops,\n            };\n        });\n\n        const empireTotals = propertiesData.reduce((acc, prop) => {\n            acc.resources.armas += prop.resources.armas;\n            acc.resources.municion += prop.resources.municion;\n            acc.resources.alcohol += prop.resources.alcohol;\n            acc.resources.dolares += prop.resources.dolares;\n\n            acc.production.armas += prop.production.armas;\n            acc.production.municion += prop.production.municion;\n            acc.production.alcohol += prop.production.alcohol;\n            acc.production.dolares += prop.production.dolares;\n\n            prop.troops.forEach((count, id) => {\n                acc.troops.set(id, (acc.troops.get(id) || 0) + count);\n            });\n\n            return acc;\n        }, {\n            resources: { armas: 0, municion: 0, alcohol: 0, dolares: 0 },\n            production: { armas: 0, municion: 0, alcohol: 0, dolares: 0 },\n            troops: new Map<string, number>(),\n        });\n        \n        return { propertiesData, empireTotals, troopNames: troopNamesMap };\n\n    }, [user.propiedades]);\n    \n    const allTroopIds = RECRUITMENT_TROOP_ORDER.concat(SECURITY_TROOP_ORDER);\n\n    const metricRows = [\n        { type: 'header', label: 'Recursos' },\n        { type: 'data', label: \"Armas\", resourceKey: 'armas', isProduction: false },\n        { type: 'data', label: \"Municion\", resourceKey: 'municion', isProduction: false },\n        { type: 'data', label: \"Alcohol\", resourceKey: 'alcohol', isProduction: false },\n        { type: 'data', label: \"Dolares\", resourceKey: 'dolares', isProduction: false },\n        { type: 'header', label: 'Producci\u00f3n/h' },\n        { type: 'data', label: \"Armas/h\", resourceKey: 'armas', isProduction: true },\n        { type: 'data', label: \"Municion/h\", resourceKey: 'municion', isProduction: true },\n        { type: 'data', label: \"Alcohol/h\", resourceKey: 'alcohol', isProduction: true },\n        { type: 'data', label: \"Dolares/h\", resourceKey: 'dolares', isProduction: true },\n        { type: 'header', label: 'Tropas' },\n        ...allTroopIds.map(id => ({ type: 'troop' as const, label: troopNames.get(id) || id, troopId: id }))\n    ];\n\n\n    const renderDesktopTable = () => (\n         <Card className=\"col-span-1 lg:col-span-3\">\n            <CardContent className=\"p-0\">\n                <ScrollArea className=\"w-full whitespace-nowrap h-[75vh]\">\n                    <Table className=\"min-w-full\">\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead className=\"sticky left-0 bg-background/95 z-10 w-[180px]\">M\u00e9trica</TableHead>\n                                {propertiesData.map(prop => (\n                                    <TableHead key={prop.id} className=\"text-center\">{prop.nombre}<br/><span className=\"text-xs text-muted-foreground\">{prop.coords}</span></TableHead>\n                                ))}\n                                <TableHead className=\"text-center font-bold text-primary\">Total Imperio</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {metricRows.map((row, index) => {\n                                if(row.type === 'header') {\n                                    return <TableRow key={row.label}><TableCell colSpan={propertiesData.length + 2} className=\"h-2 bg-muted/50 p-1 font-bold text-center text-primary\">{row.label}</TableCell></TableRow>\n                                }\n                                if(row.type === 'troop' && !empireTotals.troops.has(row.troopId)) return null;\n\n                                return (\n                                 <TableRow key={row.label} className=\"even:bg-muted/20\">\n                                    <TableCell className=\"sticky left-0 bg-background/95 font-semibold\">{row.label}</TableCell>\n                                    {propertiesData.map(prop => {\n                                        const value = row.type === 'data' \n                                            ? (row.isProduction ? prop.production[row.resourceKey as keyof typeof prop.production] : prop.resources[row.resourceKey as keyof typeof prop.resources])\n                                            : (prop.troops.get(row.troopId) || 0);\n                                        const isPositive = row.isProduction && value > 0;\n                                        return (\n                                            <TableCell key={prop.id} className={cn(\"text-center font-mono\", isPositive ? 'text-green-400' : 'text-foreground')}>\n                                                {isPositive && '+'}{formatNumber(value)}\n                                            </TableCell>\n                                        )\n                                    })}\n                                    <TableCell className=\"text-center font-mono font-bold text-primary\">\n                                       {(() => {\n                                            const totalValue = row.type === 'data' \n                                                ? (row.isProduction ? empireTotals.production[row.resourceKey as keyof typeof empireTotals.production] : empireTotals.resources[row.resourceKey as keyof typeof empireTotals.resources])\n                                                : (empireTotals.troops.get(row.troopId) || 0);\n                                            const isTotalPositive = row.isProduction && totalValue > 0;\n                                            return <span className={cn(isTotalPositive ? 'text-green-400' : 'text-primary')}>{isTotalPositive && '+'}{formatNumber(totalValue)}</span>\n                                        })()}\n                                    </TableCell>\n                                </TableRow>\n                               )\n                            })}\n                        </TableBody>\n                    </Table>\n                </ScrollArea>\n            </CardContent>\n        </Card>\n    );\n\n     const renderMobileCards = () => (\n        <div className=\"space-y-4\">\n            {propertiesData.map(prop => (\n                 <Card key={prop.id} className=\"animate-fade-in-up\">\n                    <CardHeader>\n                        <CardTitle className=\"text-lg font-heading tracking-wider\">{prop.nombre}</CardTitle>\n                        <CardDescription>{prop.coords}</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <Accordion type=\"multiple\" defaultValue={openAccordions} className=\"w-full\" onValueChange={setOpenAccordions}>\n                            <AccordionItem value=\"resources\">\n                                <AccordionTrigger>Recursos</AccordionTrigger>\n                                <AccordionContent className=\"grid grid-cols-2 gap-4 pt-2\">\n                                    {Object.entries(prop.resources).map(([key, value]) => (\n                                        <div key={key} className=\"flex items-center gap-2\">\n                                            <Image src={resourceIcons[key]} alt={key} width={24} height={24} />\n                                            <div>\n                                                <p className=\"text-xs capitalize text-muted-foreground\">{key}</p>\n                                                <p className=\"font-bold text-lg\">{formatNumber(value)}</p>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </AccordionContent>\n                            </AccordionItem>\n                            <AccordionItem value=\"production\">\n                                <AccordionTrigger>Producci\u00f3n/h</AccordionTrigger>\n                                <AccordionContent className=\"grid grid-cols-2 gap-4 pt-2\">\n                                    {Object.entries(prop.production).map(([key, value]) => (\n                                        <p key={key} className={cn(\"flex items-center gap-2 font-mono\", value >= 0 ? \"text-green-400\" : \"text-destructive\")}>\n                                            <Image src={resourceIcons[key]} alt={key} width={20} height={20} />\n                                            {value >= 0 ? '+' : ''}{formatNumber(value)}/h\n                                        </p>\n                                    ))}\n                                </AccordionContent>\n                            </AccordionItem>\n                            <AccordionItem value=\"troops\">\n                                <AccordionTrigger>Tropas en Propiedad</AccordionTrigger>\n                                <AccordionContent className=\"space-y-2 pt-2 text-sm\">\n                                    {allTroopIds.map(id => {\n                                        const count = prop.troops.get(id) || 0;\n                                        if (count === 0) return null;\n                                        return (\n                                            <div key={id} className=\"flex justify-between\">\n                                                <span>{troopNames.get(id) || id}</span>\n                                                <span className=\"font-bold\">{formatNumber(count)}</span>\n                                            </div>\n                                        );\n                                    })}\n                                    {Array.from(prop.troops.values()).every(v => v === 0) && <p className=\"text-muted-foreground text-center\">No hay tropas.</p>}\n                                </AccordionContent>\n                            </AccordionItem>\n                        </Accordion>\n                    </CardContent>\n                </Card>\n            ))}\n        </div>\n    );\n\n     const EmpireSummaryCard = () => (\n        <Card className=\"lg:col-span-1\">\n             <CardHeader>\n                <CardTitle className=\"text-2xl font-heading tracking-wider text-primary\">Resumen del Imperio</CardTitle>\n            </CardHeader>\n            <CardContent>\n                 <Accordion type=\"multiple\" defaultValue={['resources', 'production']} className=\"w-full\">\n                     <AccordionItem value=\"resources\">\n                        <AccordionTrigger>Recursos Totales</AccordionTrigger>\n                        <AccordionContent className=\"grid grid-cols-2 gap-4 pt-2\">\n                            {Object.entries(empireTotals.resources).map(([key, value]) => (\n                                <div key={key} className=\"flex items-center gap-2\">\n                                    <Image src={resourceIcons[key]} alt={key} width={24} height={24} />\n                                    <div>\n                                        <p className=\"text-xs capitalize text-muted-foreground\">{key}</p>\n                                        <p className=\"font-bold text-lg\">{formatNumber(value)}</p>\n                                    </div>\n                                </div>\n                            ))}\n                        </AccordionContent>\n                     </AccordionItem>\n                      <AccordionItem value=\"production\">\n                        <AccordionTrigger>Producci\u00f3n Total/h</AccordionTrigger>\n                        <AccordionContent className=\"grid grid-cols-2 gap-4 pt-2\">\n                             {Object.entries(empireTotals.production).map(([key, value]) => (\n                                <p key={key} className={cn(\"flex items-center gap-2 font-mono\", value >= 0 ? \"text-green-400\" : \"text-destructive\")}>\n                                    <Image src={resourceIcons[key]} alt={key} width={20} height={20} />\n                                    {value >= 0 ? '+' : ''}{formatNumber(value)}/h\n                                </p>\n                            ))}\n                        </AccordionContent>\n                     </AccordionItem>\n                      <AccordionItem value=\"troops\">\n                        <AccordionTrigger>Ej\u00e9rcito Total</AccordionTrigger>\n                        <AccordionContent className=\"space-y-2 pt-2 text-sm\">\n                            {allTroopIds.map(id => {\n                                const count = empireTotals.troops.get(id) || 0;\n                                if(count === 0) return null;\n                                return (\n                                    <div key={id} className=\"flex justify-between\">\n                                        <span>{troopNames.get(id) || id}</span>\n                                        <span className=\"font-bold\">{formatNumber(count)}</span>\n                                    </div>\n                                )\n                            })}\n                        </AccordionContent>\n                     </AccordionItem>\n                 </Accordion>\n            </CardContent>\n        </Card>\n     )\n\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h2 className=\"text-3xl font-bold tracking-tight\">Visi\u00f3n Global del Imperio</h2>\n                    <p className=\"text-muted-foreground\">Resumen de todas tus operaciones y propiedades.</p>\n                </div>\n                 <Button asChild variant=\"outline\" size=\"sm\">\n                    <Link href=\"/overview\">\n                        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                        Volver\n                    </Link>\n                </Button>\n            </div>\n             <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n                 {isMobile ? (\n                    <div className=\"col-span-1 lg:col-span-4 space-y-4\">\n                        <EmpireSummaryCard />\n                        {renderMobileCards()}\n                    </div>\n                 ) : (\n                    <>\n                        <EmpireSummaryCard />\n                        {renderDesktopTable()}\n                    </>\n                 )}\n            </div>\n        </div>\n    );\n}\n\n"
                }
              ]
            }
          ]
        },
        {
          "name": "dashboard-client-layout.tsx",
          "type": "file",
          "content": "\n\n\"use client\"\n\nimport Link from \"next/link\";\nimport {\n  SidebarProvider,\n  Sidebar,\n  SidebarHeader,\n  SidebarContent,\n  SidebarFooter,\n  SidebarTrigger,\n  SidebarInset,\n} from \"@/components/ui/sidebar\"\nimport { SidebarNav } from \"@/components/dashboard/sidebar-nav\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Button } from \"@/components/ui/button\"\nimport { LogOut, Swords } from \"lucide-react\"\nimport type { UserWithProgress } from \"@/lib/types\"\nimport { logout } from \"@/lib/actions/auth.actions\";\nimport { useRouter } from \"next/navigation\"\n\nexport function DashboardClientLayout({\n    user,\n    children,\n    resourceBar\n  }: {\n    user: UserWithProgress | null;\n    children: React.ReactNode\n    resourceBar: React.ReactNode;\n  }) {\n  const router = useRouter();\n\n  const handleLogout = async () => {\n    await logout();\n    router.push('/');\n    router.refresh();\n  }\n\n  return (\n    <SidebarProvider>\n      <Sidebar className=\"bg-card/80 backdrop-blur-sm border-r-white/10\">\n        <SidebarHeader>\n           <Link href=\"/overview\" className=\"flex items-center gap-2 p-2\">\n            <Swords className=\"h-8 w-8 text-primary\" />\n            <h2 className=\"text-2xl font-bold font-heading tracking-tight text-foreground\">VENDETTA</h2>\n           </Link>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarNav user={user} />\n        </SidebarContent>\n        <Separator />\n        <SidebarFooter>\n          <div className=\"flex items-center gap-4 p-3\">\n            <Avatar className=\"h-12 w-12 border-2 border-primary\">\n              <AvatarImage src={user?.avatarUrl || \"https://placehold.co/40x40.png\"} alt={user?.name || \"Boss\"} data-ai-hint=\"mafia boss\" />\n              <AvatarFallback>{user?.name?.charAt(0).toUpperCase() || 'V'}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex flex-col truncate\">\n                <span className=\"font-heading text-lg font-bold tracking-wide\">{user?.name || \"El Padrino\"}</span>\n                <span className=\"text-xs text-muted-foreground\">{user?.title || \"Jefe\"}</span>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"ml-auto hover:bg-destructive/20 hover:text-destructive\" onClick={handleLogout}>\n                <LogOut />\n                <span className=\"sr-only\">Cerrar Sesi\u00f3n</span>\n            </Button>\n          </div>\n        </SidebarFooter>\n      </Sidebar>\n      <SidebarInset className=\"flex flex-col\">\n        {/* Main Header */}\n        <header className=\"sticky top-0 z-30 flex h-14 items-center justify-between gap-4 border-b bg-background/80 px-4 backdrop-blur-sm sm:h-16 sm:px-6\">\n            <div className=\"flex items-center gap-2 md:hidden\">\n                <Link href=\"/overview\" className=\"flex items-center gap-2\">\n                    <Swords className=\"h-6 w-6 text-primary\" />\n                    <span className=\"font-semibold text-lg\">Vendetta</span>\n                </Link>\n            </div>\n             <div className=\"flex-1\" />\n            <SidebarTrigger className=\"md:hidden\" />\n        </header>\n        {resourceBar}\n        {children}\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n"
        },
        {
          "name": "game-state-updater.tsx",
          "type": "file",
          "content": "import { getSessionUser } from '@/lib/auth';\nimport { actualizarEstadoCompletoDelJuego } from '@/lib/actions/user.actions';\nimport type { UserWithProgress } from '@/lib/types';\n\nexport async function GameStateUpdater() {\n  const user = await getSessionUser();\n  if (user) {\n    // La actualizaci\u00f3n ocurre aqu\u00ed, encapsulada.\n    await actualizarEstadoCompletoDelJuego(user as UserWithProgress);\n  }\n  // Este componente no necesita renderizar nada.\n  return null;\n}\n"
        },
        {
          "name": "login-form.tsx",
          "type": "file",
          "content": "'use client';\n\nimport { useActionState } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { login, LoginFormState } from '@/app/actions';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { AlertCircle } from 'lucide-react';\n\nfunction LoginButton() {\n  const { pending } = useFormStatus();\n  return (\n    <Button variant=\"accent\" type=\"submit\" className=\"w-full\" aria-disabled={pending}>\n      {pending ? 'Authenticating...' : 'Sign In'}\n    </Button>\n  );\n}\n\nexport function LoginForm() {\n  const initialState: LoginFormState = undefined;\n  const [state, dispatch] = useActionState(login, initialState);\n\n  return (\n    <Card className=\"w-full max-w-sm border-2 border-primary/20 shadow-lg shadow-primary/10\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <CardTitle className=\"text-2xl font-bold\">Vendetta</CardTitle>\n        <CardDescription>\n          Enter your credentials to access the command center\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form action={dispatch} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              placeholder=\"operative-id\"\n              defaultValue=\"bomberox\"\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              defaultValue=\"123456789\"\n              required\n            />\n          </div>\n\n          {state?.message && (\n             <Alert variant=\"destructive\">\n               <AlertCircle className=\"h-4 w-4\" />\n               <AlertTitle>Authentication Error</AlertTitle>\n               <AlertDescription>{state.message}</AlertDescription>\n             </Alert>\n          )}\n          \n          <LoginButton />\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n"
        },
        {
          "name": "recursos-bar.tsx",
          "type": "file",
          "content": "\n'use client'\n\nimport { LiveClock } from \"./live-clock\";\nimport type { UserWithProgress } from '@/lib/types';\nimport { useProperty } from '@/contexts/property-context';\nimport Image from \"next/image\";\nimport { calculateStorageCapacity, calcularProduccionTotalPorSegundo, ProductionData } from \"@/lib/formulas/room-formulas\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { useEffect, useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from \"@/components/ui/dialog\";\nimport { Button } from \"./ui/button\";\nimport { Separator } from \"./ui/separator\";\nimport { Progress } from \"./ui/progress\";\n\nconst resourceIcons: { [key: string]: string } = {\n    armas: '/img/recursos/armas.svg',\n    municion: '/img/recursos/municion.svg',\n    alcohol: '/img/recursos/alcohol.svg',\n    dolares: '/img/recursos/dolares.svg',\n};\n\nfunction AnimatedNumber({ value }: { value: number }) {\n    const [currentValue, setCurrentValue] = useState(value);\n\n    useEffect(() => {\n        const diff = value - currentValue;\n        if (Math.abs(diff) < 1) {\n            setCurrentValue(value);\n            return;\n        }\n\n        let start: number | null = null;\n        const duration = 1000; // ms\n\n        const step = (timestamp: number) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const percentage = Math.min(progress / duration, 1);\n            const nextValue = currentValue + diff * percentage;\n            \n            if (progress < duration) {\n                setCurrentValue(nextValue);\n                requestAnimationFrame(step);\n            } else {\n                 setCurrentValue(value); // Ensure it ends on the exact value\n            }\n        };\n\n        requestAnimationFrame(step);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [value]);\n\n    return <span>{Math.floor(currentValue).toLocaleString('de-DE')}</span>;\n}\n\n\nfunction formatNumber(num: number | bigint | undefined) {\n    if (typeof num === 'undefined') return '0';\n    const numberValue = Number(num);\n    return Math.floor(numberValue).toLocaleString('de-DE');\n}\n\nfunction formatDuration(totalSeconds: number): string {\n    if (totalSeconds <= 0 || !isFinite(totalSeconds)) return \"\u221e\";\n    \n    const d = Math.floor(totalSeconds / (3600*24));\n    const h = Math.floor(totalSeconds % (3600*24) / 3600);\n    const m = Math.floor(totalSeconds % 3600 / 60);\n\n    let result = '';\n    if (d > 0) result += `${d}d `;\n    if (h > 0) result += `${h}h `;\n    if (m > 0 && d === 0) result += `${m}m`; // Only show minutes if days are not shown\n    \n    return result.trim() || \"< 1m\";\n}\n\ninterface ResourceBarProps {\n    user: UserWithProgress | null;\n}\n\nconst ResourceTooltipContent = ({ resource, capacity, production, safeStorage }: { resource: any, capacity: number, production: ProductionData, safeStorage: number }) => {\n    const timeToFill = production.produccionNeta > 0 ? (capacity - Number(resource.value)) / (production.produccionNeta / 3600) : Infinity;\n\n    return (\n        <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Producci\u00f3n:</span>\n                <span className=\"font-mono text-green-400\">+{formatNumber(production.produccionBruta)}/h</span>\n            </div>\n             {production.consumoTotal > 0 && (\n                <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Consumo:</span>\n                    <span className=\"font-mono text-destructive\">-{formatNumber(production.consumoTotal)}/h</span>\n                </div>\n            )}\n             {production.consumoTotal > 0 && (\n                 <>\n                    <Separator className=\"my-1\"/>\n                     <div className=\"flex justify-between items-center font-bold\">\n                        <span>Balance final:</span>\n                        <span className={`font-mono ${production.produccionNeta >= 0 ? 'text-green-400' : 'text-destructive'}`}>\n                            {production.produccionNeta >= 0 ? '+' : ''}{formatNumber(production.produccionNeta)}/h\n                        </span>\n                    </div>\n                 </>\n             )}\n            <Separator className=\"my-2\"/>\n             <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Almacenamiento:</span>\n                <span className=\"font-mono\">{formatNumber(capacity)}</span>\n            </div>\n             <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Seguro:</span>\n                <span className=\"font-mono\">{formatNumber(safeStorage)}</span>\n            </div>\n             <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Tiempo hasta llenar:</span>\n                <span className=\"font-mono\">{formatDuration(timeToFill)}</span>\n            </div>\n        </div>\n    )\n}\n\nexport function ResourceBar({ user }: ResourceBarProps) {\n    const { selectedProperty } = useProperty();\n    const isMobile = useIsMobile();\n\n    if (!user || !selectedProperty) {\n        return (\n            <div className=\"w-full bg-black/50 backdrop-blur-md text-white p-2\">\n                <div className=\"container mx-auto flex items-center justify-center\">\n                    <p>Selecciona una propiedad para ver tus recursos.</p>\n                </div>\n            </div>\n        );\n    }\n\n    const capacity = calculateStorageCapacity(selectedProperty);\n    const production = calcularProduccionTotalPorSegundo(selectedProperty);\n\n    const resources = [\n        { name: 'ARMAS', key: 'armas', value: selectedProperty.armas, icon: resourceIcons.armas, capacity: capacity.armas, production: production.armas, safe: Math.floor(capacity.armas * 0.1) },\n        { name: 'MUNICION', key: 'municion', value: selectedProperty.municion, icon: resourceIcons.municion, capacity: capacity.municion, production: production.municion, safe: Math.floor(capacity.municion * 0.1) },\n        { name: 'ALCOHOL', key: 'alcohol', value: selectedProperty.alcohol, icon: resourceIcons.alcohol, capacity: capacity.alcohol, production: production.alcohol, safe: Math.floor(capacity.alcohol * 0.1) },\n        { name: 'DOLARES', key: 'dolares', value: selectedProperty.dolares, icon: resourceIcons.dolares, capacity: capacity.dolares, production: production.dolares, safe: Math.floor(capacity.dolares * 0.1) },\n    ];\n\n    return (\n        <header className=\"w-full bg-black/50 backdrop-blur-md text-white shadow-md z-20 border-b border-white/10\" suppressHydrationWarning>\n            <div className=\"container mx-auto flex h-full items-center justify-between p-2\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 items-center justify-around gap-x-4 gap-y-2 w-full\">\n                    {resources.map((res) => {\n                         const resourceName = res.name.charAt(0) + res.name.slice(1).toLowerCase();\n                         const percentage = res.capacity > 0 ? (Number(res.value) / res.capacity) * 100 : 0;\n                         const progressColor = percentage > 95 ? \"bg-red-600\" : percentage > 80 ? \"bg-yellow-500\" : \"bg-primary\";\n                         \n                         const trigger = (\n                             <div className=\"flex flex-col items-center gap-0.5 w-full\">\n                                <div className=\"flex items-center gap-2\">\n                                     <Image src={res.icon} alt={res.name} width={16} height={16} className=\"h-4 w-4\" />\n                                     <span className=\"text-xs font-semibold tracking-wider uppercase text-muted-foreground\">{res.name}</span>\n                                 </div>\n                                <span className=\"text-xl font-bold tabular-nums text-foreground font-mono\">\n                                     <AnimatedNumber value={Number(res.value)} />\n                                </span>\n                                <Progress value={percentage} className=\"h-1 mt-1 bg-muted/50\" indicatorClassName={progressColor} />\n                             </div>\n                        );\n\n                        if(isMobile) {\n                            return (\n                                <Dialog key={res.name}>\n                                    <DialogTrigger asChild>\n                                        {trigger}\n                                    </DialogTrigger>\n                                    <DialogContent>\n                                        <DialogHeader>\n                                            <DialogTitle>Detalles de {resourceName}</DialogTitle>\n                                        </DialogHeader>\n                                        <ResourceTooltipContent resource={res} capacity={res.capacity} production={res.production} safeStorage={res.safe} />\n                                         <DialogFooter>\n                                            <DialogClose asChild>\n                                                <Button type=\"button\" variant=\"secondary\">Cerrar</Button>\n                                            </DialogClose>\n                                        </DialogFooter>\n                                    </DialogContent>\n                                </Dialog>\n                            )\n                        }\n\n                        return (\n                            <TooltipProvider key={res.name} delayDuration={0}>\n                                 <Tooltip>\n                                    <TooltipTrigger asChild>{trigger}</TooltipTrigger>\n                                    <TooltipContent>\n                                        <div className=\"p-2 space-y-2\">\n                                            <h3 className=\"font-bold text-lg text-primary\">{resourceName}</h3>\n                                            <Separator />\n                                            <ResourceTooltipContent resource={res} capacity={res.capacity} production={res.production} safeStorage={res.safe} />\n                                        </div>\n                                    </TooltipContent>\n                                </Tooltip>\n                            </TooltipProvider>\n                        )\n                    })}\n                </div>\n                <div className=\"hidden lg:flex\">\n                     <LiveClock />\n                </div>\n            </div>\n        </header>\n    );\n}\n\n    "
        },
        {
          "name": "register-form.tsx",
          "type": "file",
          "content": "// This component is no longer used and can be deleted. It has been replaced by auth-form.tsx\n"
        },
        {
          "name": "ui",
          "type": "directory",
          "children": [
            {
              "name": "accordion.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"
            },
            {
              "name": "alert-dialog.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.memo(React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n)))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.memo(React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n)))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.memo(React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n)))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.memo(React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n)))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.memo(React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n)))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.memo(React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n)))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
            },
            {
              "name": "alert.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n)))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.memo(React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n)))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.memo(React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n)))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"
            },
            {
              "name": "avatar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.memo(React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n)))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.memo(React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n)))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.memo(React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n)))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"
            },
            {
              "name": "badge.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nconst Badge = React.memo(({ className, variant, ...props }: BadgeProps) => {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n})\nBadge.displayName = \"Badge\"\n\nexport { Badge, badgeVariants }\n"
            },
            {
              "name": "button.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        accent: \"bg-accent text-accent-foreground hover:bg-accent/90\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
            },
            {
              "name": "calendar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nconst Calendar = React.memo(({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) => {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" {...props} />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" {...props} />,\n      }}\n      {...props}\n    />\n  )\n})\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"
            },
            {
              "name": "card.tsx",
              "type": "file",
              "content": "\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card/80 text-card-foreground shadow-sm backdrop-blur-sm border-accent/50 hover:-translate-y-1 hover:shadow-lg hover:shadow-primary/20\",\n      className\n    )}\n    {...props}\n  />\n)))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n)))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.memo(React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n)))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.memo(React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n)))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n)))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n)))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
            },
            {
              "name": "carousel.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.memo(React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}))\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.memo(React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}))\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n"
            },
            {
              "name": "chart.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"
            },
            {
              "name": "checkbox.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.memo(React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n)))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
            },
            {
              "name": "collapsible.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\nimport * as React from \"react\"\n\nconst Collapsible = React.memo(CollapsiblePrimitive.Root)\nCollapsible.displayName = \"Collapsible\"\n\nconst CollapsibleTrigger = React.memo(CollapsiblePrimitive.CollapsibleTrigger)\nCollapsibleTrigger.displayName = \"CollapsibleTrigger\"\n\nconst CollapsibleContent = React.memo(CollapsiblePrimitive.CollapsibleContent)\nCollapsibleContent.displayName = \"CollapsibleContent\"\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n"
            },
            {
              "name": "dialog.tsx",
              "type": "file",
              "content": "\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-300 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-top-fade data-[state=open]:slide-in-from-left-1/2 sm:rounded-lg\",\n        \"max-h-[90svh] flex flex-col\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left shrink-0\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 shrink-0\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
            },
            {
              "name": "dropdown-menu.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"
            },
            {
              "name": "form.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"
            },
            {
              "name": "input.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.memo(React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n))\nInput.displayName = \"Input\"\n\nexport { Input }\n"
            },
            {
              "name": "label.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
            },
            {
              "name": "menubar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n"
            },
            {
              "name": "popover.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"
            },
            {
              "name": "progress.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & { indicatorClassName?: string }\n>(({ className, value, indicatorClassName, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\"h-full w-full flex-1 bg-primary transition-all duration-500 ease-in-out\", indicatorClassName)}\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"
            },
            {
              "name": "radio-group.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.memo(React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n}))\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.memo(React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}))\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"
            },
            {
              "name": "scroll-area.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.memo(React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n)))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.memo(React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n)))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"
            },
            {
              "name": "select.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
            },
            {
              "name": "separator.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
            },
            {
              "name": "sheet.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"
            },
            {
              "name": "sidebar.tsx",
              "type": "file",
              "content": "\n\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent, SheetTitle } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetTitle className=\"sr-only\">Menu</SheetTitle>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-300 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-in-out\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-300 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-in-out md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n))\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.memo(React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}))\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.memo(React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}))\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n}))\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.memo(React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n}))\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}))\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}))\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.memo(React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n}))\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}))\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}))\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}))\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.memo(React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}))\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n)))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.memo(React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n)))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.memo(React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n)))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    as?: React.ElementType\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      as: Comp = \"button\",\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.memo(React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}))\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n)))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.memo(React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}))\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.memo(React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n)))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.memo(React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />))\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.memo(React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}))\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n"
            },
            {
              "name": "skeleton.tsx",
              "type": "file",
              "content": "\nimport { cn } from \"@/lib/utils\"\nimport * as React from \"react\"\n\nconst Skeleton = React.memo(function Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"rounded-md bg-muted/50 relative overflow-hidden before:absolute before:inset-0 before:-translate-x-full before:animate-shimmer before:bg-gradient-to-r before:from-transparent before:via-white/10 before:to-transparent\", className)}\n      {...props}\n    />\n  )\n})\n\nexport { Skeleton }\n"
            },
            {
              "name": "slider.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.memo(React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n)))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"
            },
            {
              "name": "switch.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.memo(React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n)))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
            },
            {
              "name": "table.tsx",
              "type": "file",
              "content": "\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.memo(React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n)))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.memo(React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n)))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.memo(React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n)))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.memo(React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n)))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.memo(React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b border-white/10 transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n)))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.memo(React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 bg-muted/50 uppercase tracking-wider text-xs\",\n      className\n    )}\n    {...props}\n  />\n)))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.memo(React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n)))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.memo(React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n)))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"
            },
            {
              "name": "tabs.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = React.memo(TabsPrimitive.Root)\nTabs.displayName = \"Tabs\"\n\n\nconst TabsList = React.memo(React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n)))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.memo(React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n)))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.memo(React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n)))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
            },
            {
              "name": "textarea.tsx",
              "type": "file",
              "content": "import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.memo(React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n));\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"
            },
            {
              "name": "toast.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"
            },
            {
              "name": "toaster.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n"
            },
            {
              "name": "toggle-group.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n"
            },
            {
              "name": "toggle.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n"
            },
            {
              "name": "tooltip.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      \"tooltip-content-custom\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
            }
          ]
        }
      ]
    },
    {
      "name": "contexts",
      "type": "directory",
      "children": [
        {
          "name": "property-context.tsx",
          "type": "file",
          "content": "'use client';\n\nimport React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\nimport type { FullPropiedad } from '@/lib/types';\n\ninterface PropertyContextType {\n  selectedProperty: FullPropiedad | null;\n  setSelectedPropertyById: (propertyId: string) => void;\n}\n\nconst PropertyContext = createContext<PropertyContextType | undefined>(undefined);\n\nexport const PropertyProvider = ({ children, properties }: { children: ReactNode, properties: FullPropiedad[] }) => {\n  const [selectedProperty, setSelectedProperty] = useState<FullPropiedad | null>(null);\n\n  useEffect(() => {\n    // Initialize with the first property if none is selected\n    if (properties && properties.length > 0 && !selectedProperty) {\n      // Find 'Propiedad Principal' or default to the first one\n      const mainProperty = properties.find(p => p.nombre === 'Propiedad Principal') || properties[0];\n      setSelectedProperty(mainProperty);\n    }\n  }, [properties, selectedProperty]);\n\n  const setSelectedPropertyById = (propertyId: string) => {\n    const property = properties.find(p => p.id === propertyId) || null;\n    setSelectedProperty(property);\n  };\n\n  return (\n    <PropertyContext.Provider value={{ selectedProperty, setSelectedPropertyById }}>\n      {children}\n    </PropertyContext.Provider>\n  );\n};\n\nexport const useProperty = (): PropertyContextType => {\n  const context = useContext(PropertyContext);\n  if (context === undefined) {\n    throw new Error('useProperty must be used within a PropertyProvider');\n  }\n  return context;\n};\n"
        }
      ]
    },
    {
      "name": "hooks",
      "type": "directory",
      "children": [
        {
          "name": "use-mobile.ts",
          "type": "file",
          "content": "'use client';\n\nimport { useState, useEffect } from 'react';\n\nexport function useIsMobile(breakpoint: number = 768): boolean {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < breakpoint);\n    };\n\n    handleResize(); \n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [breakpoint]);\n\n  return isMobile;\n}\n"
        },
        {
          "name": "use-toast.ts",
          "type": "file",
          "content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
        }
      ]
    },
    {
      "name": "lib",
      "type": "directory",
      "children": [
        {
          "name": "actions",
          "type": "directory",
          "children": [
            {
              "name": "admin.actions.ts",
              "type": "file",
              "content": "\n\n'use server';\n\nimport { revalidatePath } from \"next/cache\";\nimport prisma from \"../prisma/prisma\";\nimport { ConfiguracionHabitacion, ConfiguracionTropa, ConfiguracionEntrenamiento, TipoTropa, TropaBonusContrincante } from \"@prisma/client\";\nimport { verifyAdminSession } from \"../auth-admin\";\n\n\nconst parseNumber = (val: FormDataEntryValue | null) => Number(val) || 0;\nconst parseFloatValue = (val: FormDataEntryValue | null) => parseFloat(String(val)) || 0;\nconst parseBigInt = (val: FormDataEntryValue | null) => BigInt(String(val || '0'));\nconst parseString = (val: FormDataEntryValue | null) => String(val || '');\nconst parseNullString = (val: FormDataEntryValue | null) => val ? String(val) : null;\nconst parseStringArray = (val: FormDataEntryValue | null) => parseString(val).split(',').map(s => s.trim()).filter(Boolean);\n\n\n// Room Config CRUD\nexport async function saveRoomConfig(formData: FormData) {\n    const isAdmin = await verifyAdminSession();\n    if (!isAdmin) return { error: \"No autorizado\" };\n\n    const originalId = parseString(formData.get('originalId'));\n    const id = parseString(formData.get('id')) || originalId;\n\n    if (!id) {\n        return { error: \"El ID de la habitaci\u00f3n es obligatorio.\" };\n    }\n\n    const data: Omit<ConfiguracionHabitacion, 'createdAt' | 'updatedAt'> = {\n        id,\n        nombre: parseString(formData.get('nombre')),\n        descripcion: parseString(formData.get('descripcion')),\n        urlImagen: parseString(formData.get('urlImagen')),\n        costoArmas: parseBigInt(formData.get('costoArmas')),\n        costoMunicion: parseBigInt(formData.get('costoMunicion')),\n        costoDolares: parseBigInt(formData.get('costoDolares')),\n        duracion: parseNumber(formData.get('duracion')),\n        produccionBase: parseFloatValue(formData.get('produccionBase')),\n        produccionRecurso: parseNullString(formData.get('produccionRecurso')),\n        puntos: parseFloatValue(formData.get('puntos')),\n    };\n\n    const requirementIds = formData.getAll('requirement_ids').map(String);\n    const newRequirements = requirementIds.map(reqId => {\n        const level = parseNumber(formData.get(`requirement_level_${reqId}`));\n        if (level <= 0) {\n            throw new Error(`Nivel inv\u00e1lido para el requisito ${reqId}`);\n        }\n        return { requiredRoomId: reqId, requiredLevel: level };\n    });\n\n    try {\n        await prisma.$transaction(async (tx) => {\n             if (originalId && originalId !== id) {\n                await tx.roomRequirement.deleteMany({ where: { OR: [{ roomId: originalId }, { requiredRoomId: originalId }] } });\n                await tx.configuracionHabitacion.delete({ where: { id: originalId } });\n            }\n\n            await tx.configuracionHabitacion.upsert({\n                where: { id: id },\n                update: data,\n                create: data,\n            });\n\n            await tx.roomRequirement.deleteMany({\n                where: { roomId: id }\n            });\n\n            if (newRequirements.length > 0) {\n                await tx.roomRequirement.createMany({\n                    data: newRequirements.map(req => ({\n                        roomId: id,\n                        requiredRoomId: req.requiredRoomId,\n                        requiredLevel: req.requiredLevel\n                    }))\n                });\n            }\n        });\n        revalidatePath('/admin/panel');\n        return { success: true };\n    } catch (e: any) {\n        return { error: e.message };\n    }\n}\n\nexport async function deleteRoomConfig(id: string) {\n    const isAdmin = await verifyAdminSession();\n    if (!isAdmin) return { error: \"No autorizado\" };\n\n    try {\n         await prisma.$transaction(async (tx) => {\n            await tx.roomRequirement.deleteMany({\n                where: { OR: [{ roomId: id }, { requiredRoomId: id }] }\n            });\n            await tx.configuracionHabitacion.delete({ where: { id } });\n        });\n        revalidatePath('/admin/panel');\n        return { success: true };\n    } catch (e: any) {\n        return { error: e.message };\n    }\n}\n\n\n// Training Config CRUD\nexport async function saveTrainingConfig(formData: FormData) {\n    const isAdmin = await verifyAdminSession();\n    if (!isAdmin) return { error: \"No autorizado\" };\n\n    const originalId = parseString(formData.get('originalId'));\n    const id = parseString(formData.get('id')) || originalId;\n    \n    if (!id) {\n        return { error: \"El ID del entrenamiento es obligatorio.\" };\n    }\n\n    const data: Omit<ConfiguracionEntrenamiento, 'createdAt' | 'updatedAt'> = {\n        id,\n        nombre: parseString(formData.get('nombre')),\n        urlImagen: parseString(formData.get('urlImagen')),\n        costoArmas: parseBigInt(formData.get('costoArmas')),\n        costoMunicion: parseBigInt(formData.get('costoMunicion')),\n        costoDolares: parseBigInt(formData.get('costoDolares')),\n        duracion: parseNumber(formData.get('duracion')),\n        puntos: parseFloatValue(formData.get('puntos')),\n    };\n\n    const requirementIds = formData.getAll('requirement_ids').map(String);\n    const newRequirements = requirementIds.map(reqId => {\n        const level = parseNumber(formData.get(`requirement_level_${reqId}`));\n        if (level <= 0) {\n            throw new Error(`Nivel inv\u00e1lido para el requisito ${reqId}`);\n        }\n        return { requiredTrainingId: reqId, requiredLevel: level };\n    });\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            if (originalId && originalId !== id) {\n                 await tx.trainingRequirement.deleteMany({ where: { OR: [{ trainingId: originalId }, { requiredTrainingId: originalId }] } });\n                 await tx.configuracionEntrenamiento.delete({ where: { id: originalId } });\n            }\n\n            await tx.configuracionEntrenamiento.upsert({\n                where: { id: id },\n                update: data,\n                create: data,\n            });\n\n            await tx.trainingRequirement.deleteMany({\n                where: { trainingId: id }\n            });\n\n            if (newRequirements.length > 0) {\n                await tx.trainingRequirement.createMany({\n                    data: newRequirements.map(req => ({\n                        trainingId: id,\n                        requiredTrainingId: req.requiredTrainingId,\n                        requiredLevel: req.requiredLevel\n                    }))\n                });\n            }\n        });\n        revalidatePath('/admin/panel');\n        return { success: true };\n    } catch (e: any) {\n        return { error: e.message };\n    }\n}\n\nexport async function deleteTrainingConfig(id: string) {\n    const isAdmin = await verifyAdminSession();\n    if (!isAdmin) return { error: \"No autorizado\" };\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            await tx.trainingRequirement.deleteMany({\n                where: { OR: [{ trainingId: id }, { requiredTrainingId: id }] }\n            });\n            await tx.configuracionEntrenamiento.delete({ where: { id } });\n        });\n        revalidatePath('/admin/panel');\n        return { success: true };\n    } catch (e: any) {\n        return { error: e.message };\n    }\n}\n\n\n// Troop Config CRUD\nexport async function saveTroopConfig(formData: FormData) {\n    const isAdmin = await verifyAdminSession();\n    if (!isAdmin) return { error: \"No autorizado\" };\n    \n    const id = parseString(formData.get('idForm')) || parseString(formData.get('id'));\n     if (!id) {\n        return { error: \"El ID de la tropa es obligatorio.\" };\n    }\n\n    const data: Omit<ConfiguracionTropa, 'createdAt' | 'updatedAt'> = {\n        id,\n        nombre: parseString(formData.get('nombre')),\n        urlImagen: parseString(formData.get('urlImagen')),\n        descripcion: parseString(formData.get('descripcion')),\n        costoArmas: parseBigInt(formData.get('costoArmas')),\n        costoMunicion: parseBigInt(formData.get('costoMunicion')),\n        costoDolares: parseBigInt(formData.get('costoDolares')),\n        duracion: parseNumber(formData.get('duracion')),\n        puntos: parseFloatValue(formData.get('puntos')),\n        ataque: parseNumber(formData.get('ataque')),\n        defensa: parseNumber(formData.get('defensa')),\n        capacidad: parseNumber(formData.get('capacidad')),\n        velocidad: parseBigInt(formData.get('velocidad')),\n        salario: parseNumber(formData.get('salario')),\n        tipo: parseString(formData.get('tipo')) as TipoTropa,\n        requisitos: parseStringArray(formData.get('requisitos')),\n        bonusAtaque: parseStringArray(formData.get('bonusAtaque')),\n        bonusDefensa: parseStringArray(formData.get('bonusDefensa')),\n    };\n\n    const bonusContrincantes = JSON.parse(parseString(formData.get('bonusContrincantes')) || '[]') as {tropaDefensoraId: string, factorPrioridad: number}[];\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            await tx.configuracionTropa.upsert({\n                where: { id: data.id },\n                update: data,\n                create: data,\n            });\n\n            await tx.tropaBonusContrincante.deleteMany({\n                where: { tropaAtacanteId: id }\n            });\n\n            if (bonusContrincantes.length > 0) {\n                 await tx.tropaBonusContrincante.createMany({\n                    data: bonusContrincantes.map((b) => ({\n                        tropaAtacanteId: id,\n                        tropaDefensoraId: b.tropaDefensoraId,\n                        factorPrioridad: b.factorPrioridad\n                    }))\n                });\n            }\n        });\n        revalidatePath('/admin/panel/troops');\n        return { success: true };\n    } catch (e: any) {\n        return { error: e.message };\n    }\n}\n\nexport async function deleteTroopConfig(id: string) {\n    const isAdmin = await verifyAdminSession();\n    if (!isAdmin) return { error: \"No autorizado\" };\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            await tx.tropaBonusContrincante.deleteMany({\n                where: { OR: [{ tropaAtacanteId: id }, { tropaDefensoraId: id }] }\n            });\n            await tx.configuracionTropa.delete({ where: { id } });\n        });\n        revalidatePath('/admin/panel/troops');\n        return { success: true };\n    } catch (e: any) {\n        return { error: e.message };\n    }\n}\n\n// Bonus Config\nexport async function saveTroopBonusConfig(bonusData: Omit<TropaBonusContrincante, 'id'>[]) {\n    const isAdmin = await verifyAdminSession();\n    if (!isAdmin) return { error: \"No autorizado\" };\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            await tx.tropaBonusContrincante.deleteMany({});\n            if (bonusData.length > 0) {\n                await tx.tropaBonusContrincante.createMany({\n                    data: bonusData,\n                });\n            }\n        });\n        revalidatePath('/admin/panel/bonus');\n        return { success: true };\n    } catch (e: any) {\n        console.error(e);\n        return { error: \"Error al guardar la configuraci\u00f3n de bonus.\" };\n    }\n}\n"
            },
            {
              "name": "auth.actions.ts",
              "type": "file",
              "content": "\n\n'use server';\n\nimport prisma from \"../prisma/prisma\";\nimport { revalidatePath } from \"next/cache\";\nimport { cookies, headers } from \"next/headers\";\nimport { getUserWithProgressByUsername } from \"../data\";\nimport { SESSION_COOKIE_NAME } from \"../constants\";\n\n\ninterface LoginInput {\n    username: string;\n    password?: string;\n}\n\nexport async function login(credentials: LoginInput) {\n    const { username, password } = credentials;\n\n    const user = await getUserWithProgressByUsername(username);\n    if (!user) {\n        return { error: 'Usuario no encontrado.' };\n    }\n    \n    // Special case for 'bomberox' to bypass password check during development\n    if (username.toLowerCase() !== 'bomberox' && user.password !== password) {\n        return { error: 'La contrase\u00f1a es incorrecta.' };\n    }\n    \n    // Set the session cookie\n    (await\n        // Set the session cookie\n        cookies()).set(SESSION_COOKIE_NAME, user.username, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: 60 * 60 * 24 * 7, // One week\n        path: '/',\n    });\n\n    // Log login history\n    try {\n        const headerList = await headers();\n        const ip = headerList.get('x-forwarded-for') ?? 'unknown';\n        const userAgent = headerList.get('user-agent') ?? 'unknown';\n        \n        await prisma.loginHistory.create({\n        data: {\n            userId: user.id,\n            ipAddress: ip,\n            userAgent: userAgent,\n        }\n        })\n    } catch (e) {\n        console.error(\"Failed to log login history:\", e);\n    }\n    \n    return { success: true };\n}\n\nexport async function logout() {\n  (await cookies()).delete(SESSION_COOKIE_NAME);\n}\n\n\ninterface RegisterUserInput {\n    username: string;\n    password: string;\n    location: {\n        ciudad: number;\n        barrio: number;\n        edificio: number;\n    }\n}\n\nasync function findAvailableSlot(): Promise<{ ciudad: number; barrio: number; edificio: number; }> {\n    for (let c = 1; c <= 100; c++) {\n        for (let b = 1; b <= 100; b++) {\n            for (let e = 1; e <= 225; e++) {\n                const existing = await prisma.propiedad.findUnique({\n                    where: { ciudad_barrio_edificio: { ciudad: c, barrio: b, edificio: e } }\n                });\n                if (!existing) {\n                    return { ciudad: c, barrio: b, edificio: e };\n                }\n            }\n        }\n    }\n    return { ciudad: 1, barrio: 1, edificio: Math.floor(Math.random() * 225) + 1 };\n}\n\nexport async function registerUser(input: RegisterUserInput) {\n    const { username, password, location } = input;\n\n    const existingUser = await prisma.user.findUnique({\n        where: { username }\n    });\n\n    if (existingUser) {\n        return { error: 'El nombre de usuario ya est\u00e1 en uso.' };\n    }\n\n    let finalLocation = location;\n    const existingProperty = await prisma.propiedad.findUnique({\n        where: { ciudad_barrio_edificio: { ciudad: location.ciudad, barrio: location.barrio, edificio: location.edificio } }\n    });\n\n    if (existingProperty) {\n        finalLocation = await findAvailableSlot();\n    }\n\n    try {\n        const allRoomConfigs = await prisma.configuracionHabitacion.findMany();\n\n        const newUser = await prisma.user.create({\n            data: {\n                username,\n                password,\n                name: username,\n                title: 'Nuevo Jefe',\n                avatarUrl: `https://placehold.co/128x128.png`,\n                propiedades: {\n                    create: {\n                        nombre: 'Propiedad Principal',\n                        ciudad: finalLocation.ciudad,\n                        barrio: finalLocation.barrio,\n                        edificio: finalLocation.edificio,\n                        armas: 10000,\n                        municion: 10000,\n                        alcohol: 10000,\n                        dolares: 10000,\n                        habitaciones: {\n                            create: allRoomConfigs.map(config => ({\n                                configuracionHabitacionId: config.id,\n                                nivel: 1\n                            }))\n                        }\n                    }\n                },\n                puntuacion: {\n                    create: {\n                        puntosHabitaciones: 0,\n                        puntosTropas: 0,\n                        puntosEntrenamientos: 0,\n                        puntosTotales: 0,\n                    }\n                }\n            }\n        });\n\n        await login({ username: newUser.username, password: newUser.password });\n\n        revalidatePath('/');\n        return { success: true, user: newUser };\n\n    } catch (error) {\n        console.error('Error durante el registro:', error);\n        return { error: 'Ocurri\u00f3 un error en el servidor durante el registro.' };\n    }\n}\n"
            },
            {
              "name": "brawl.actions.ts",
              "type": "file",
              "content": "\n\n\n'use server'\n\nimport prisma from \"../prisma/prisma\";\nimport { runBattleSimulation } from \"./simulation.actions\";\nimport { ColaMisiones, MessageCategory } from \"@prisma/client\";\nimport type { SimulationInput, BattleReport, ResourceCost } from \"../types/simulation.types\";\nimport { getTroopConfigurations } from \"../data\";\nimport { calculateSafeStorage } from \"../formulas/room-formulas\";\n\nexport async function handleAttackMission(mision: ColaMisiones) {\n    const atacante = await prisma.user.findUnique({ \n        where: { id: mision.userId },\n        include: {\n            propiedades: { include: { TropaUsuario: true } },\n            entrenamientos: true,\n        }\n    });\n    if (!atacante) {\n        console.error(\"Atacante no encontrado para la misi\u00f3n:\", mision.id);\n        await prisma.colaMisiones.delete({ where: { id: mision.id } });\n        return;\n    }\n\n    const propiedadDefensora = await prisma.propiedad.findUnique({\n        where: {\n            ciudad_barrio_edificio: {\n                ciudad: mision.destinoCiudad,\n                barrio: mision.destinoBarrio,\n                edificio: mision.destinoEdificio,\n            }\n        },\n        include: {\n            habitaciones: {\n                include: {\n                    configuracionHabitacion: true\n                }\n            },\n            user: true,\n        }\n    });\n\n    if (!propiedadDefensora || !propiedadDefensora.userId) {\n        await prisma.colaMisiones.update({\n            where: { id: mision.id },\n            data: { \n                tipoMision: 'REGRESO',\n                fechaRegreso: new Date(new Date().getTime() + mision.duracionViaje * 1000)\n            }\n        });\n        return;\n    }\n\n    const defensor = await prisma.user.findUnique({\n        where: { id: propiedadDefensora.userId },\n        include: {\n            propiedades: {\n                include: {\n                    TropaUsuario: { include: { configuracionTropa: true } },\n                    TropaSeguridadUsuario: { include: { configuracionTropa: true } }\n                }\n            },\n            entrenamientos: true,\n        }\n    });\n    \n    if (!defensor) {\n        console.error(\"Defensor no encontrado para la propiedad:\", propiedadDefensora.id);\n         await prisma.colaMisiones.update({\n            where: { id: mision.id },\n            data: { \n                tipoMision: 'REGRESO',\n                fechaRegreso: new Date(new Date().getTime() + mision.duracionViaje * 1000)\n            }\n        });\n        return;\n    }\n    \n    const attackerTroops = (mision.tropas as any[]).map(t => ({ id: t.id, quantity: t.cantidad }));\n\n    const attackerInput: SimulationInput = {\n        troops: attackerTroops,\n        trainings: atacante.entrenamientos.map(t => ({ id: t.configuracionEntrenamientoId, level: t.nivel })),\n        defenses: [],\n        buildingsLevel: 1, \n        propertyCount: atacante.propiedades.length,\n    };\n\n    const defenderInput: SimulationInput = {\n        troops: defensor.propiedades.flatMap(p => [...p.TropaUsuario, ...p.TropaSeguridadUsuario].map(t => ({ id: t.configuracionTropa.id, quantity: t.cantidad }))),\n        trainings: defensor.entrenamientos.map(t => ({ id: t.configuracionEntrenamientoId, level: t.nivel })),\n        defenses: [], \n        buildingsLevel: 1,\n        propertyCount: defensor.propiedades?.length || 1\n    };\n\n    const report = await runBattleSimulation(attackerInput, defenderInput) as BattleReport;\n    \n    let tropaRegreso: { id: string, cantidad: number }[];\n    let recursosSaqueados: ResourceCost | null = null;\n\n    if (report.rounds.length > 0) {\n        tropaRegreso = report.rounds[report.rounds.length - 1].attacker.troops\n            .map(t => ({ id: t.id, cantidad: t.initialQuantity - t.lostQuantity }))\n            .filter(t => t.cantidad > 0);\n    } else {\n        tropaRegreso = (mision.tropas as any[]).map(t => ({ id: t.id, cantidad: t.cantidad }));\n    }\n    \n    if (report.winner === 'attacker') {\n        const troopConfigs = await getTroopConfigurations();\n        const troopConfigsMap = new Map(troopConfigs.map(t => [t.id, t]));\n\n        const survivingTroops = tropaRegreso;\n\n        const totalCapacity = survivingTroops.reduce((sum, troop) => {\n            const config = troopConfigsMap.get(troop.id);\n            return sum + ((config?.capacidad || 0) * troop.cantidad);\n        }, 0);\n\n        const safeStorage = calculateSafeStorage(propiedadDefensora as any);\n\n        const lootableResources: ResourceCost = {\n            armas: Math.max(0, Number(propiedadDefensora.armas) - safeStorage.armas),\n            municion: Math.max(0, Number(propiedadDefensora.municion) - safeStorage.municion),\n            dolares: Math.max(0, Number(propiedadDefensora.dolares) - safeStorage.dolares),\n            alcohol: Math.max(0, Number(propiedadDefensora.alcohol) - safeStorage.alcohol),\n        };\n\n        const totalLootable = Object.values(lootableResources).reduce((sum, val) => sum + val, 0);\n        const totalToLoot = Math.min(totalCapacity, totalLootable);\n        \n        const lootedResources: ResourceCost = { armas: 0, municion: 0, dolares: 0, alcohol: 0 };\n\n        if (totalToLoot > 0) {\n            const lootableTypes = Object.entries(lootableResources).filter(([, val]) => val > 0);\n            const lootPerType = totalToLoot / lootableTypes.length;\n\n            lootableTypes.forEach(([key]) => {\n                const resourceKey = key as keyof ResourceCost;\n                const amount = Math.min(lootableResources[resourceKey], lootPerType);\n                lootedResources[resourceKey] = Math.floor(amount);\n            });\n        }\n        \n        report.finalStats.attacker.lootedResources = lootedResources;\n        recursosSaqueados = lootedResources;\n    }\n\n\n    const bigIntReplacer = (key: any, value: any) => typeof value === 'bigint' ? value.toString() : value;\n    const serializableReport = JSON.parse(JSON.stringify(report, bigIntReplacer));\n\n    const honorGanadoAtacante = report.finalStats.defender.pointsLost;\n    const honorGanadoDefensor = report.finalStats.attacker.pointsLost;\n\n    await prisma.$transaction(async (tx) => {\n        const battleReport = await tx.battleReport.create({\n            data: {\n                attackerId: atacante.id,\n                defenderId: defensor.id,\n                winner: report.winner,\n                details: serializableReport,\n                ciudad: mision.destinoCiudad,\n                barrio: mision.destinoBarrio,\n                edificio: mision.destinoEdificio,\n            }\n        });\n\n        if (report.rounds.length > 0) {\n            for (const troop of report.rounds[report.rounds.length - 1].defender.troops) {\n                if (troop.lostQuantity > 0) {\n                     await tx.tropaUsuario.updateMany({\n                        where: { \n                            propiedad: { userId: defensor.id },\n                            configuracionTropaId: troop.id \n                        },\n                        data: { cantidad: { decrement: troop.lostQuantity } }\n                    });\n                    await tx.tropaSeguridadUsuario.updateMany({\n                        where: {\n                            propiedad: { userId: defensor.id },\n                            configuracionTropaId: troop.id\n                        },\n                        data: { cantidad: { decrement: troop.lostQuantity } }\n                    });\n                }\n            }\n        }\n        \n        if (report.finalStats.attacker.lootedResources) {\n            const loot = report.finalStats.attacker.lootedResources;\n            await tx.propiedad.update({\n                where: { id: propiedadDefensora.id },\n                data: {\n                    armas: { decrement: BigInt(loot.armas) },\n                    municion: { decrement: BigInt(loot.municion) },\n                    dolares: { decrement: BigInt(loot.dolares) },\n                    alcohol: { decrement: BigInt(loot.alcohol) },\n                }\n            });\n        }\n        \n        await tx.colaMisiones.update({\n            where: { id: mision.id },\n            data: {\n                tipoMision: 'REGRESO',\n                tropas: tropaRegreso as any,\n                recursos: recursosSaqueados as any,\n                fechaRegreso: new Date(new Date().getTime() + mision.duracionViaje * 1000)\n            }\n        });\n\n        await tx.puntuacionUsuario.upsert({\n            where: { userId: atacante.id },\n            update: {\n                puntosHonorAtacante: { increment: honorGanadoAtacante },\n                puntosHonorTotales: { increment: honorGanadoAtacante }\n            },\n            create: {\n                userId: atacante.id,\n                puntosHonorAtacante: honorGanadoAtacante,\n                puntosHonorTotales: honorGanadoAtacante,\n                 puntosHabitaciones: 0,\n                puntosTropas: 0,\n                puntosEntrenamientos: 0,\n                puntosTotales: 0,\n            }\n        });\n\n        await tx.puntuacionUsuario.upsert({\n            where: { userId: defensor.id },\n            update: {\n                puntosHonorDefensor: { increment: honorGanadoDefensor },\n                puntosHonorTotales: { increment: honorGanadoDefensor }\n            },\n            create: {\n                userId: defensor.id,\n                puntosHonorDefensor: honorGanadoDefensor,\n                puntosHonorTotales: honorGanadoDefensor,\n                 puntosHabitaciones: 0,\n                puntosTropas: 0,\n                puntosEntrenamientos: 0,\n                puntosTotales: 0,\n            }\n        });\n\n\n        await tx.message.create({\n            data: {\n                recipientId: atacante.id,\n                subject: `Resultado de la batalla en ${mision.destinoCiudad}:${mision.destinoBarrio}`,\n                content: `Tu ataque contra ${defensor.name} ha concluido. Revisa tus informes de batalla para ver los detalles.`,\n                category: MessageCategory.BATALLA,\n                battleReportId: battleReport.id,\n            }\n        });\n        \n        await tx.message.create({\n            data: {\n                recipientId: defensor.id,\n                subject: `Has sido atacado en ${mision.destinoCiudad}:${mision.destinoBarrio}`,\n                content: `Has sido atacado por ${atacante.name}. Revisa tus informes de batalla para ver los detalles.`,\n                category: MessageCategory.BATALLA,\n                battleReportId: battleReport.id,\n            }\n        });\n    });\n}\n\n"
            },
            {
              "name": "cancel-mission.action.ts",
              "type": "file",
              "content": "\n'use server'\n\nimport { revalidatePath } from \"next/cache\";\nimport prisma from \"../prisma/prisma\";\nimport { getSessionUser } from \"../auth\";\n\nexport async function cancelarMision(misionId: string) {\n    const user = await getSessionUser();\n    if (!user) {\n        return { error: \"Usuario no autenticado.\" };\n    }\n\n    const mision = await prisma.colaMisiones.findUnique({\n        where: { id: misionId }\n    });\n\n    if (!mision || mision.userId !== user.id) {\n        return { error: \"Misi\u00f3n no encontrada o no te pertenece.\" };\n    }\n    \n    if (new Date() > new Date(mision.fechaLlegada)) {\n        return { error: \"No se puede cancelar una misi\u00f3n que ya ha llegado a su destino.\" };\n    }\n\n    const ahora = new Date();\n    const tiempoTranscurrido = ahora.getTime() - new Date(mision.fechaInicio).getTime();\n    const nuevaFechaRegreso = new Date(ahora.getTime() + tiempoTranscurrido);\n\n    try {\n        await prisma.colaMisiones.update({\n            where: { id: misionId },\n            data: {\n                tipoMision: 'REGRESO',\n                fechaRegreso: nuevaFechaRegreso,\n            }\n        });\n        revalidatePath('/overview');\n        revalidatePath('/missions/details');\n        return { success: \"La misi\u00f3n ha sido cancelada y la flota est\u00e1 de regreso.\" };\n\n    } catch (error) {\n        console.error(\"Error al cancelar la misi\u00f3n:\", error);\n        return { error: \"No se pudo cancelar la misi\u00f3n.\" };\n    }\n\n}\n"
            },
            {
              "name": "espionage.actions.ts",
              "type": "file",
              "content": "\n\n'use server'\n\nimport prisma from \"../prisma/prisma\";\nimport { runBattleSimulation } from \"./simulation.actions\";\nimport { ColaMisiones, MessageCategory } from \"@prisma/client\";\nimport type { SimulationInput, BattleReport, EspionageReportDetails } from \"../types/simulation.types\";\nimport { ID_TROPA_ESPIA } from \"../constants\";\n\nexport async function handleEspionageMission(mision: ColaMisiones) {\n    const atacante = await prisma.user.findUnique({ \n        where: { id: mision.userId },\n        include: {\n            propiedades: true,\n            entrenamientos: true\n        }\n    });\n\n    if (!atacante) {\n        console.error(\"Atacante no encontrado para la misi\u00f3n de espionaje:\", mision.id);\n        await prisma.colaMisiones.delete({ where: { id: mision.id } });\n        return;\n    }\n\n    const propiedadDefensora = await prisma.propiedad.findUnique({\n        where: {\n            ciudad_barrio_edificio: {\n                ciudad: mision.destinoCiudad,\n                barrio: mision.destinoBarrio,\n                edificio: mision.destinoEdificio,\n            }\n        },\n        include: {\n            user: true,\n            habitaciones: { include: { configuracionHabitacion: true }},\n            TropaUsuario: { include: { configuracionTropa: true } },\n            TropaSeguridadUsuario: { include: { configuracionTropa: true } }\n        }\n    });\n\n    if (!propiedadDefensora || !propiedadDefensora.user) {\n        // La propiedad no existe o no tiene due\u00f1o, la misi\u00f3n regresa.\n        await prisma.colaMisiones.update({\n            where: { id: mision.id },\n            data: { \n                tipoMision: 'REGRESO',\n                fechaRegreso: new Date(new Date().getTime() + mision.duracionViaje * 1000)\n            }\n        });\n        return;\n    }\n\n    const defensor = await prisma.user.findUnique({\n        where: { id: propiedadDefensora.userId },\n        include: { entrenamientos: true, propiedades: true }\n    });\n\n    if (!defensor) {\n         await prisma.colaMisiones.update({\n            where: { id: mision.id },\n            data: { \n                tipoMision: 'REGRESO',\n                fechaRegreso: new Date(new Date().getTime() + mision.duracionViaje * 1000)\n            }\n        });\n        return;\n    }\n\n    const attackerTroops = (mision.tropas as any[]).filter(t => t.id === ID_TROPA_ESPIA);\n    const defenderAllTroops = [...propiedadDefensora.TropaUsuario, ...propiedadDefensora.TropaSeguridadUsuario];\n\n    const attackerInput: SimulationInput = {\n        troops: attackerTroops.map(t => ({ id: t.id, quantity: t.cantidad })),\n        trainings: atacante.entrenamientos.map(t => ({ id: t.configuracionEntrenamientoId, level: t.nivel })),\n        defenses: [],\n        buildingsLevel: 1, \n        propertyCount: atacante.propiedades.length,\n    };\n\n    const defenderInput: SimulationInput = {\n        troops: defenderAllTroops.map(t => ({ id: t.configuracionTropa.id, quantity: t.cantidad })),\n        trainings: defensor.entrenamientos.map(t => ({ id: t.configuracionEntrenamientoId, level: t.nivel })),\n        defenses: [],\n        buildingsLevel: 1, // Asumimos 1, podr\u00eda ser m\u00e1s complejo\n        propertyCount: defensor.propiedades?.length || 1\n    };\n    \n    const combatReport = await runBattleSimulation(attackerInput, defenderInput);\n    \n    const spiesSurvived = combatReport.rounds.length > 0 && combatReport.winner === 'attacker';\n    \n    let intel: EspionageReportDetails['intel'] = null;\n    if (spiesSurvived) {\n        intel = {\n            resources: {\n                armas: Number(propiedadDefensora.armas),\n                municion: Number(propiedadDefensora.municion),\n                alcohol: Number(propiedadDefensora.alcohol),\n                dolares: Number(propiedadDefensora.dolares),\n            },\n            buildings: propiedadDefensora.habitaciones.map(h => ({\n                id: h.configuracionHabitacionId,\n                name: h.configuracionHabitacion.nombre,\n                level: h.nivel\n            }))\n        }\n    }\n\n    const bigIntReplacer = (key: any, value: any) => typeof value === 'bigint' ? value.toString() : value;\n    const serializableReportDetails: EspionageReportDetails = {\n        combat: JSON.parse(JSON.stringify(combatReport, bigIntReplacer)),\n        intel: intel\n    };\n    \n    const survivingSpies = combatReport.rounds[combatReport.rounds.length - 1].attacker.troops.map(t => ({ id: t.id, cantidad: t.initialQuantity - t.lostQuantity })).filter(t => t.cantidad > 0);\n    const nonSpyTroops = (mision.tropas as any[]).filter(t => t.id !== ID_TROPA_ESPIA);\n    const tropaRegreso = [...survivingSpies, ...nonSpyTroops];\n\n    await prisma.$transaction(async (tx) => {\n        const espionageReport = await tx.espionageReport.create({\n            data: {\n                attackerId: atacante.id,\n                defenderId: defensor.id,\n                details: serializableReportDetails,\n            }\n        });\n        \n        // Crear mensajes individualmente\n        await tx.message.create({\n            data: {\n                recipientId: atacante.id,\n                subject: `Informe de Espionaje en ${mision.destinoCiudad}:${mision.destinoBarrio}`,\n                content: spiesSurvived ? `Tus esp\u00edas han tenido \u00e9xito y han vuelto con informaci\u00f3n.` : `Tus esp\u00edas han sido descubiertos y eliminados.`,\n                category: MessageCategory.ESPIONAJE,\n                espionageReportId: espionageReport.id,\n            }\n        });\n        \n        await tx.message.create({\n            data: {\n                recipientId: defensor.id,\n                subject: `Actividad de espionaje detectada`,\n                content: `Has detectado y combatido esp\u00edas de ${atacante.name} en tu propiedad en [${mision.destinoCiudad}:${mision.destinoBarrio}].`,\n                category: MessageCategory.ESPIONAJE,\n                espionageReportId: espionageReport.id,\n            }\n        });\n\n        // Actualizar la misi\u00f3n para que regrese con las tropas supervivientes.\n        await tx.colaMisiones.update({\n            where: { id: mision.id },\n            data: {\n                tipoMision: 'REGRESO',\n                tropas: tropaRegreso as any,\n                fechaRegreso: new Date(new Date().getTime() + mision.duracionViaje * 1000)\n            }\n        });\n    });\n}\n"
            },
            {
              "name": "family.actions.ts",
              "type": "file",
              "content": "\n'use server';\n\nimport prisma from \"../prisma/prisma\";\nimport { getSessionUser } from \"../auth\";\nimport { revalidatePath } from \"next/cache\";\nimport { FamilyRole, InvitationStatus, InvitationType } from \"@prisma/client\";\n\nexport async function createFamily(formData: FormData) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"Debes iniciar sesi\u00f3n para crear una familia.\" };\n    if (user.familyMember) return { error: \"Ya perteneces a una familia.\" };\n\n    const name = formData.get('name') as string;\n    const tag = formData.get('tag') as string;\n\n    if (!name || !tag) return { error: \"El nombre y el tag son obligatorios.\" };\n    if (tag.length < 3 || tag.length > 4) return { error: \"El tag debe tener entre 3 y 4 caracteres.\" };\n\n    try {\n        const newFamily = await prisma.family.create({\n            data: {\n                name,\n                tag,\n                description: formData.get('description') as string,\n                avatarUrl: formData.get('avatarUrl') as string,\n                members: {\n                    create: {\n                        userId: user.id,\n                        role: FamilyRole.LEADER,\n                    }\n                }\n            }\n        });\n        revalidatePath('/family');\n        return { success: `\u00a1Familia \"${newFamily.name}\" creada con \u00e9xito!`, family: newFamily };\n    } catch (error: any) {\n        if (error.code === 'P2002') { // Prisma unique constraint violation\n            return { error: \"El nombre o el tag de la familia ya est\u00e1n en uso.\" };\n        }\n        console.error(error);\n        return { error: \"Ocurri\u00f3 un error al crear la familia.\" };\n    }\n}\n\nexport async function inviteUserToFamily(userIdToInvite: string, familyId: string) {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember) return { error: \"No tienes permisos para invitar.\" };\n    if (user.familyMember.familyId !== familyId) return { error: \"No puedes invitar a una familia a la que no perteneces.\" };\n    \n    const role = user.familyMember.role;\n    if (role !== FamilyRole.LEADER && role !== FamilyRole.CO_LEADER) {\n        return { error: \"Solo los l\u00edderes y co-l\u00edderes pueden enviar invitaciones.\" };\n    }\n\n    try {\n        await prisma.familyInvitation.create({\n            data: {\n                familyId: familyId,\n                userId: userIdToInvite,\n                type: InvitationType.INVITATION, // Family invites user\n                status: InvitationStatus.PENDING,\n            }\n        });\n        revalidatePath('/family');\n        return { success: \"Invitaci\u00f3n enviada.\" };\n    } catch (error: any) {\n         if (error.code === 'P2002') {\n            return { error: \"Ya existe una invitaci\u00f3n o solicitud para este usuario.\" };\n        }\n        console.error(error);\n        return { error: \"No se pudo enviar la invitaci\u00f3n.\" };\n    }\n}\n\n\nexport async function acceptFamilyInvitation(invitationId: string) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"Usuario no autenticado.\" };\n    if (user.familyMember) return { error: \"Ya perteneces a una familia.\" };\n\n    const invitation = await prisma.familyInvitation.findUnique({\n        where: { id: invitationId }\n    });\n\n    if (!invitation || invitation.userId !== user.id) {\n        return { error: \"Invitaci\u00f3n no v\u00e1lida.\" };\n    }\n    \n    try {\n        await prisma.$transaction(async (tx) => {\n            await tx.familyMember.create({\n                data: {\n                    userId: user.id,\n                    familyId: invitation.familyId,\n                    role: FamilyRole.MEMBER\n                }\n            });\n            \n            // Delete this invitation and any other pending invitations/requests for this user\n            await tx.familyInvitation.deleteMany({\n                where: {\n                    userId: user.id,\n                }\n            })\n        });\n\n        revalidatePath('/family');\n        return { success: \"\u00a1Bienvenido a la familia!\" };\n    } catch(error) {\n        console.error(error);\n        return { error: \"Error al unirse a la familia.\" };\n    }\n}\n\n\nexport async function leaveFamily() {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember) return { error: \"No perteneces a ninguna familia.\" };\n\n    // Add logic here to handle if the user is the leader\n    if (user.familyMember.role === FamilyRole.LEADER) {\n        const members = await prisma.familyMember.count({\n            where: { familyId: user.familyMember.familyId }\n        });\n        if (members > 1) {\n            return { error: \"Eres el l\u00edder. Debes nombrar a un nuevo l\u00edder o ser el \u00faltimo miembro para poder abandonar la familia.\" }\n        }\n    }\n\n    try {\n        await prisma.$transaction(async (tx) => {\n             const familyId = user.familyMember!.familyId;\n             await tx.familyMember.delete({\n                where: { userId: user.id }\n            });\n            const remainingMembers = await tx.familyMember.count({\n                where: { familyId: familyId }\n            });\n            if (remainingMembers === 0) {\n                // If last member leaves, also delete the family and any pending requests\n                await tx.familyInvitation.deleteMany({ where: { familyId: familyId } });\n                await tx.family.delete({ where: { id: familyId } });\n            }\n        });\n        \n        revalidatePath('/family');\n        return { success: \"Has abandonado la familia.\" };\n    } catch(error) {\n        console.error(error);\n        return { error: \"No se pudo abandonar la familia.\" };\n    }\n}\n\nexport async function applyToFamily(familyId: string) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"Debes iniciar sesi\u00f3n para solicitar unirte.\" };\n    if (user.familyMember) return { error: \"Ya perteneces a una familia.\" };\n\n    try {\n        await prisma.familyInvitation.create({\n            data: {\n                familyId: familyId,\n                userId: user.id,\n                type: InvitationType.REQUEST, // User requests to join\n                status: InvitationStatus.PENDING,\n            }\n        });\n        revalidatePath('/family/find');\n        return { success: \"Solicitud enviada.\" };\n    } catch (error: any) {\n         if (error.code === 'P2002') {\n            return { error: \"Ya has enviado una solicitud a esta familia.\" };\n        }\n        console.error(error);\n        return { error: \"No se pudo enviar la solicitud.\" };\n    }\n}\n\n\nexport async function cancelInvitation(invitationId: string) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"No autenticado.\" };\n    \n    const invitation = await prisma.familyInvitation.findUnique({ where: { id: invitationId }, include: { family: { include: { members: true } } }});\n    if(!invitation) return { error: \"Invitaci\u00f3n no encontrada.\" };\n    \n    // User can cancel their own application, or a leader can cancel an invitation\n    const userIsLeader = invitation.family.members.some(m => m.userId === user.id && (m.role === \"LEADER\" || m.role === \"CO_LEADER\"));\n    const userIsApplicant = invitation.userId === user.id;\n\n    if (!userIsLeader && !userIsApplicant) {\n        return { error: \"No tienes permiso para cancelar esta solicitud/invitaci\u00f3n.\" };\n    }\n\n    try {\n        await prisma.familyInvitation.update({\n            where: { id: invitationId },\n            data: { status: InvitationStatus.CANCELLED }\n        });\n        revalidatePath('/family');\n        revalidatePath('/family/find');\n        return { success: \"Solicitud/Invitaci\u00f3n cancelada.\" };\n    } catch(error) {\n        console.error(error);\n        return { error: \"Error al cancelar.\" };\n    }\n}\n\nexport async function rejectInvitation(invitationId: string) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"No autenticado.\" };\n\n    const invitation = await prisma.familyInvitation.findUnique({ where: { id: invitationId }, include: { family: { include: { members: true } } }});\n    if(!invitation) return { error: \"Invitaci\u00f3n/Solicitud no encontrada.\" };\n\n    const userIsLeader = invitation.family.members.some(m => m.userId === user.id && (m.role === \"LEADER\" || m.role === \"CO_LEADER\"));\n    const userIsInvitee = invitation.userId === user.id;\n\n    if (!userIsLeader && !userIsInvitee) {\n        return { error: \"No tienes permiso para realizar esta acci\u00f3n.\" };\n    }\n\n    try {\n        await prisma.familyInvitation.update({\n            where: { id: invitationId },\n            data: { status: InvitationStatus.REJECTED }\n        });\n        revalidatePath('/family');\n        revalidatePath('/family/requests');\n        return { success: \"Solicitud/Invitaci\u00f3n rechazada.\" };\n    } catch(error) {\n        console.error(error);\n        return { error: \"Error al rechazar.\" };\n    }\n}\n\nexport async function acceptRequest(invitationId: string) {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember) return { error: \"No tienes permisos para aceptar.\" };\n\n    const invitation = await prisma.familyInvitation.findUnique({\n        where: { id: invitationId },\n    });\n\n    if (!invitation || invitation.familyId !== user.familyMember.familyId) {\n        return { error: \"Solicitud no v\u00e1lida o no para tu familia.\" };\n    }\n    \n    const role = user.familyMember.role;\n    if (role !== FamilyRole.LEADER && role !== FamilyRole.CO_LEADER) {\n        return { error: \"Solo los l\u00edderes y co-l\u00edderes pueden aceptar solicitudes.\" };\n    }\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            // Check if user to be added is already in a family\n            const applicant = await tx.user.findUnique({\n                where: { id: invitation.userId },\n                include: { familyMember: true }\n            });\n            if (applicant?.familyMember) {\n                throw new Error(\"El usuario ya se ha unido a otra familia.\");\n            }\n\n            await tx.familyMember.create({\n                data: {\n                    userId: invitation.userId,\n                    familyId: invitation.familyId,\n                    role: FamilyRole.MEMBER\n                }\n            });\n            \n            // Delete all pending invitations and requests for the user who was just accepted\n            await tx.familyInvitation.deleteMany({\n                where: {\n                    userId: invitation.userId\n                }\n            });\n        });\n\n        revalidatePath('/family');\n        revalidatePath('/family/requests');\n        return { success: \"\u00a1Nuevo miembro aceptado en la familia!\" };\n    } catch(error: any) {\n        console.error(error);\n        return { error: error.message || \"Error al aceptar al miembro.\" };\n    }\n}\n\nexport async function createFamilyAnnouncement(familyId: string, content: string) {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember) return { error: \"No tienes permisos para crear un anuncio.\" };\n\n    const member = await prisma.familyMember.findUnique({\n        where: { userId: user.id }\n    });\n\n    if (!member || member.familyId !== familyId) {\n        return { error: \"No perteneces a esta familia.\" };\n    }\n\n    if (member.role !== FamilyRole.LEADER && member.role !== FamilyRole.CO_LEADER) {\n        return { error: \"Solo los l\u00edderes y co-l\u00edderes pueden crear anuncios.\" };\n    }\n\n    if (!content.trim()) {\n        return { error: \"El contenido del anuncio no puede estar vac\u00edo.\" };\n    }\n\n    try {\n        await prisma.familyAnnouncement.create({\n            data: {\n                content,\n                familyId,\n                authorId: user.id,\n            }\n        });\n\n        revalidatePath('/family');\n        return { success: \"Anuncio publicado.\" };\n    } catch (e) {\n        console.error(e);\n        return { error: \"Error al publicar el anuncio.\" };\n    }\n}\n\nexport async function updateMemberRole(memberId: string, familyId: string, newRole: FamilyRole) {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember || user.familyMember.role !== FamilyRole.LEADER || user.familyMember.familyId !== familyId) {\n        return { error: \"No tienes permiso para realizar esta acci\u00f3n.\" };\n    }\n    if (newRole === FamilyRole.LEADER) {\n        return { error: \"El liderazgo solo se puede transferir, no asignar.\" };\n    }\n    try {\n        await prisma.familyMember.update({\n            where: { userId: memberId },\n            data: { role: newRole }\n        });\n        revalidatePath('/family/management');\n        return { success: \"Rango actualizado correctamente.\" };\n    } catch (error) {\n        return { error: \"Error al actualizar el rango.\" };\n    }\n}\n\nexport async function transferLeadership(newLeaderId: string, familyId: string) {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember || user.familyMember.role !== FamilyRole.LEADER || user.familyMember.familyId !== familyId) {\n        return { error: \"No tienes permiso para realizar esta acci\u00f3n.\" };\n    }\n    try {\n        await prisma.$transaction(async (tx) => {\n            await tx.familyMember.update({\n                where: { userId: user.id },\n                data: { role: FamilyRole.CO_LEADER }\n            });\n            await tx.familyMember.update({\n                where: { userId: newLeaderId },\n                data: { role: FamilyRole.LEADER }\n            });\n        });\n        revalidatePath('/family/management');\n        revalidatePath('/family');\n        return { success: \"Liderazgo transferido con \u00e9xito.\" };\n    } catch (error) {\n        return { error: \"Error al transferir el liderazgo.\" };\n    }\n}\n\nexport async function expelMember(memberId: string, familyId: string) {\n    const user = await getSessionUser();\n    if (!user || !user.familyMember || user.familyMember.role !== FamilyRole.LEADER || user.familyMember.familyId !== familyId) {\n        return { error: \"No tienes permiso para realizar esta acci\u00f3n.\" };\n    }\n    try {\n        await prisma.familyMember.delete({\n            where: { userId: memberId }\n        });\n        revalidatePath('/family/management');\n        return { success: \"Miembro expulsado.\" };\n    } catch (error) {\n        return { error: \"Error al expulsar al miembro.\" };\n    }\n}\n"
            },
            {
              "name": "message.actions.ts",
              "type": "file",
              "content": "\n'use server';\n\nimport { MessageCategory } from \"@prisma/client\";\nimport { getSessionUser } from \"../auth\";\nimport prisma from \"../prisma/prisma\";\nimport { revalidatePath } from \"next/cache\";\n\nexport async function sendMessage(formData: FormData) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"No autenticado.\" };\n\n    const recipientId = formData.get('recipientId') as string;\n    const subject = formData.get('subject') as string;\n    const content = formData.get('content') as string;\n\n    if (!recipientId || !subject || !content) {\n        return { error: \"Todos los campos son obligatorios.\" };\n    }\n\n    try {\n        await prisma.message.create({\n            data: {\n                senderId: user.id,\n                recipientId,\n                subject,\n                content,\n                category: MessageCategory.JUGADOR,\n            }\n        });\n        revalidatePath('/messages');\n        return { success: true };\n    } catch (e) {\n        console.error(e);\n        return { error: \"No se pudo enviar el mensaje.\" };\n    }\n}\n\nexport async function markMessageAsRead(messageId: string) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"No autenticado.\" };\n\n    try {\n        await prisma.message.updateMany({\n            where: {\n                id: messageId,\n                recipientId: user.id,\n            },\n            data: {\n                isRead: true,\n            }\n        });\n        revalidatePath('/messages');\n        return { success: true };\n    } catch (e) {\n        console.error(e);\n        return { error: \"No se pudo marcar el mensaje como le\u00eddo.\" };\n    }\n}\n\nexport async function deleteMessage(messageId: string) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"No autenticado.\" };\n\n    try {\n        await prisma.message.deleteMany({\n            where: {\n                id: messageId,\n                recipientId: user.id,\n            }\n        });\n        revalidatePath('/messages');\n        return { success: true };\n    } catch (e) {\n        console.error(e);\n        return { error: \"No se pudo eliminar el mensaje.\" };\n    }\n}\n"
            },
            {
              "name": "mission.actions.ts",
              "type": "file",
              "content": "'use server'\n\nimport { revalidatePath } from \"next/cache\";\nimport prisma from \"../prisma/prisma\";\nimport { getSessionUser } from \"../auth\";\nimport { getPropertyOwner, getTroopConfigurations } from \"../data\";\nimport { calcularDistancia, calcularVelocidadFlota, calcularDuracionViaje, convertirACoordenadasVirtuales, calcularCosteMision } from \"../formulas/mission-formulas\";\nimport { ID_TROPA_ESPIA, ID_TROPA_OCUPACION, MISSION_TYPES_NO_RETURN, TROOP_TYPE_OCCUPY, TROOP_TYPE_SPY } from \"../constants\";\nimport type { MissionInput } from \"../types\";\nimport { MessageCategory } from \"@prisma/client\";\n\nexport async function enviarMision(input: MissionInput) {\n    const user = await getSessionUser();\n    if (!user) {\n        return { error: \"Usuario no autenticado.\" };\n    }\n\n    const { origenPropiedadId, coordinates, tropas, tipo } = input;\n    const origenPropiedad = user.propiedades.find(p => p.id === origenPropiedadId);\n\n    if (!origenPropiedad) {\n        return { error: \"Propiedad de origen no encontrada.\" };\n    }\n\n    if (!coordinates.ciudad || !coordinates.barrio || !coordinates.edificio) {\n        return { error: \"Coordenadas incompletas.\" };\n    }\n     if (tropas.length === 0 || tropas.every(t => t.cantidad === 0)) {\n        return { error: \"Debes seleccionar al menos una tropa.\" };\n    }\n\n    const tropasPropiedadMap = new Map(origenPropiedad.TropaUsuario.map(t => [t.configuracionTropa.id, t.cantidad]));\n\n    for (const tropa of tropas) {\n        if ((tropasPropiedadMap.get(tropa.id) || 0) < tropa.cantidad) {\n            return { error: `No tienes suficientes unidades de una de las tropas seleccionadas en ${origenPropiedad.nombre}.` };\n        }\n    }\n    \n    if (tipo === TROOP_TYPE_SPY) {\n        const tropaEspia = tropas.find(t => t.id === ID_TROPA_ESPIA && t.cantidad > 0);\n        if (!tropaEspia) {\n            return { error: \"Necesitas enviar al menos una tropa de Espionaje para esta misi\u00f3n.\" };\n        }\n    }\n    \n    const targetOwner = await getPropertyOwner(coordinates);\n\n    if (tipo === TROOP_TYPE_OCCUPY) {\n        const tropaOcupacion = tropas.find(t => t.id === ID_TROPA_OCUPACION && t.cantidad > 0);\n        if (!tropaOcupacion) {\n            return { error: \"Necesitas enviar al menos una Tropa de Ocupaci\u00f3n para esta misi\u00f3n.\" };\n        }\n        if (targetOwner) {\n            return { error: \"No puedes ocupar una propiedad que ya tiene due\u00f1o.\" };\n        }\n        \n        try {\n            await prisma.$transaction(async (tx) => {\n                const allRoomConfigs = await tx.configuracionHabitacion.findMany();\n                await tx.propiedad.create({\n                    data: {\n                        userId: user.id,\n                        nombre: `Colonia en ${coordinates.ciudad}:${coordinates.barrio}`,\n                        ciudad: coordinates.ciudad,\n                        barrio: coordinates.barrio,\n                        edificio: coordinates.edificio,\n                        armas: 10000,\n                        municion: 10000,\n                        alcohol: 10000,\n                        dolares: 10000,\n                        habitaciones: {\n                            create: allRoomConfigs.map(config => ({\n                                configuracionHabitacionId: config.id,\n                                nivel: 1\n                            }))\n                        }\n                    }\n                });\n\n                await tx.tropaUsuario.update({\n                    where: { propiedadId_configuracionTropaId: { propiedadId: origenPropiedadId, configuracionTropaId: 'ocupacion' } },\n                    data: { cantidad: { decrement: tropaOcupacion.cantidad } }\n                });\n            });\n            \n            revalidatePath('/overview');\n            revalidatePath('/map');\n            return { success: `\u00a1Has ocupado exitosamente la propiedad en ${coordinates.ciudad}:${coordinates.barrio}:${coordinates.edificio}!` };\n\n        } catch (error) {\n            console.error(error);\n            return { error: \"Error al crear la nueva propiedad.\" };\n        }\n    }\n\n    const troopConfigs = await getTroopConfigurations();\n    const troopConfigsMap = new Map(troopConfigs.map(t => [t.id, t]));\n\n    const origenCoordsVirtuales = convertirACoordenadasVirtuales(origenPropiedad);\n    const destinoCoordsVirtuales = convertirACoordenadasVirtuales(coordinates);\n    const distancia = calcularDistancia(origenCoordsVirtuales, destinoCoordsVirtuales);\n    \n    const velocidadFlota = await calcularVelocidadFlota(tropas, troopConfigsMap);\n    const duracionViaje = calcularDuracionViaje(distancia, velocidadFlota, tropas.map(t => t.id));\n    \n    const fechaInicio = new Date();\n    const fechaLlegada = new Date(fechaInicio.getTime() + duracionViaje * 1000);\n    const requiereRetorno = !MISSION_TYPES_NO_RETURN.includes(tipo);\n    const fechaRegreso = requiereRetorno ? new Date(fechaLlegada.getTime() + duracionViaje * 1000) : null;\n    \n    const tropasConSalario = tropas.map((t) => {\n        const config = troopConfigsMap.get(t.id);\n        return {\n            cantidad: t.cantidad,\n            salario: config?.salario || 0\n        };\n    });\n    const costeMision = calcularCosteMision(tropasConSalario, distancia);\n\n    if (Number(origenPropiedad.dolares) < costeMision) {\n        return { error: \"No tienes suficientes d\u00f3lares para pagar el coste de la misi\u00f3n.\" };\n    }\n\n    try {\n        await prisma.$transaction(async (tx) => {\n\n            // Deduct mission cost\n            await tx.propiedad.update({\n                where: { id: origenPropiedadId },\n                data: {\n                    dolares: { decrement: BigInt(costeMision) }\n                }\n            });\n\n            // Deduct troops from property\n            for(const tropa of tropas) {\n                await tx.tropaUsuario.update({\n                    where: {\n                        propiedadId_configuracionTropaId: {\n                            propiedadId: origenPropiedadId,\n                            configuracionTropaId: tropa.id\n                        }\n                    },\n                    data: {\n                        cantidad: {\n                            decrement: tropa.cantidad\n                        }\n                    }\n                })\n            }\n\n\n            const newMission = await tx.colaMisiones.create({\n                data: {\n                    userId: user.id,\n                    propiedadOrigenId: origenPropiedadId,\n                    tipoMision: tipo,\n                    tropas: tropas,\n                    origenCiudad: origenPropiedad.ciudad,\n                    origenBarrio: origenPropiedad.barrio,\n                    origenEdificio: origenPropiedad.edificio,\n                    destinoCiudad: coordinates.ciudad,\n                    destinoBarrio: coordinates.barrio,\n                    destinoEdificio: coordinates.edificio,\n                    fechaInicio: fechaInicio,\n                    fechaLlegada: fechaLlegada,\n                    fechaRegreso: fechaRegreso,\n                    velocidadFlota: Math.floor(velocidadFlota).toString(),\n                    duracionViaje: duracionViaje,\n                }\n            });\n\n            if (['ATAQUE', 'TRANSPORTE', 'ESPIONAJE'].includes(tipo) && targetOwner) {\n                const totalTroops = tropas.reduce((sum, t) => sum + t.cantidad, 0);\n                await tx.incomingAttack.create({\n                    data: {\n                        defenderId: targetOwner.id,\n                        attackerId: user.id,\n                        attackerName: user.name,\n                        targetProperty: `${coordinates.ciudad}:${coordinates.barrio}:${coordinates.edificio}`,\n                        totalTroops: totalTroops,\n                        arrivalTime: fechaLlegada,\n                        missionId: newMission.id,\n                    }\n                });\n\n                let subject = '\u00a1Alerta de Misi\u00f3n!';\n                let content = `Una flota de ${user.name} se dirige a tu propiedad en [${coordinates.ciudad}:${coordinates.barrio}:${coordinates.edificio}].`;\n                if(tipo === 'ATAQUE') {\n                    subject = '\u00a1Ataque Inminente!';\n                    content = `Una flota de ataque de ${user.name} se dirige a tu propiedad en [${coordinates.ciudad}:${coordinates.barrio}:${coordinates.edificio}]. Llegar\u00e1 aproximadamente a las ${fechaLlegada.toLocaleTimeString('es-ES')}.`\n                }\n                if(tipo === 'TRANSPORTE') {\n                    subject = 'Transporte Entrante';\n                    content = `Un transporte de ${user.name} se dirige a tu propiedad en [${coordinates.ciudad}:${coordinates.barrio}:${coordinates.edificio}]. Llegar\u00e1 aproximadamente a las ${fechaLlegada.toLocaleTimeString('es-ES')}.`\n                }\n                 if(tipo === 'ESPIONAJE') {\n                    subject = 'Actividad de Espionaje';\n                    content = `Un esp\u00eda de ${user.name} se dirige a tu propiedad en [${coordinates.ciudad}:${coordinates.barrio}:${coordinates.edificio}]. Llegar\u00e1 aproximadamente a las ${fechaLlegada.toLocaleTimeString('es-ES')}.`\n                }\n\n\n                await tx.message.create({\n                    data: {\n                        recipientId: targetOwner.id,\n                        subject,\n                        content,\n                        category: MessageCategory.BATALLA\n                    }\n                })\n            }\n        });\n\n    } catch (error) {\n        console.error(\"Error al crear la misi\u00f3n:\", error);\n        return { error: \"No se pudo enviar la misi\u00f3n.\" };\n    }\n    \n    revalidatePath('/missions');\n    revalidatePath('/overview');\n    revalidatePath('/messages');\n\n    return { success: `Misi\u00f3n de ${tipo} enviada a ${coordinates.ciudad}:${coordinates.barrio}:${coordinates.edificio}.` };\n}\n"
            },
            {
              "name": "room.actions.ts",
              "type": "file",
              "content": "\n\n'use server';\n\nimport { revalidatePath } from \"next/cache\";\nimport prisma from \"../prisma/prisma\";\nimport { getSessionUser } from \"../auth\";\nimport { calcularCostosNivel, calcularTiempoConstruccion } from \"../formulas/room-formulas\";\nimport { ID_OFICINA_JEFE, MAX_CONSTRUCTION_QUEUE_SIZE } from \"../constants\";\nimport type { ColaConstruccion, FullConfiguracionHabitacion, FullHabitacionUsuario, FullPropiedad, UserWithProgress } from \"../types\";\n\nexport async function iniciarAmpliacion(propiedadId: string, habitacionId: string) {\n    const user = await getSessionUser();\n  \n    if (!user) {\n      return { error: 'Usuario no autenticado.' };\n    }\n    \n    const propiedadActual = user.propiedades.find((p: FullPropiedad) => p.id === propiedadId);\n    if (!propiedadActual) {\n        return { error: 'Propiedad no encontrada para este usuario.' };\n    }\n\n    const construccionesEnCola = propiedadActual.colaConstruccion;\n\n    if (construccionesEnCola.length >= MAX_CONSTRUCTION_QUEUE_SIZE) {\n        return { error: `La cola de construcci\u00f3n est\u00e1 llena (m\u00e1ximo ${MAX_CONSTRUCTION_QUEUE_SIZE}).` };\n    }\n\n    const habitacionUsuario = propiedadActual.habitaciones.find((h: FullHabitacionUsuario) => h.configuracionHabitacionId === habitacionId);\n\n    if (!habitacionUsuario) {\n         return { error: 'Configuraci\u00f3n de habitaci\u00f3n de usuario no encontrada.' };\n    }\n\n    const config = habitacionUsuario.configuracionHabitacion;\n    if (!config) {\n        return { error: 'Configuraci\u00f3n de la habitaci\u00f3n no encontrada.'}\n    }\n    \n    const nivelBase = habitacionUsuario.nivel;\n    const mejorasEnCola = construccionesEnCola.filter((c: ColaConstruccion) => c.habitacionId === habitacionId).length;\n    const nivelSiguiente = nivelBase + mejorasEnCola + 1;\n\n    const nivelOficinaJefe = propiedadActual.habitaciones.find((h: FullHabitacionUsuario) => h.configuracionHabitacionId === ID_OFICINA_JEFE)?.nivel || 1;\n  \n    const costos = calcularCostosNivel(nivelSiguiente, config as FullConfiguracionHabitacion);\n  \n    if (\n      Number(propiedadActual.armas) < costos.armas ||\n      Number(propiedadActual.municion) < costos.municion ||\n      Number(propiedadActual.dolares) < costos.dolares\n    ) {\n      return { error: 'No tienes suficientes recursos para esta ampliaci\u00f3n.' };\n    }\n\n    const duracion = calcularTiempoConstruccion(nivelSiguiente, config, nivelOficinaJefe);\n\n    // Encontrar la fecha de finalizaci\u00f3n de la \u00faltima construcci\u00f3n en la cola para esta propiedad\n    const ultimaConstruccion = await prisma.colaConstruccion.findFirst({\n        where: { propiedadId: propiedadId },\n        orderBy: { fechaFinalizacion: 'desc' },\n    });\n\n    const ahora = new Date();\n    let fechaInicio: Date;\n\n    if (ultimaConstruccion && ultimaConstruccion.fechaFinalizacion) {\n        // La nueva construcci\u00f3n empieza 1 segundo despu\u00e9s de la anterior\n        fechaInicio = new Date(ultimaConstruccion.fechaFinalizacion.getTime() + 1000);\n    } else {\n        // Si no hay nada en la cola, empieza ahora\n        fechaInicio = ahora;\n    }\n\n    const fechaFinalizacion = new Date(fechaInicio.getTime() + duracion * 1000);\n  \n    try {\n      await prisma.$transaction([\n        prisma.propiedad.update({\n          where: { id: propiedadId },\n          data: {\n            armas: { decrement: BigInt(costos.armas) },\n            municion: { decrement: BigInt(costos.municion) },\n            dolares: { decrement: BigInt(costos.dolares) },\n          },\n        }),\n        prisma.colaConstruccion.create({\n            data: {\n                propiedadId: propiedadId,\n                habitacionId: habitacionId,\n                nivelDestino: nivelSiguiente,\n                duracion: duracion,\n                fechaInicio: fechaInicio,\n                fechaFinalizacion: fechaFinalizacion,\n            }\n        })\n      ]);\n  \n      revalidatePath('/rooms');\n      revalidatePath('/overview'); \n      revalidatePath('/(dashboard)/layout', 'layout');\n  \n      return { success: `\u00a1${config.nombre} a\u00f1adido a la cola de construcci\u00f3n!` };\n    } catch (error) {\n      console.error('Error durante la transacci\\u00f3n de ampliaci\\u00f3n:', error);\n      return { error: 'Ocurri\\u00f3 un error en el servidor al intentar ampliar.' };\n    }\n}\n\n\nexport async function cancelarConstruccion(colaId: string) {\n    const user = await getSessionUser();\n    if (!user) {\n        return { error: 'Usuario no autenticado.' };\n    }\n\n    const itemCola = await prisma.colaConstruccion.findUnique({\n        where: { id: colaId },\n        include: { \n            propiedad: {\n                include: {\n                    habitaciones: {\n                        include: {\n                            configuracionHabitacion: true,\n                        }\n                    }\n                }\n            } \n        }\n    });\n\n    if (!itemCola || itemCola.propiedad.userId !== user.id) {\n        return { error: 'Elemento de la cola no encontrado o no te pertenece.' };\n    }\n    \n    const configHabitacion = (itemCola.propiedad.habitaciones as FullHabitacionUsuario[]).find(h => h.configuracionHabitacionId === itemCola.habitacionId)?.configuracionHabitacion;\n    if (!configHabitacion) {\n         return { error: 'Configuraci\u00f3n de habitaci\u00f3n no encontrada para el reembolso.' };\n    }\n\n    const nivelOficinaJefe = (itemCola.propiedad.habitaciones as FullHabitacionUsuario[]).find(h => h.configuracionHabitacionId === ID_OFICINA_JEFE)?.nivel || 1;\n    const costos = calcularCostosNivel(itemCola.nivelDestino, configHabitacion as FullConfiguracionHabitacion);\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            // Reembolsar recursos\n            await tx.propiedad.update({\n                where: { id: itemCola.propiedadId },\n                data: {\n                    armas: { increment: BigInt(costos.armas) },\n                    municion: { increment: BigInt(costos.municion) },\n                    dolares: { increment: BigInt(costos.dolares) },\n                }\n            });\n\n            // Eliminar de la cola\n            await tx.colaConstruccion.delete({\n                where: { id: colaId }\n            });\n        });\n\n        revalidatePath('/rooms');\n        revalidatePath('/overview');\n        revalidatePath('/(dashboard)/layout', 'layout');\n\n        return { success: `La construcci\u00f3n de ${configHabitacion.nombre} ha sido cancelada.` };\n    } catch (error) {\n        console.error('Error al cancelar la construcci\u00f3n:', error);\n        return { error: 'No se pudo cancelar la construcci\u00f3n.' };\n    }\n}\n"
            },
            {
              "name": "simulation.actions.ts",
              "type": "file",
              "content": "\n\n'use server';\n\nimport { getTrainingConfigurations, getTroopConfigurations } from '../data';\nimport { calcularPoderAtaque } from '../formulas/score-formulas';\nimport { calcularStatsTropaConBonus } from '../formulas/troop-formulas';\nimport type { ConfiguracionTropa, TropaBonusContrincante } from '@prisma/client';\nimport type { ArmyUnit, BattleReport, CombatStats, ResourceCost, SimulationInput, TroopData } from '../types/simulation.types';\n\n\nfunction calculateResourceLoss(lostTroops: ArmyUnit[], troopConfigsMap: Map<string, ConfiguracionTropa>): ResourceCost {\n    return lostTroops.reduce((total, unit) => {\n        const config = troopConfigsMap.get(unit.id);\n        if(config) {\n            total.armas += Number(config.costoArmas) * unit.quantity;\n            total.municion += Number(config.costoMunicion) * unit.quantity;\n            total.dolares += Number(config.costoDolares) * unit.quantity;\n            total.alcohol += 0; // Assuming troops don't cost alcohol to replace\n        }\n        return total;\n    }, { armas: 0, municion: 0, dolares: 0, alcohol: 0 });\n}\n\nexport async function runBattleSimulation(attacker: SimulationInput, defender: SimulationInput): Promise<BattleReport> {\n    const [troopConfigs, trainingConfigs] = await Promise.all([\n        getTroopConfigurations(),\n        getTrainingConfigurations()\n    ]);\n    const troopConfigsMap = new Map(troopConfigs.map(t => [t.id, t]));\n    const trainingConfigsMap = new Map(trainingConfigs.map(t => [t.id, t]));\n\n    const buildArmy = (simInput: SimulationInput): ArmyUnit[] => {\n        const userTrainings = simInput.trainings.map(t => ({\n            configuracionEntrenamientoId: t.id,\n            nivel: t.level,\n            configuracion: trainingConfigsMap.get(t.id)!\n        }));\n\n        return (simInput.troops as any[]).map((troop: TroopData & {cantidad?: number}) => {\n            const config = troopConfigsMap.get(troop.id);\n            if (!config) return null;\n            const { ataqueActual, defensaActual } = calcularStatsTropaConBonus(config, userTrainings as any);\n            return {\n                id: troop.id,\n                nombre: config.nombre,\n                config: config,\n                quantity: troop.quantity ?? troop.cantidad ?? 0,\n                attack: ataqueActual,\n                defense: defensaActual,\n            };\n        }).filter((u): u is ArmyUnit => u !== null && u.quantity > 0);\n    };\n\n    let attackerArmy = buildArmy(attacker);\n    let defenderArmy = buildArmy(defender);\n    \n    const bigIntReplacer = (key: any, value: any) => typeof value === 'bigint' ? value.toString() : value;\n\n    const initialAttackerArmy = JSON.parse(JSON.stringify(attackerArmy, bigIntReplacer));\n    const initialDefenderArmy = JSON.parse(JSON.stringify(defenderArmy, bigIntReplacer));\n\n    const honorAtacante = attacker.trainings.find(t => t.id === 'honor')?.level || 0;\n    const honorDefensor = defender.trainings.find(t => t.id === 'honor')?.level || 0;\n    \n    const poderAtaqueAtacantePercent = await calcularPoderAtaque(attacker.propertyCount, honorAtacante);\n    const poderAtaqueDefensorPercent = await calcularPoderAtaque(defender.propertyCount, honorDefensor);\n\n    const battleRounds = [];\n    let finalMessage = \"\";\n    \n    for (let i = 1; i <= 5; i++) {\n        let attackerTroopCount = attackerArmy.reduce((sum, u) => sum + u.quantity, 0);\n        let defenderTroopCount = defenderArmy.reduce((sum, u) => sum + u.quantity, 0);\n\n        if (attackerTroopCount === 0 || defenderTroopCount === 0) break;\n\n        const roundAttackerArmyBefore = JSON.parse(JSON.stringify(attackerArmy, bigIntReplacer));\n        const roundDefenderArmyBefore = JSON.parse(JSON.stringify(defenderArmy, bigIntReplacer));\n        const attackerLossesThisRound = new Map<string, number>();\n        const defenderLossesThisRound = new Map<string, number>();\n\n        const attackerTotalAttackBase = attackerArmy.reduce((sum, u) => sum + u.attack * u.quantity, 0);\n        const defenderTotalAttackBase = defenderArmy.reduce((sum, u) => sum + u.attack * u.quantity, 0);\n        \n        const attackerTotalAttackConBonus = attackerTotalAttackBase * (poderAtaqueAtacantePercent / 100);\n        const defenderTotalAttackConBonus = defenderTotalAttackBase * (poderAtaqueDefensorPercent / 100);\n\n        let attackerTotalDefense = attackerArmy.reduce((sum, u) => sum + u.defense * u.quantity, 0) * (poderAtaqueAtacantePercent / 100);\n        let defenderTotalDefense = defenderArmy.reduce((sum, u) => sum + u.defense * u.quantity, 0) * (poderAtaqueDefensorPercent / 100);\n\n        const attackerLossRatio = defenderTotalAttackConBonus > attackerTotalDefense ? 1 : defenderTotalAttackConBonus / (attackerTotalDefense || 1);\n        const defenderLossRatio = attackerTotalAttackConBonus > defenderTotalDefense ? 1 : attackerTotalAttackConBonus / (defenderTotalDefense || 1);\n        \n        attackerArmy.forEach(u => {\n            const losses = Math.floor(u.quantity * attackerLossRatio);\n            attackerLossesThisRound.set(u.id, (attackerLossesThisRound.get(u.id) || 0) + losses);\n            u.quantity -= losses;\n        });\n\n        defenderArmy.forEach(u => {\n            const losses = Math.floor(u.quantity * defenderLossRatio);\n            defenderLossesThisRound.set(u.id, (defenderLossesThisRound.get(u.id) || 0) + losses);\n            u.quantity -= losses;\n        });\n        \n        battleRounds.push({\n            round: i,\n            attacker: {\n                troops: roundAttackerArmyBefore.map((t: ArmyUnit) => ({\n                    id: t.id,\n                    nombre: t.nombre,\n                    initialQuantity: t.quantity,\n                    lostQuantity: attackerLossesThisRound.get(t.id) || 0,\n                })),\n                totalAttack: attackerTotalAttackBase,\n                totalAttackConBonus: attackerTotalAttackConBonus,\n                poderAtaquePercent: poderAtaqueAtacantePercent,\n                totalDefense: attackerTotalDefense\n            },\n            defender: {\n                 troops: roundDefenderArmyBefore.map((t: ArmyUnit) => ({\n                    id: t.id,\n                    nombre: t.nombre,\n                    initialQuantity: t.quantity,\n                    lostQuantity: defenderLossesThisRound.get(t.id) || 0,\n                })),\n                totalAttack: defenderTotalAttackBase,\n                totalAttackConBonus: defenderTotalAttackConBonus,\n                poderAtaquePercent: poderAtaqueDefensorPercent,\n                totalDefense: defenderTotalDefense,\n            },\n        });\n    }\n\n    if (battleRounds.length === 0) {\n        // Handle case where no rounds were fought (e.g., one side had no troops)\n        battleRounds.push({\n            round: 0,\n             attacker: {\n                troops: initialAttackerArmy.map((t: ArmyUnit) => ({\n                    id: t.id,\n                    nombre: t.nombre,\n                    initialQuantity: t.quantity,\n                    lostQuantity: 0,\n                })),\n                totalAttack: 0,\n                totalAttackConBonus: 0,\n                poderAtaquePercent: 100,\n                totalDefense: 0\n            },\n            defender: {\n                 troops: initialDefenderArmy.map((t: ArmyUnit) => ({\n                    id: t.id,\n                    nombre: t.nombre,\n                    initialQuantity: t.quantity,\n                    lostQuantity: 0,\n                })),\n                totalAttack: 0,\n                totalAttackConBonus: 0,\n                poderAtaquePercent: 100,\n                totalDefense: 0,\n            },\n        });\n    }\n\n\n    const finalAttackerTroops = new Map(attackerArmy.map(u => [u.id, u.quantity]));\n    const finalDefenderTroops = new Map(defenderArmy.map(u => [u.id, u.quantity]));\n    \n    const totalAttackerLossesArray: ArmyUnit[] = initialAttackerArmy.map((u: ArmyUnit) => ({ ...u, quantity: u.quantity - (finalAttackerTroops.get(u.id) || 0)}));\n    const totalDefenderLossesArray: ArmyUnit[] = initialDefenderArmy.map((u: ArmyUnit) => ({...u, quantity: u.quantity - (finalDefenderTroops.get(u.id) || 0)}));\n\n    const finalStats: CombatStats = {\n        attacker: {\n            troopsLost: totalAttackerLossesArray.reduce((s, u) => s + u.quantity, 0),\n            pointsLost: totalAttackerLossesArray.reduce((s, u) => s + (u.config.puntos || 0) * u.quantity, 0),\n            resourcesLost: calculateResourceLoss(totalAttackerLossesArray, troopConfigsMap)\n        },\n        defender: {\n            troopsLost: totalDefenderLossesArray.reduce((s, u) => s + u.quantity, 0),\n            pointsLost: totalDefenderLossesArray.reduce((s, u) => s + (u.config.puntos || 0) * u.quantity, 0),\n            resourcesLost: calculateResourceLoss(totalDefenderLossesArray, troopConfigsMap)\n        }\n    }\n\n    const attackerHasTroops = attackerArmy.some(u => u.quantity > 0);\n    const defenderHasTroops = defenderArmy.some(u => u.quantity > 0);\n    \n    let winner: 'attacker' | 'defender' | 'draw';\n    if(attackerHasTroops && !defenderHasTroops) {\n        winner = 'attacker';\n        finalMessage = \"El atacante ha ganado la batalla.\"\n    } else if (!attackerHasTroops && defenderHasTroops) {\n        winner = 'defender';\n        finalMessage = \"El defensor ha repelido el ataque.\"\n    } else if (!attackerHasTroops && !defenderHasTroops) {\n        winner = 'draw';\n        finalMessage = \"Aniquilaci\u00f3n mutua. Nadie sobrevive.\"\n    } else {\n        winner = 'draw';\n        finalMessage = \"La batalla ha terminado en empate tras 5 rondas.\";\n    }\n\n    return { winner, rounds: battleRounds, finalStats, finalMessage };\n}\n"
            },
            {
              "name": "training.actions.ts",
              "type": "file",
              "content": "\n\n'use server';\n\nimport { revalidatePath } from \"next/cache\";\nimport prisma from \"../prisma/prisma\";\nimport { getSessionUser } from \"../auth\";\nimport { getTrainingConfigurations } from \"../data\";\nimport { calcularCostosEntrenamiento, calcularTiempoEntrenamiento } from \"../formulas/training-formulas\";\nimport { ID_ESCUELA_ESPECIALIZACION } from \"../constants\";\nimport type { FullConfiguracionEntrenamiento, UserWithProgress, FullPropiedad, FullHabitacionUsuario } from '../types';\nimport { EntrenamientoUsuario, ConfiguracionEntrenamiento } from \"@prisma/client\";\n\nexport async function iniciarEntrenamiento(trainingId: string, propertyId: string) {\n    const user = await getSessionUser();\n  \n    if (!user) {\n      return { error: 'Usuario no autenticado.' };\n    }\n    \n    const propiedadActual = user.propiedades.find((p: FullPropiedad) => p.id === propertyId);\n    if (!propiedadActual) {\n        return { error: 'Propiedad no encontrada para este usuario.' };\n    }\n\n    const colaEntrenamientoUsuario = await prisma.colaEntrenamiento.findMany({ where: { userId: user.id } });\n\n    if (colaEntrenamientoUsuario.some(c => c.propiedadId === propertyId)) {\n        return { error: 'Ya hay un entrenamiento en curso en esta propiedad.' };\n    }\n    \n    if (colaEntrenamientoUsuario.some(c => c.entrenamientoId === trainingId)) {\n        return { error: 'Ya est\u00e1s investigando este entrenamiento en otra propiedad.' };\n    }\n\n    const allTrainingConfigs = await getTrainingConfigurations();\n    const config = allTrainingConfigs.find(c => c.id === trainingId);\n    \n    if (!config) {\n        return { error: 'Configuraci\u00f3n de entrenamiento no encontrada.'}\n    }\n\n    const userTraining = user.entrenamientos.find((t: EntrenamientoUsuario & { configuracionEntrenamiento: ConfiguracionEntrenamiento }) => t.configuracionEntrenamientoId === trainingId);\n    \n    const nivelActual = userTraining ? userTraining.nivel : 0;\n    const nivelSiguiente = nivelActual + 1;\n  \n    const costos = calcularCostosEntrenamiento(nivelSiguiente, config);\n  \n    if (\n      Number(propiedadActual.armas) < costos.armas ||\n      Number(propiedadActual.municion) < costos.municion ||\n      Number(propiedadActual.dolares) < costos.dolares\n    ) {\n      return { error: 'No tienes suficientes recursos en esta propiedad para el entrenamiento.' };\n    }\n\n    const nivelEscuela = propiedadActual.habitaciones.find((h: FullHabitacionUsuario) => h.configuracionHabitacionId === ID_ESCUELA_ESPECIALIZACION)?.nivel || 0;\n    const duracion = calcularTiempoEntrenamiento(nivelSiguiente, config, nivelEscuela);\n\n    const fechaInicio = new Date();\n    const fechaFinalizacion = new Date(fechaInicio.getTime() + duracion * 1000);\n  \n    try {\n      await prisma.$transaction(async (tx) => {\n        await tx.propiedad.update({\n          where: { id: propertyId },\n          data: {\n            armas: { decrement: BigInt(costos.armas) },\n            municion: { decrement: BigInt(costos.municion) },\n            dolares: { decrement: BigInt(costos.dolares) },\n          },\n        });\n\n        await tx.colaEntrenamiento.create({\n            data: {\n                userId: user.id,\n                propiedadId: propertyId,\n                entrenamientoId: trainingId,\n                nivelDestino: nivelSiguiente,\n                fechaInicio,\n                fechaFinalizacion,\n            }\n        });\n      });\n  \n      revalidatePath('/training');\n      revalidatePath('/overview'); \n  \n      return { success: `\u00a1El entrenamiento de ${config.nombre} a nivel ${nivelSiguiente} ha comenzado!` };\n    } catch (error) {\n      console.error('Error durante la transacci\u00f3n de entrenamiento:', error);\n      return { error: 'Ocurri\u00f3 un error en el servidor al intentar entrenar.' };\n    }\n}\n"
            },
            {
              "name": "troop.actions.ts",
              "type": "file",
              "content": "\n\n'use server';\n\nimport { revalidatePath } from \"next/cache\";\nimport prisma from \"../prisma/prisma\";\nimport { getSessionUser } from \"../auth\";\nimport { getTroopConfigurations } from \"../data\";\nimport { calcularTiempoReclutamiento } from \"../formulas/troop-formulas\";\nimport { ID_CAMPO_ENTRENAMIENTO, ID_SEGURIDAD, TROOP_TYPE_DEFENSE } from \"../constants\";\nimport type { FullPropiedad, FullHabitacionUsuario } from \"../types\";\n\n\nexport async function iniciarReclutamiento(propiedadId: string, tropaId: string, cantidad: number) {\n    const user = await getSessionUser();\n  \n    if (!user) {\n      return { error: 'Usuario no autenticado.' };\n    }\n\n    if (cantidad <= 0) {\n        return { error: 'La cantidad debe ser mayor que cero.' };\n    }\n    \n    const propiedadActual = user.propiedades.find((p: FullPropiedad) => p.id === propiedadId);\n    if (!propiedadActual) {\n        return { error: 'Propiedad no encontrada para este usuario.' };\n    }\n\n    if (propiedadActual.colaReclutamiento) {\n        return { error: 'Ya hay un reclutamiento en progreso en esta propiedad.' };\n    }\n\n    const troopConfigs = await getTroopConfigurations();\n    const config = troopConfigs.find(t => t.id === tropaId);\n\n    if (!config) {\n         return { error: 'Configuraci\u00f3n de tropa no encontrada.' };\n    }\n\n    if (config.tipo === TROOP_TYPE_DEFENSE) {\n        return { error: 'Las unidades de defensa se entrenan en la secci\u00f3n de Seguridad.' };\n    }\n\n    const nivelCampoEntrenamiento = propiedadActual.habitaciones.find((h: FullHabitacionUsuario) => h.configuracionHabitacionId === ID_CAMPO_ENTRENAMIENTO)?.nivel || 1;\n\n    const costoArmasTotal = Number(config.costoArmas) * cantidad;\n    const costoMunicionTotal = Number(config.costoMunicion) * cantidad;\n    const costoDolaresTotal = Number(config.costoDolares) * cantidad;\n\n    const tiempoTotal = calcularTiempoReclutamiento(config, cantidad, nivelCampoEntrenamiento);\n  \n    if (\n      Number(propiedadActual.armas) < costoArmasTotal ||\n      Number(propiedadActual.municion) < costoMunicionTotal ||\n      Number(propiedadActual.dolares) < costoDolaresTotal\n    ) {\n      return { error: 'No tienes suficientes recursos para este reclutamiento.' };\n    }\n  \n    try {\n      const fechaInicio = new Date();\n      const fechaFinalizacion = new Date(fechaInicio.getTime() + tiempoTotal * 1000);\n\n      await prisma.$transaction([\n        prisma.propiedad.update({\n          where: { id: propiedadId },\n          data: {\n            armas: { decrement: BigInt(costoArmasTotal) },\n            municion: { decrement: BigInt(costoMunicionTotal) },\n            dolares: { decrement: BigInt(costoDolaresTotal) },\n          },\n        }),\n        prisma.colaReclutamiento.create({\n            data: {\n                propiedadId: propiedadId,\n                tropaId: tropaId,\n                cantidad: cantidad,\n                fechaInicio: fechaInicio,\n                fechaFinalizacion: fechaFinalizacion\n            }\n        })\n      ]);\n  \n      revalidatePath('/recruitment');\n      revalidatePath('/overview'); \n      revalidatePath('/(dashboard)/layout', 'layout');\n  \n      return { success: `\u00a1El reclutamiento de ${cantidad} x ${config.nombre} ha comenzado!` };\n    } catch (error) {\n      console.error('Error durante la transacci\u00f3n de reclutamiento:', error);\n      return { error: 'Ocurri\u00f3 un error en el servidor al intentar reclutar.' };\n    }\n}\n\n\nexport async function iniciarEntrenamientoSeguridad(propiedadId: string, tropaId: string, cantidad: number) {\n    const user = await getSessionUser();\n  \n    if (!user) {\n      return { error: 'Usuario no autenticado.' };\n    }\n\n    if (cantidad <= 0) {\n        return { error: 'La cantidad debe ser mayor que cero.' };\n    }\n    \n    const propiedadActual = user.propiedades.find((p: FullPropiedad) => p.id === propiedadId);\n    if (!propiedadActual) {\n        return { error: 'Propiedad no encontrada para este usuario.' };\n    }\n\n    if (propiedadActual.colaReclutamiento) {\n        return { error: 'Ya hay un reclutamiento en progreso en esta propiedad.' };\n    }\n\n    const troopConfigs = await getTroopConfigurations();\n    const config = troopConfigs.find(t => t.id === tropaId);\n\n    if (!config) {\n         return { error: 'Configuraci\u00f3n de tropa no encontrada.' };\n    }\n\n    if (config.tipo !== TROOP_TYPE_DEFENSE) {\n        return { error: 'Esta tropa no es una unidad de defensa.' };\n    }\n\n    const nivelSeguridad = propiedadActual.habitaciones.find((h: FullHabitacionUsuario) => h.configuracionHabitacionId === ID_SEGURIDAD)?.nivel || 1;\n\n    const costoArmasTotal = Number(config.costoArmas) * cantidad;\n    const costoMunicionTotal = Number(config.costoMunicion) * cantidad;\n    const costoDolaresTotal = Number(config.costoDolares) * cantidad;\n\n    // Usamos la misma f\u00f3rmula de tiempo que las tropas normales, pero con el nivel de seguridad\n    const tiempoTotal = calcularTiempoReclutamiento(config, cantidad, nivelSeguridad);\n  \n    if (\n      Number(propiedadActual.armas) < costoArmasTotal ||\n      Number(propiedadActual.municion) < costoMunicionTotal ||\n      Number(propiedadActual.dolares) < costoDolaresTotal\n    ) {\n      return { error: 'No tienes suficientes recursos para este entrenamiento.' };\n    }\n  \n    try {\n      const fechaInicio = new Date();\n      const fechaFinalizacion = new Date(fechaInicio.getTime() + tiempoTotal * 1000);\n\n      await prisma.$transaction([\n        prisma.propiedad.update({\n          where: { id: propiedadId },\n          data: {\n            armas: { decrement: BigInt(costoArmasTotal) },\n            municion: { decrement: BigInt(costoMunicionTotal) },\n            dolares: { decrement: BigInt(costoDolaresTotal) },\n          },\n        }),\n        prisma.colaReclutamiento.create({\n            data: {\n                propiedadId: propiedadId,\n                tropaId: tropaId,\n                cantidad: cantidad,\n                fechaInicio: fechaInicio,\n                fechaFinalizacion: fechaFinalizacion\n            }\n        })\n      ]);\n  \n      revalidatePath('/security');\n      revalidatePath('/overview'); \n      revalidatePath('/(dashboard)/layout', 'layout');\n  \n      return { success: `\u00a1El entrenamiento de ${cantidad} x ${config.nombre} ha comenzado!` };\n    } catch (error) {\n      console.error('Error durante la transacci\u00f3n de entrenamiento de seguridad:', error);\n      return { error: 'Ocurri\u00f3 un error en el servidor al intentar entrenar la seguridad.' };\n    }\n}\n\nexport async function assignTroopsToSecurity(propertyId: string, troopId: string, quantity: number) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"Usuario no autenticado.\" };\n    \n    if (quantity <= 0) return { error: \"La cantidad debe ser positiva.\"};\n\n    const troopInProperty = await prisma.tropaUsuario.findFirst({\n        where: {\n            propiedadId: propertyId,\n            configuracionTropaId: troopId,\n            propiedad: {\n                userId: user.id\n            }\n        }\n    });\n\n    if (!troopInProperty || troopInProperty.cantidad < quantity) {\n        return { error: \"No tienes suficientes tropas disponibles.\" };\n    }\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            await tx.tropaUsuario.update({\n                where: { id: troopInProperty.id },\n                data: { cantidad: { decrement: quantity } }\n            });\n\n            const existingSecurityTroop = await tx.tropaSeguridadUsuario.findFirst({\n                where: { propiedadId: propertyId, configuracionTropaId: troopId }\n            });\n\n            if(existingSecurityTroop) {\n                await tx.tropaSeguridadUsuario.update({\n                    where: { id: existingSecurityTroop.id },\n                    data: { cantidad: { increment: quantity } }\n                });\n            } else {\n                await tx.tropaSeguridadUsuario.create({\n                    data: {\n                        propiedadId: propertyId,\n                        configuracionTropaId: troopId,\n                        cantidad: quantity\n                    }\n                });\n            }\n        });\n        revalidatePath('/security');\n        return { success: \"Tropas asignadas a seguridad.\" };\n    } catch (e) {\n        console.error(\"Error assigning troops to security:\", e);\n        return { error: \"Ocurri\u00f3 un error al asignar las tropas.\" };\n    }\n}\n\n\nexport async function withdrawTroopsFromSecurity(propertyId: string, troopId: string, quantity: number) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"Usuario no autenticado.\" };\n    \n    if (quantity <= 0) return { error: \"La cantidad debe ser positiva.\"};\n\n    const securityTroop = await prisma.tropaSeguridadUsuario.findFirst({\n        where: {\n            propiedadId: propertyId,\n            configuracionTropaId: troopId,\n            propiedad: {\n                userId: user.id\n            }\n        }\n    });\n\n    if (!securityTroop || securityTroop.cantidad < quantity) {\n        return { error: \"No tienes suficientes tropas asignadas para retirar.\" };\n    }\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            await tx.tropaSeguridadUsuario.update({\n                where: { id: securityTroop.id },\n                data: { cantidad: { decrement: quantity } }\n            });\n\n            const existingTroop = await tx.tropaUsuario.findFirst({\n                where: { propiedadId: propertyId, configuracionTropaId: troopId }\n            });\n\n            if(existingTroop) {\n                await tx.tropaUsuario.update({\n                    where: { id: existingTroop.id },\n                    data: { cantidad: { increment: quantity } }\n                });\n            } else {\n                 await tx.tropaUsuario.create({\n                    data: {\n                        propiedadId: propertyId,\n                        configuracionTropaId: troopId,\n                        cantidad: quantity\n                    }\n                });\n            }\n        });\n        revalidatePath('/security');\n        return { success: \"Tropas retiradas de seguridad.\" };\n    } catch (e) {\n        console.error(\"Error withdrawing troops from security:\", e);\n        return { error: \"Ocurri\u00f3 un error al retirar las tropas.\" };\n    }\n}\n"
            },
            {
              "name": "user.actions.ts",
              "type": "file",
              "content": "\n'use server';\n\nimport prisma from \"../prisma/prisma\";\nimport type { FullPropiedad, UserWithProgress } from \"../types\";\nimport { calculateStorageCapacity, calcularProduccionTotalPorSegundo } from \"../formulas/room-formulas\";\nimport { revalidatePath } from \"next/cache\";\nimport { calcularPuntosEntrenamientos, calcularPuntosHabitaciones, calcularPuntosPropiedad, calcularPuntosTropas } from \"../formulas/score-formulas\";\nimport { getSessionUser } from \"../auth\";\nimport { getUserWithProgressByUsername } from \"../data\";\nimport { handleAttackMission } from \"./brawl.actions\"; \nimport { handleEspionageMission } from \"./espionage.actions\";\nimport { ResourceCost } from \"../types\";\nimport { Prisma } from \"@prisma/client/edge\";\nimport { shouldUpdateUserState, recordUserStateUpdate } from \"../cache\";\n\ninterface UserSettings {\n    name?: string;\n    title?: string;\n    avatarUrl?: string;\n}\n\nexport async function actualizarEstadoCompletoDelJuego(sessionUser: UserWithProgress): Promise<UserWithProgress> {\n    if (!shouldUpdateUserState(sessionUser.id)) {\n        return sessionUser;\n    }\n\n    const [userAfterConstructionCheck, userAfterRecruitmentCheck, userAfterMissionCheck, userAfterTrainingCheck] = await Promise.all([\n      verificarYFinalizarConstruccion(sessionUser),\n      verificarYFinalizarReclutamiento(sessionUser),\n      verificarYFinalizarMisiones(sessionUser),\n      verificarYFinalizarEntrenamientos(sessionUser),\n    ]);\n    \n    let combinedUser = { ...sessionUser, ...userAfterConstructionCheck, ...userAfterRecruitmentCheck, ...userAfterMissionCheck, ...userAfterTrainingCheck };\n  \n    const userWithUpdatedProgress = await obtenerEstadoJuegoActualizado(combinedUser);\n    const finalUser = await actualizarPuntuacionUsuario(userWithUpdatedProgress);\n\n    recordUserStateUpdate(sessionUser.id);\n\n    return finalUser;\n}\n\nexport async function updateUserSettings(settings: UserSettings) {\n    const user = await getSessionUser();\n\n    if (!user) {\n        return { error: \"Usuario no autenticado.\" };\n    }\n\n    try {\n        await prisma.user.update({\n            where: { id: user.id },\n            data: {\n                name: settings.name,\n                title: settings.title,\n                avatarUrl: settings.avatarUrl,\n            },\n        });\n\n        revalidatePath('/settings');\n        revalidatePath('/(dashboard)', 'layout');\n        revalidatePath('/profile/[userId]', 'page');\n\n        return { success: \"\u00a1Perfil actualizado correctamente!\" };\n    } catch (error) {\n        console.error(\"Error al actualizar el perfil:\", error);\n        return { error: \"Ocurri\u00f3 un error al actualizar el perfil.\" };\n    }\n}\n\nexport async function updatePropertyDetails(properties: {id: string, nombre: string}[], mainPropertyId: string) {\n    const user = await getSessionUser();\n    if (!user) return { error: \"No autenticado.\" };\n\n    const propertyIds = properties.map(p => p.id);\n    const userProperties = await prisma.propiedad.count({\n        where: { id: { in: propertyIds }, userId: user.id }\n    });\n\n    if (userProperties !== properties.length) {\n        return { error: \"No tienes permiso para modificar una o m\u00e1s de estas propiedades.\" };\n    }\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            // Set all properties to not be principal first\n            await tx.propiedad.updateMany({\n                where: {\n                    userId: user.id,\n                    nombre: 'Propiedad Principal'\n                },\n                data: {\n                    nombre: 'Propiedad' \n                }\n            });\n\n            for (const prop of properties) {\n                 const newName = prop.id === mainPropertyId ? 'Propiedad Principal' : prop.nombre;\n                 await tx.propiedad.update({\n                     where: { id: prop.id },\n                     data: { nombre: newName }\n                 });\n            }\n        });\n\n        revalidatePath('/(dashboard)', 'layout');\n        revalidatePath('/buildings');\n        return { success: \"Propiedades actualizadas correctamente.\" };\n    } catch (error) {\n        console.error(\"Error updating properties:\", error);\n        return { error: \"Ocurri\u00f3 un error al actualizar las propiedades.\" };\n    }\n}\n\n\nasync function updateUserLastSeen(userId: string): Promise<void> {\n    try {\n        await prisma.user.update({\n            where: { id: userId },\n            data: { lastSeen: new Date() },\n        });\n    } catch (error) {\n        console.error(`Error updating lastSeen for user ${userId}:`, error);\n    }\n}\n\n\nasync function actualizarRecursosPropiedad(propiedad: FullPropiedad): Promise<FullPropiedad> {\n    const ahora = new Date();\n    const ultimaActualizacion = new Date(propiedad.ultimaActualizacion);\n    const segundosTranscurridos = Math.max(0, Math.floor((ahora.getTime() - ultimaActualizacion.getTime()) / 1000));\n\n    if (segundosTranscurridos <= 0) {\n        return propiedad;\n    }\n    \n    const capacidad = calculateStorageCapacity(propiedad);\n    const produccionPorHora = calcularProduccionTotalPorSegundo(propiedad);\n\n    const armasGeneradas = (produccionPorHora.armas.produccionNeta / 3600) * segundosTranscurridos;\n    const municionGenerada = (produccionPorHora.municion.produccionNeta / 3600) * segundosTranscurridos;\n    const alcoholGenerado = (produccionPorHora.alcohol.produccionNeta / 3600) * segundosTranscurridos;\n    const dolaresGenerados = (produccionPorHora.dolares.produccionNeta / 3600) * segundosTranscurridos;\n\n    const nuevasArmas = Math.min(capacidad.armas, Number(propiedad.armas) + armasGeneradas);\n    const nuevaMunicion = Math.min(capacidad.municion, Number(propiedad.municion) + municionGenerada);\n    const nuevoAlcohol = Math.min(capacidad.alcohol, Number(propiedad.alcohol) + alcoholGenerado);\n    const nuevosDolares = Math.min(capacidad.dolares, Number(propiedad.dolares) + dolaresGenerados);\n\n    try {\n        const propiedadActualizada = await prisma.propiedad.update({\n            where: { id: propiedad.id },\n            data: {\n                armas: BigInt(Math.floor(nuevasArmas)),\n                municion: BigInt(Math.floor(nuevaMunicion)),\n                alcohol: BigInt(Math.floor(nuevoAlcohol)),\n                dolares: BigInt(Math.floor(nuevosDolares)),\n                ultimaActualizacion: ahora,\n            },\n            include: { \n                habitaciones: { include: { configuracionHabitacion: { include: { requisitos: true } } } },\n                colaConstruccion: { orderBy: { createdAt: 'asc' } }, \n                colaReclutamiento: { include: { tropaConfig: true } },\n                TropaUsuario: { include: { configuracionTropa: true } },\n                TropaSeguridadUsuario: { include: { configuracionTropa: true } }\n            }\n        });\n        return propiedadActualizada as FullPropiedad;\n    } catch (error) {\n        console.error(`Error actualizando recursos para propiedad ${propiedad.id}:`, error);\n        return propiedad;\n    }\n}\n\n\nexport async function obtenerEstadoJuegoActualizado(user: UserWithProgress): Promise<UserWithProgress> {\n    await updateUserLastSeen(user.id);\n\n    const propiedadesActualizadas = await Promise.all(\n        user.propiedades.map(propiedad => actualizarRecursosPropiedad(propiedad))\n    );\n\n    const incomingAttacks = await prisma.incomingAttack.findMany({\n        where: { defenderId: user.id }\n    });\n\n    return {\n        ...user,\n        propiedades: propiedadesActualizadas,\n        incomingAttacks: incomingAttacks,\n        lastSeen: new Date(),\n    };\n}\n\nasync function verificarYFinalizarConstruccionDePropiedad(propiedad: FullPropiedad): Promise<FullPropiedad> {\n  const cola = [...propiedad.colaConstruccion].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  if (cola.length === 0) return propiedad;\n\n  let seHizoUnCambio = false;\n\n  const construccionesTerminadas = cola.filter(c => c.fechaFinalizacion && new Date() >= new Date(c.fechaFinalizacion));\n  \n  if (construccionesTerminadas.length > 0) {\n    try {\n        await prisma.$transaction(async (tx) => {\n            for (const terminada of construccionesTerminadas) {\n                await tx.habitacionUsuario.update({\n                    where: {\n                        propiedadId_configuracionHabitacionId: {\n                            propiedadId: terminada.propiedadId,\n                            configuracionHabitacionId: terminada.habitacionId,\n                        },\n                    },\n                    data: {\n                        nivel: terminada.nivelDestino,\n                    },\n                });\n                await tx.colaConstruccion.delete({\n                    where: { id: terminada.id },\n                });\n            }\n        });\n        seHizoUnCambio = true;\n    } catch (error) {\n        console.error(`Error finalizando construcciones:`, error);\n    }\n  }\n\n  const propiedadPostFinalizacion = seHizoUnCambio \n    ? await prisma.propiedad.findUnique({ where: { id: propiedad.id }, include: { colaConstruccion: { orderBy: { createdAt: 'asc' } } } })\n    : { ...propiedad, colaConstruccion: cola };\n  \n  if (!propiedadPostFinalizacion) return propiedad;\n\n  const colaActual = propiedadPostFinalizacion.colaConstruccion;\n  const construccionActiva = colaActual.find(c => c.fechaFinalizacion);\n  \n  if (!construccionActiva && colaActual.length > 0) {\n      const proximaEnCola = colaActual[0];\n      const fechaInicio = new Date();\n      const fechaFinalizacion = new Date(fechaInicio.getTime() + proximaEnCola.duracion * 1000);\n      await prisma.colaConstruccion.update({\n          where: { id: proximaEnCola.id },\n          data: { fechaInicio, fechaFinalizacion },\n      });\n      seHizoUnCambio = true;\n  }\n\n  if (seHizoUnCambio) {\n    const propiedadRefrescada = await prisma.propiedad.findUnique({\n      where: { id: propiedad.id },\n      include: { \n        habitaciones: { include: { configuracionHabitacion: { include: { requisitos: true } } } },\n        colaConstruccion: { orderBy: { createdAt: 'asc' } }, \n        colaReclutamiento: { include: { tropaConfig: true } },\n        TropaUsuario: { include: { configuracionTropa: true } },\n        TropaSeguridadUsuario: { include: { configuracionTropa: true } }\n      }\n    });\n    return propiedadRefrescada as FullPropiedad;\n  }\n\n  return propiedad;\n}\n\nexport async function verificarYFinalizarConstruccion(user: UserWithProgress): Promise<UserWithProgress> {\n    const propiedadesActualizadas = await Promise.all(\n        user.propiedades.map(prop => verificarYFinalizarConstruccionDePropiedad(prop))\n    );\n    return { ...user, propiedades: propiedadesActualizadas };\n}\n\n\nasync function verificarYFinalizarReclutamientoDePropiedad(propiedad: FullPropiedad): Promise<FullPropiedad> {\n    const reclutamientoActivo = propiedad.colaReclutamiento;\n\n    if (!reclutamientoActivo || new Date() < new Date(reclutamientoActivo.fechaFinalizacion)) {\n        return propiedad;\n    }\n\n    try {\n        await prisma.$transaction(async (tx) => {\n            const tropaExistente = await tx.tropaUsuario.findUnique({\n                where: {\n                    propiedadId_configuracionTropaId: {\n                        propiedadId: propiedad.id,\n                        configuracionTropaId: reclutamientoActivo.tropaId,\n                    }\n                }\n            });\n\n            if (tropaExistente) {\n                await tx.tropaUsuario.update({\n                    where: {\n                        propiedadId_configuracionTropaId: {\n                            propiedadId: propiedad.id,\n                            configuracionTropaId: reclutamientoActivo.tropaId,\n                        }\n                    },\n                    data: { cantidad: { increment: reclutamientoActivo.cantidad } }\n                });\n            } else {\n                await tx.tropaUsuario.create({\n                    data: {\n                        propiedadId: propiedad.id,\n                        configuracionTropaId: reclutamientoActivo.tropaId,\n                        cantidad: reclutamientoActivo.cantidad,\n                    }\n                });\n            }\n            await tx.colaReclutamiento.delete({ where: { id: reclutamientoActivo.id } });\n        });\n        \n        const propiedadRefrescada = await prisma.propiedad.findUnique({\n             where: { id: propiedad.id },\n             include: { \n                habitaciones: { include: { configuracionHabitacion: { include: { requisitos: true } } } },\n                colaConstruccion: { orderBy: { createdAt: 'asc' } }, \n                colaReclutamiento: { include: { tropaConfig: true } },\n                TropaUsuario: { include: { configuracionTropa: true } },\n                TropaSeguridadUsuario: { include: { configuracionTropa: true } }\n              }\n        });\n        return propiedadRefrescada as FullPropiedad;\n\n    } catch (error) {\n        console.error(`Error finalizando el reclutamiento en la propiedad ${propiedad.id}:`, error);\n        return propiedad;\n    }\n}\n\n\nexport async function verificarYFinalizarReclutamiento(user: UserWithProgress): Promise<UserWithProgress> {\n    const propiedadesActualizadas = await Promise.all(\n        user.propiedades.map(prop => prop.colaReclutamiento ? verificarYFinalizarReclutamientoDePropiedad(prop) : prop)\n    );\n    return { ...user, propiedades: propiedadesActualizadas };\n}\n\nexport async function verificarYFinalizarEntrenamientos(user: UserWithProgress): Promise<UserWithProgress> {\n    if (!user.colaEntrenamientos || user.colaEntrenamientos.length === 0) return user;\n\n    const ahora = new Date();\n    let seHizoUnCambio = false;\n\n    const entrenamientosTerminados = user.colaEntrenamientos.filter(e => ahora >= new Date(e.fechaFinalizacion));\n    const idsTerminados = entrenamientosTerminados.map(e => e.id);\n\n    if (entrenamientosTerminados.length > 0) {\n        try {\n            await prisma.$transaction(async (tx) => {\n                // Primero, eliminar todos los registros de la cola que han terminado.\n                await tx.colaEntrenamiento.deleteMany({\n                    where: { id: { in: idsTerminados } }\n                });\n                \n                // Luego, actualizar los niveles de los usuarios.\n                for (const terminado of entrenamientosTerminados) {\n                    await tx.entrenamientoUsuario.upsert({\n                        where: {\n                            userId_configuracionEntrenamientoId: {\n                                userId: terminado.userId,\n                                configuracionEntrenamientoId: terminado.entrenamientoId\n                            }\n                        },\n                        update: {\n                            nivel: terminado.nivelDestino,\n                        },\n                        create: {\n                            userId: terminado.userId,\n                            configuracionEntrenamientoId: terminado.entrenamientoId,\n                            nivel: terminado.nivelDestino,\n                        }\n                    });\n                }\n            });\n            seHizoUnCambio = true;\n        } catch (error) {\n            console.error(\"Error al finalizar entrenamientos:\", error);\n        }\n    }\n\n    if (seHizoUnCambio) {\n        const userRefrescado = await getUserWithProgressByUsername(user.username);\n        if(userRefrescado) return { ...user, colaEntrenamientos: userRefrescado.colaEntrenamientos, entrenamientos: userRefrescado.entrenamientos };\n    }\n    \n    return user;\n}\n\n\nexport async function verificarYFinalizarMisiones(user: UserWithProgress): Promise<UserWithProgress> {\n    if (!user.misiones || user.misiones.length === 0) return user;\n\n    const ahora = new Date();\n    let seHizoUnCambio = false;\n\n    for (const mision of [...user.misiones]) { // Create a shallow copy to iterate over, as the original array might be modified\n        const fechaLlegada = new Date(mision.fechaLlegada);\n\n        if (ahora >= fechaLlegada && mision.tipoMision !== 'REGRESO') {\n            seHizoUnCambio = true;\n            if (mision.tipoMision === 'ATAQUE') {\n                await Promise.all([\n                    handleAttackMission(mision),\n                    prisma.incomingAttack.deleteMany({ where: { missionId: mision.id } })\n                ]);\n            } else if (mision.tipoMision === 'ESPIONAJE') {\n                 await Promise.all([\n                    handleEspionageMission(mision),\n                    prisma.incomingAttack.deleteMany({ where: { missionId: mision.id } })\n                ]);\n            }\n        }\n        \n        const fechaFinal = mision.fechaRegreso;\n        if (fechaFinal && ahora >= new Date(fechaFinal)) {\n            seHizoUnCambio = true;\n            \n            const propiedadOrigen = await prisma.propiedad.findUnique({\n                where: { id: mision.propiedadOrigenId },\n                include: { habitaciones: { include: { configuracionHabitacion: true } } }\n            });\n\n            if (propiedadOrigen) {\n                const capacidadAlmacenamiento = calculateStorageCapacity(propiedadOrigen as FullPropiedad);\n                \n                // Add returning resources back to the property\n                if (mision.recursos) {\n                    const loot = mision.recursos as ResourceCost;\n                    const updatedArmas = Math.min(capacidadAlmacenamiento.armas, Number(propiedadOrigen.armas) + loot.armas);\n                    const updatedMunicion = Math.min(capacidadAlmacenamiento.municion, Number(propiedadOrigen.municion) + loot.municion);\n                    const updatedDolares = Math.min(capacidadAlmacenamiento.dolares, Number(propiedadOrigen.dolares) + loot.dolares);\n                    const updatedAlcohol = Math.min(capacidadAlmacenamiento.alcohol, Number(propiedadOrigen.alcohol) + loot.alcohol);\n\n                    await prisma.propiedad.update({\n                        where: { id: mision.propiedadOrigenId },\n                        data: {\n                            armas: BigInt(Math.floor(updatedArmas)),\n                            municion: BigInt(Math.floor(updatedMunicion)),\n                            dolares: BigInt(Math.floor(updatedDolares)),\n                            alcohol: BigInt(Math.floor(updatedAlcohol)),\n                        }\n                    });\n                }\n    \n                // Add returning troops back to the property\n                const tropasQueRegresan = mision.tropas as { id: string; cantidad: number }[];\n                for (const tropa of tropasQueRegresan) {\n                    await prisma.tropaUsuario.update({\n                        where: {\n                            propiedadId_configuracionTropaId: {\n                                propiedadId: mision.propiedadOrigenId,\n                                configuracionTropaId: tropa.id,\n                            },\n                        },\n                        data: {\n                            cantidad: { increment: tropa.cantidad },\n                        },\n                    });\n                }\n            }\n\n            try {\n                await prisma.colaMisiones.delete({ where: { id: mision.id } });\n            } catch (error) {\n                if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n                    // Record not found, it was likely already processed and deleted.\n                    console.log(`Mission ${mision.id} already deleted, skipping.`);\n                } else {\n                    // Re-throw other errors\n                    throw error;\n                }\n            }\n        }\n    }\n\n    if (seHizoUnCambio) {\n        const userRefrescado = await getUserWithProgressByUsername(user.username);\n        if (userRefrescado) return userRefrescado;\n    }\n\n    return user;\n}\n\n\nexport async function actualizarPuntuacionUsuario(user: UserWithProgress): Promise<UserWithProgress> {\n  const puntosHabitaciones = calcularPuntosHabitaciones(user.propiedades);\n  const puntosTropas = calcularPuntosTropas(user.propiedades);\n  const puntosEntrenamientos = calcularPuntosEntrenamientos(user.entrenamientos);\n  const puntosTotales = puntosHabitaciones + puntosTropas + puntosEntrenamientos;\n\n  try {\n    const puntuacionActualizada = await prisma.puntuacionUsuario.upsert({\n      where: { userId: user.id },\n      create: {\n        userId: user.id,\n        puntosHabitaciones,\n        puntosTropas,\n        puntosEntrenamientos,\n        puntosTotales,\n        updatedAt: new Date(),\n      },\n      update: {\n        puntosHabitaciones,\n        puntosTropas,\n        puntosEntrenamientos,\n        puntosTotales,\n        updatedAt: new Date(),\n      },\n    });\n\n    const updatedUser = { ...user, puntuacion: puntuacionActualizada };\n    return updatedUser;\n    \n  } catch (error) {\n    console.error(\"Error actualizando la puntuaci\u00f3n del usuario:\", error);\n    return user;\n  }\n}\n"
            }
          ]
        },
        {
          "name": "auth.ts",
          "type": "file",
          "content": "// In a real app, you'd use a library like next-auth or a custom solution.\n// For this mock, we'll just simulate a session.\n\nimport type { UserWithProgress } from './data';\nimport { getUserWithProgressByUsername } from './data';\n\nexport async function getSessionUser(): Promise<UserWithProgress | null> {\n    // Simulate checking for a session cookie or token\n    // In this case, we'll just hardcode the logged-in user.\n    const username = \"bomberox\"; \n    \n    if (!username) {\n        return null;\n    }\n    \n    const user = await getUserWithProgressByUsername(username);\n    \n    return user;\n}\n"
        },
        {
          "name": "cache.ts",
          "type": "file",
          "content": "// A simple in-memory cache for storing server-side timestamps.\n// Note: This cache is not persistent and will be cleared on server restart.\n// For a production application, a more robust solution like Redis would be preferable.\n\ninterface TimestampCache {\n  [key: string]: number; // key: userId, value: timestamp (milliseconds)\n}\n\nconst userUpdateTimestamps: TimestampCache = {};\n\nconst CACHE_DURATION_MS = 30 * 1000; // 30 seconds\n\n/**\n * Checks if a user's game state can be updated based on the last update time.\n * @param userId The ID of the user.\n * @returns {boolean} `true` if the user should be updated, `false` otherwise.\n */\nexport function shouldUpdateUserState(userId: string): boolean {\n  const now = Date.now();\n  const lastUpdate = userUpdateTimestamps[userId];\n\n  if (!lastUpdate || now - lastUpdate > CACHE_DURATION_MS) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Records that a user's game state has just been updated.\n * @param userId The ID of the user.\n */\nexport function recordUserStateUpdate(userId: string): void {\n  userUpdateTimestamps[userId] = Date.now();\n}\n"
        },
        {
          "name": "constants.ts",
          "type": "file",
          "content": "\n// /src/lib/constants.ts\n\n// --- AUTH ---\nexport const SESSION_COOKIE_NAME = 'vendetta-session';\nexport const ADMIN_COOKIE_NAME = 'vendetta-admin-session';\nexport const SUPER_USER_COOKIE_NAME = 'vendetta-super-session';\n\n// --- GAME RULES ---\nexport const MAX_CONSTRUCTION_QUEUE_SIZE = 5;\nexport const BASE_STORAGE_CAPACITY = 10000;\nexport const STORAGE_CAPACITY_PER_LEVEL = 150000;\n\n\n// --- SPECIAL BUILDING IDs ---\nexport const ID_OFICINA_JEFE = 'oficina_del_jefe';\nexport const ID_ESCUELA_ESPECIALIZACION = 'escuela_especializacion';\nexport const ID_CAMPO_ENTRENAMIENTO = 'campo_de_entrenamiento';\nexport const ID_SEGURIDAD = 'seguridad';\n\n// --- TROOP IDs ---\nexport const ID_TROPA_ESPIA = 'espia';\nexport const ID_TROPA_OCUPACION = 'ocupacion';\n\n// --- TROOP TYPES ---\nexport const TROOP_TYPE_DEFENSE = 'DEFENSA';\nexport const TROOP_TYPE_ATTACK = 'ATAQUE';\nexport const TROOP_TYPE_TRANSPORT = 'TRANSPORTE';\nexport const TROOP_TYPE_SPY = 'ESPIONAJE';\nexport const TROOP_TYPE_OCCUPY = 'OCUPAR';\n\n// --- MISSION TYPES ---\nexport const MISSION_TYPES_NO_RETURN = ['OCUPAR'];\n\n\n// --- UI SORTING ---\nexport const RECRUITMENT_TROOP_ORDER = [\n    \"maton\", \"portero\", \"acuchillador\", \"pistolero\", \"ocupacion\", \"espia\", \"porteador\", \"cia\", \"fbi\", \"transportista\", \"tactico\", \"francotirador\", \"asesino\", \"ninja\", \"demoliciones\", \"mercenario\"\n];\n\nexport const SECURITY_TROOP_ORDER = [\"trabajador_ilegal\", \"centinela\", \"policia\", \"guardaespaldas\", \"guardia_de_honor\"];\n\nexport const TRAINING_ORDER = [\n    \"rutas\", \"encargos\", \"extorsion\", \"administracion\", \"contrabando\", \"espionaje\", \"seguridad\",\n    \"proteccion\", \"combate\", \"armas\", \"tiro\", \"explosivos\", \"guerrilla\", \"psicologico\", \"quimico\", \"honor\"\n];\n\nexport const ROOM_ORDER = [\n    'oficina_del_jefe', 'escuela_especializacion', 'armeria', 'almacen_de_municion',\n    'cerveceria', 'taberna', 'contrabando', 'almacen_de_armas', 'deposito_de_municion',\n    'almacen_de_alcohol', 'caja_fuerte', 'campo_de_entrenamiento', 'seguridad',\n    'torreta_de_fuego_automatico', 'minas_ocultas'\n];\n\n// --- RESOURCES ---\nexport const resourceIcons: { [key: string]: string } = {\n    armas: '/img/recursos/armas.svg',\n    municion: '/img/recursos/municion.svg',\n    alcohol: '/img/recursos/alcohol.svg',\n    dolares: '/img/recursos/dolares.svg',\n};\n"
        },
        {
          "name": "data.ts",
          "type": "file",
          "content": "\n\n\"use server\"\n\nimport { Prisma, PrismaClient, ColaMisiones } from '@prisma/client/edge'\nimport { withAccelerate } from '@prisma/extension-accelerate'\nimport { cache } from 'react';\nimport { calculateStorageCapacity, calcularProduccionTotalPorSegundo } from './formulas/room-formulas';\nimport type { FullPropiedad, UserWithProgress, FullBattleReport, FullFamily, FullFamilyInvitation, FullConfiguracionEntrenamiento, FullConfiguracionHabitacion, FullConfiguracionTropa, UserForRanking, UserProfileData, FullMessage, PropertyWithOwner, FullEspionageReport, IncomingAttack } from './types';\n\n\nconst prisma = new PrismaClient().$extends(withAccelerate())\n\n\n// --- FUNCIONES DE ACCESO A DATOS ---\nexport const getBattleReportById = cache(async (id: string): Promise<FullBattleReport | null> => {\n    try {\n        const report = await prisma.battleReport.findUnique({\n            where: { id },\n            include: {\n                attacker: { select: { id: true, name: true, avatarUrl: true } },\n                defender: { select: { id: true, name: true, avatarUrl: true } },\n            }\n        });\n        return report as FullBattleReport | null;\n    } catch (e) {\n        console.error(\"Error fetching battle report by ID\", e);\n        return null;\n    }\n});\n\nexport const getEspionageReportById = cache(async (id: string): Promise<FullEspionageReport | null> => {\n    try {\n        const report = await prisma.espionageReport.findUnique({\n            where: { id },\n            include: {\n                attacker: { select: { id: true, name: true, avatarUrl: true } },\n                defender: { select: { id: true, name: true, avatarUrl: true } },\n            }\n        });\n        return report as FullEspionageReport | null;\n    } catch (e) {\n        console.error(\"Error fetching espionage report by ID\", e);\n        return null;\n    }\n});\n\nexport const getBattleReportsForUser = cache(async (userId: string): Promise<FullBattleReport[]> => {\n    try {\n        const reports = await prisma.battleReport.findMany({\n            where: {\n                OR: [\n                    { attackerId: userId },\n                    { defenderId: userId },\n                ]\n            },\n            include: {\n                attacker: { select: { id: true, name: true, avatarUrl: true } },\n                defender: { select: { id: true, name: true, avatarUrl: true } },\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 50\n        });\n        return reports as FullBattleReport[];\n    } catch(e) {\n        console.error(\"Error fetching battle reports\", e);\n        return [];\n    }\n});\n\nexport const getEspionageReportsForUser = cache(async (userId: string): Promise<FullEspionageReport[]> => {\n    try {\n        const reports = await prisma.espionageReport.findMany({\n            where: {\n                OR: [\n                    { attackerId: userId },\n                    { defenderId: userId },\n                ]\n            },\n            include: {\n                attacker: { select: { id: true, name: true, avatarUrl: true } },\n                defender: { select: { id: true, name: true, avatarUrl: true } },\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 50\n        });\n        return reports as FullEspionageReport[];\n    } catch(e) {\n        console.error(\"Error fetching espionage reports\", e);\n        return [];\n    }\n});\n\nexport const getRecentBattleReports = cache(async (): Promise<FullBattleReport[]> => {\n    try {\n        const reports = await prisma.battleReport.findMany({\n            include: {\n                attacker: { select: { id: true, name: true, avatarUrl: true } },\n                defender: { select: { id: true, name: true, avatarUrl: true } },\n            },\n            orderBy: {\n                createdAt: 'desc'\n            },\n            take: 100,\n        });\n        return reports as FullBattleReport[];\n    } catch (e) {\n        console.error(\"Error fetching recent battle reports\", e);\n        return [];\n    }\n});\n\n\nexport const getTroopBonusConfig = cache(async () => {\n    try {\n        const bonusConfig = await prisma.tropaBonusContrincante.findMany();\n        return bonusConfig;\n    } catch (e) {\n        console.error(\"Error fetching troop bonus config\", e);\n        return [];\n    }\n});\n\nexport const getMessagesForUser = cache(async (userId: string): Promise<FullMessage[]> => {\n    try {\n        const messages = await prisma.message.findMany({\n            where: { \n                recipientId: userId,\n                category: 'JUGADOR' // Solo mensajes de jugadores\n            },\n            include: {\n                sender: {\n                    select: {\n                        id: true,\n                        name: true,\n                        avatarUrl: true\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n        return messages as FullMessage[];\n    } catch (e) {\n        console.error(\"Error fetching messages for user\", e);\n        return [];\n    }\n});\n\nexport const getNotificationFeedForUser = cache(async (userId: string) => {\n    try {\n        const [messages, battleReports, espionageReports] = await Promise.all([\n            getMessagesForUser(userId),\n            getBattleReportsForUser(userId),\n            getEspionageReportsForUser(userId)\n        ]);\n\n        const messageFeed = messages.map(m => ({ ...m, type: 'message' as const }));\n        const battleFeed = battleReports.map(b => ({ ...b, type: 'battle' as const }));\n        const espionageFeed = espionageReports.map(e => ({ ...e, type: 'espionage' as const }));\n\n        const combinedFeed = [...messageFeed, ...battleFeed, ...espionageFeed];\n        \n        combinedFeed.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n        return combinedFeed;\n    } catch (e) {\n        console.error(\"Error fetching notification feed for user\", e);\n        return [];\n    }\n});\n\n\nexport const getFamilyById = cache(async(id: string) => {\n    try {\n        const family = await prisma.family.findUnique({\n            where: { id },\n            include: {\n                members: {\n                    include: {\n                        user: {\n                            select: {\n                                id: true,\n                                name: true,\n                                puntuacion: true,\n                                lastSeen: true,\n                            }\n                        }\n                    },\n                    orderBy: {\n                        user: {\n                           puntuacion: {\n                             puntosTotales: 'desc'\n                           }\n                        }\n                    }\n                },\n                announcements: {\n                    include: {\n                        author: {\n                            select: {\n                                id: true,\n                                name: true,\n                                avatarUrl: true,\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: 'desc',\n                    },\n                    take: 10\n                }\n            }\n        });\n        return family as FullFamily | null;\n    } catch (e) {\n        console.error(\"Error fetching family by id\", e);\n        return null;\n    }\n});\n\nexport const getFamilyByIdWithAllMembersData = cache(async (familyId: string): Promise<FullFamily | null> => {\n    try {\n        const family = await prisma.family.findUnique({\n            where: { id: familyId },\n            include: {\n                members: {\n                    include: {\n                        user: {\n                            include: {\n                                propiedades: {\n                                    include: {\n                                        habitaciones: { include: { configuracionHabitacion: true } },\n                                        TropaUsuario: { include: { configuracionTropa: true } },\n                                        TropaSeguridadUsuario: { include: { configuracionTropa: true } }\n                                    }\n                                },\n                                entrenamientos: { include: { configuracionEntrenamiento: true } },\n                                puntuacion: true\n                            }\n                        }\n                    },\n                     orderBy: {\n                        user: {\n                           puntuacion: {\n                             puntosTotales: 'desc'\n                           }\n                        }\n                    }\n                },\n                 announcements: {\n                    include: {\n                        author: {\n                            select: {\n                                id: true,\n                                name: true,\n                                avatarUrl: true,\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: 'desc',\n                    },\n                    take: 10\n                }\n            }\n        });\n        return family as any;\n    } catch (e) {\n        console.error(\"Error fetching full family data by id\", e);\n        return null;\n    }\n});\n\nexport const getUserFamily = cache(async(userId: string) => {\n    try {\n        const familyMember = await prisma.familyMember.findUnique({\n            where: { userId },\n        });\n        if (!familyMember) return null;\n        return getFamilyById(familyMember.familyId);\n    } catch(e) {\n        console.error(\"Error fetching user family\", e);\n        return null;\n    }\n});\n\n\nexport const getPropertyOwner = cache(async (coords: { ciudad: number, barrio: number, edificio: number }): Promise<PropertyWithOwner['user'] | null> => {\n    try {\n        const property = await prisma.propiedad.findUnique({\n            where: {\n                ciudad_barrio_edificio: coords\n            },\n            select: {\n                user: {\n                    select: {\n                        id: true,\n                        name: true,\n                        username: true,\n                        password: true,\n                        title: true,\n                        avatarUrl: true,\n                        lastSeen: true,\n                        createdAt: true,\n                        updatedAt: true,\n                        puntuacion: {\n                            select: {\n                                puntosTotales: true\n                            }\n                        },\n                        familyMember: {\n                            include: {\n                                family: {\n                                    select: {\n                                        id: true,\n                                        name: true,\n                                        tag: true,\n                                        avatarUrl: true\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n        return property?.user as UserProfileData | null;\n    } catch(e) {\n        return null;\n    }\n});\n\nexport const getPropertiesByLocation = cache(async (ciudad: number, barrio: number) => {\n    try {\n        const properties = await prisma.propiedad.findMany({\n            where: {\n                ciudad,\n                barrio,\n            },\n            include: {\n                user: {\n                    include: {\n                        familyMember: {\n                            include: {\n                                family: true\n                            }\n                        },\n                        puntuacion: {\n                            select: {\n                                puntosTotales: true\n                            }\n                        }\n                    }\n                }\n            }\n        });\n        return properties;\n    } catch (error) {\n        console.error(\"Error fetching properties by location:\", error);\n        return [];\n    }\n});\n\nexport const getUsersForRanking = cache(async (skip: number, take: number): Promise<UserForRanking[]> => {\n    try {\n        const users = await prisma.user.findMany({\n            skip,\n            take,\n            include: {\n                puntuacion: true,\n                _count: {\n                    select: { propiedades: true },\n                }\n            },\n            orderBy: {\n                puntuacion: {\n                    puntosTotales: 'desc'\n                }\n            }\n        });\n        return users as UserForRanking[];\n    } catch (error) {\n        console.error(\"Error fetching users for ranking:\", error);\n        return [];\n    }\n});\n\nexport const getUsersForHonorRanking = cache(async (skip: number, take: number): Promise<UserForRanking[]> => {\n    try {\n        const users = await prisma.user.findMany({\n            skip,\n            take,\n            include: {\n                puntuacion: true,\n            },\n            orderBy: {\n                puntuacion: {\n                    puntosHonorTotales: 'desc'\n                }\n            }\n        });\n        return users as UserForRanking[];\n    } catch (error) {\n        console.error(\"Error fetching users for honor ranking:\", error);\n        return [];\n    }\n});\n\nexport const getFamiliesForRanking = cache(async (skip: number, take: number): Promise<FullFamily[]> => {\n    try {\n        const families = await prisma.family.findMany({\n            skip,\n            take,\n            include: {\n                members: {\n                    include: {\n                        user: {\n                            include: {\n                                puntuacion: true\n                            }\n                        }\n                    }\n                },\n                announcements: {\n                    include: {\n                        author: {\n                            select: {\n                                id: true,\n                                name: true,\n                                avatarUrl: true,\n                            }\n                        }\n                    },\n                     orderBy: {\n                        createdAt: 'desc',\n                    },\n                    take: 10\n                }\n            }\n        });\n        // You might need to add a sort based on total points in the future\n        return families as FullFamily[];\n    } catch (error) {\n        console.error(\"Error fetching families for ranking:\", error);\n        return [];\n    }\n});\n\nexport const getRoomConfigurations = cache(async (): Promise<FullConfiguracionHabitacion[]> => {\n  try {\n    const roomConfigurations = await prisma.configuracionHabitacion.findMany({\n        include: {\n            requisitos: true,\n        },\n      orderBy: { id: 'asc' },\n    });\n    return roomConfigurations as FullConfiguracionHabitacion[];\n  } catch (error) {\n    console.error(\"Error fetching room configurations:\", error);\n    return [];\n  }\n});\n\nexport const getTroopConfigurations = cache(async (): Promise<FullConfiguracionTropa[]> => {\n    try {\n        const troopConfigurations = await prisma.configuracionTropa.findMany({\n            include: {\n                bonusContrincante: true,\n            }\n        });\n        return troopConfigurations as FullConfiguracionTropa[];\n    } catch (error) {\n        console.error(\"Error fetching troop configurations:\", error);\n        return [];\n    }\n});\n\nexport const getTrainingConfigurations = cache(async (): Promise<FullConfiguracionEntrenamiento[]> => {\n    try {\n        const trainingConfigurations = await prisma.configuracionEntrenamiento.findMany({\n            include: {\n                requisitos: true\n            }\n        });\n        return trainingConfigurations as FullConfiguracionEntrenamiento[];\n    } catch (error) {\n        console.error(\"Error fetching training configurations:\", error);\n        return [];\n    }\n});\n\n\nexport const getUsers = cache(async () => {\n    try {\n        const users = await prisma.user.findMany({\n            select: {\n                id: true,\n                name: true,\n                familyMember: {\n                    select: {\n                        familyId: true\n                    }\n                }\n            }\n        });\n        return users;\n    } catch (error) {\n        console.error(\"Error fetching users:\", error);\n        return [];\n    }\n});\n\nexport const getUserProfileById = cache(async (userId: string): Promise<UserProfileData | null> => {\n    try {\n        const user = await prisma.user.findUnique({\n            where: { id: userId },\n            include: {\n                puntuacion: true,\n                propiedades: {\n                    include: {\n                        habitaciones: {\n                            include: {\n                                configuracionHabitacion: true,\n                            }\n                        },\n                        TropaUsuario: {\n                            include: {\n                                configuracionTropa: true,\n                            }\n                        },\n                        TropaSeguridadUsuario: {\n                             include: {\n                                configuracionTropa: true,\n                            }\n                        }\n                    }\n                },\n                familyMember: {\n                    include: {\n                        family: true\n                    }\n                }\n            }\n        });\n        return user as any;\n    } catch(e) {\n        console.error(`Error fetching profile for user ${userId}`, e);\n        return null;\n    }\n})\n\nexport const getMaximumResourceCapacity = cache(async () => {\n    const properties = await prisma.propiedad.findMany({\n        include: { habitaciones: { include: { configuracionHabitacion: true } } }\n    });\n    return [\n        { name: \"Armas\", maxValue: Math.max(...properties.map(p => calculateStorageCapacity(p as FullPropiedad).armas)) },\n        { name: \"Munici\u00f3n\", maxValue: Math.max(...properties.map(p => calculateStorageCapacity(p as FullPropiedad).municion)) },\n        { name: \"Alcohol\", maxValue: Math.max(...properties.map(p => calculateStorageCapacity(p as FullPropiedad).alcohol)) },\n        { name: \"D\u00f3lares\", maxValue: Math.max(...properties.map(p => calculateStorageCapacity(p as FullPropiedad).dolares)) },\n    ];\n});\n\nexport const getGlobalStatistics = cache(async () => {\n    try {\n        const [\n            allRoomConfigs,\n            allTrainingConfigs,\n            allTroopConfigs,\n            roomStats,\n            trainingStats,\n            rawTroopStats,\n        ] = await Promise.all([\n            getRoomConfigurations(),\n            getTrainingConfigurations(),\n            getTroopConfigurations(),\n            prisma.habitacionUsuario.findMany(),\n            prisma.entrenamientoUsuario.findMany(),\n            prisma.tropaUsuario.findMany({\n                where: {\n                    propiedad: {\n                        isNot: undefined\n                    }\n                },\n                include: {\n                    propiedad: {\n                        select: {\n                            userId: true\n                        }\n                    }\n                }\n            }),\n        ]);\n\n        const troopStatsMap = new Map<string, number>();\n        rawTroopStats.forEach(stat => {\n            if (stat.propiedad) {\n                const key = `${stat.propiedad.userId}-${stat.configuracionTropaId}`;\n                const currentTotal = troopStatsMap.get(key) || 0;\n                troopStatsMap.set(key, currentTotal + stat.cantidad);\n            }\n        });\n        \n        const troopStats = Array.from(troopStatsMap.entries()).map(([key, total]) => {\n            const [userId, configuracionTropaId] = key.split('-');\n            return { userId, configuracionTropaId, total };\n        });\n\n        return {\n            allRoomConfigs,\n            allTrainingConfigs,\n            allTroopConfigs,\n            roomStats,\n            trainingStats,\n            troopStats,\n        };\n\n    } catch (e) {\n        console.error(\"Error fetching global statistics\", e);\n        throw new Error(\"Could not fetch global statistics\");\n    }\n});\n\nexport const getFamilyRequests = cache(async (familyId: string): Promise<FullFamilyInvitation[]> => {\n    try {\n        const requests = await prisma.familyInvitation.findMany({\n            where: {\n                familyId: familyId,\n                type: 'REQUEST',\n                status: \"PENDING\",\n            },\n            include: {\n                user: {\n                    select: {\n                        id: true,\n                        name: true,\n                        avatarUrl: true,\n                        puntuacion: true,\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'asc'\n            }\n        });\n        return requests as any;\n    } catch(e) {\n        console.error(`Error fetching requests for family ${familyId}`, e);\n        return [];\n    }\n});\n\n\nexport const getInvitationsForUser = cache(async (userId: string): Promise<FullFamilyInvitation[]> => {\n    try {\n        const invitations = await prisma.familyInvitation.findMany({\n            where: {\n                userId: userId,\n                status: \"PENDING\",\n            },\n            include: {\n                family: {\n                    select: {\n                        id: true,\n                        name: true,\n                        tag: true,\n                        avatarUrl: true\n                    }\n                }\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n        return invitations as any;\n    } catch(e) {\n        console.error(`Error fetching invitations for user ${userId}`, e);\n        return [];\n    }\n});\n\nfunction getTroopsInMissions(missions: ColaMisiones[]): Map<string, number> {\n  const troopMap = new Map<string, number>();\n  missions.forEach(mission => {\n    const tropas = mission.tropas as { id: string; cantidad: number }[];\n    tropas.forEach(tropa => {\n      troopMap.set(tropa.id, (troopMap.get(tropa.id) || 0) + tropa.cantidad);\n    });\n  });\n  return troopMap;\n}\n\nexport const getUserWithProgressByUsername = cache(async (username: string): Promise<UserWithProgress | null> => {\n    const userInclude = {\n        propiedades: {\n            include: {\n                habitaciones: {\n                    include: {\n                        configuracionHabitacion: {\n                          include: {\n                            requisitos: true\n                          }\n                        }\n                    },\n                     orderBy: {\n                        configuracionHabitacionId: 'asc' as Prisma.SortOrder\n                    }\n                },\n                TropaUsuario: {\n                    include: {\n                        configuracionTropa: true\n                    }\n                },\n                TropaSeguridadUsuario: {\n                    include: {\n                        configuracionTropa: true\n                    }\n                },\n                colaConstruccion: {\n                    orderBy: {\n                        createdAt: 'asc' as Prisma.SortOrder\n                    }\n                },\n                colaReclutamiento: {\n                    include: {\n                        tropaConfig: true\n                    }\n                }\n            }\n        },\n        entrenamientos: {\n            include: {\n                configuracionEntrenamiento: true\n            },\n            orderBy: {\n                configuracionEntrenamientoId: 'asc' as Prisma.SortOrder\n            }\n        },\n        puntuacion: true,\n        misiones: {\n            orderBy: {\n                fechaLlegada: 'asc' as Prisma.SortOrder\n            }\n        },\n        incomingAttacks: {\n            orderBy: {\n                arrivalTime: 'asc' as Prisma.SortOrder\n            }\n        },\n        colaEntrenamientos: {\n            include: {\n                entrenamiento: true,\n                propiedad: {\n                    select: { nombre: true }\n                }\n            },\n            orderBy: {\n                fechaFinalizacion: 'asc' as Prisma.SortOrder\n            }\n        },\n        familyMember: {\n            include: {\n                family: {\n                    include: {\n                        members: {\n                            include: {\n                                user: {\n                                    select: {\n                                        lastSeen: true\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        _count: {\n            select: {\n                receivedMessages: {\n                    where: { isRead: false }\n                }\n            }\n        }\n    };\n\n    try {\n        const user = await prisma.user.findUnique({\n            where: { username },\n            include: userInclude\n        });\n\n        if (!user) return null;\n\n        const troopsInMission = getTroopsInMissions(user.misiones);\n\n        if (troopsInMission.size > 0) {\n            user.propiedades.forEach(propiedad => {\n                propiedad.TropaUsuario.forEach(tropaUsuario => {\n                    const inMissionCount = troopsInMission.get(tropaUsuario.configuracionTropaId) || 0;\n                    tropaUsuario.cantidad = Math.max(0, tropaUsuario.cantidad - inMissionCount);\n                });\n            });\n        }\n        \n        return user as UserWithProgress | null;\n    } catch (error) {\n        console.error(`Error fetching user ${username} with progress:`, error);\n        return null;\n    }\n});\n\nexport const getPlayerCardData = cache(async (userId: string) => {\n  return prisma.user.findUnique({\n    where: { id: userId },\n    select: { \n        id: true,\n        name: true, \n        title: true, \n        avatarUrl: true, \n        puntuacion: true, \n        lastSeen: true,\n        familyMember: {\n            include: {\n                family: true\n            }\n        }\n    },\n  });\n});\n\nexport const getQueueStatusData = cache(async (propertyId: string) => {\n  return prisma.propiedad.findUnique({\n    where: { id: propertyId },\n    select: {\n      colaConstruccion: { orderBy: { createdAt: 'asc' } },\n      colaReclutamiento: { include: { tropaConfig: true } },\n    },\n  });\n});\n\nexport const getIncomingAttacksData = cache(async (userId: string): Promise<IncomingAttack[]> => {\n    return prisma.incomingAttack.findMany({\n        where: { defenderId: userId },\n        orderBy: { arrivalTime: 'asc' },\n    });\n});\n\nexport const getFamilyCardData = cache(async (userId: string) => {\n    const familyMember = await prisma.familyMember.findUnique({\n        where: { userId },\n        include: {\n            family: {\n                include: {\n                    members: {\n                        include: {\n                            user: {\n                                select: {\n                                    id: true,\n                                    name: true,\n                                    avatarUrl: true,\n                                    puntuacion: true\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n    return familyMember?.family ?? null;\n});\n\nexport const getMissionsData = cache(async (userId: string) => {\n    return prisma.colaMisiones.findMany({\n        where: { userId },\n        orderBy: {\n            fechaLlegada: 'asc',\n        },\n    });\n});\n\nexport const getGlobalStatsData = cache(async (userId: string) => {\n    return prisma.user.findUnique({\n        where: { id: userId },\n        select: {\n            puntuacion: true,\n            entrenamientos: {\n                where: {\n                    configuracionEntrenamientoId: 'honor'\n                },\n                select: {\n                    nivel: true\n                }\n            },\n            _count: {\n                select: {\n                    propiedades: true\n                }\n            }\n        }\n    });\n});\n"
        },
        {
          "name": "formulas",
          "type": "directory",
          "children": [
            {
              "name": "mission-formulas.ts",
              "type": "file",
              "content": "\nimport type { ConfiguracionTropa } from \"@prisma/client\";\nimport { ID_TROPA_ESPIA } from \"../constants\";\n\ninterface Coordenadas {\n    ciudad: number;\n    barrio: number;\n    edificio: number;\n}\n\ninterface CoordenadasVirtuales {\n    altura: number;\n    anchura: number;\n}\n\nexport function convertirACoordenadasVirtuales(coords: Coordenadas): CoordenadasVirtuales {\n    const altura = (coords.barrio - 1) * 15 + Math.ceil(coords.edificio / 17);\n    const anchura = (coords.ciudad - 1) * 17 + (coords.edificio - (Math.floor((coords.edificio - 1) / 17) * 17));\n    return { altura, anchura };\n}\n\nexport function calcularDistancia(coordsOrigen: CoordenadasVirtuales, coordsDestino: CoordenadasVirtuales): number {\n    const diffAltura = coordsDestino.altura - coordsOrigen.altura;\n    const diffAnchura = coordsDestino.anchura - coordsOrigen.anchura;\n    const distancia = Math.sqrt(Math.pow(diffAltura, 2) + Math.pow(diffAnchura, 2));\n    return distancia;\n}\n\nexport function calcularVelocidadFlota(\n    tropasEnviadas: { id: string; cantidad: number }[],\n    configs: Map<string, ConfiguracionTropa>\n): number {\n    let velocidadMasLenta: number | null = null;\n    \n    for (const tropa of tropasEnviadas) {\n        if (tropa.cantidad > 0) {\n            const config = configs.get(tropa.id);\n            if (config) {\n                 const velocidadTropa = Number(config.velocidad);\n                 if (velocidadMasLenta === null || velocidadTropa < velocidadMasLenta) {\n                    velocidadMasLenta = velocidadTropa;\n                }\n            }\n        }\n    }\n    return velocidadMasLenta === null ? 1000 : velocidadMasLenta;\n}\n\n\nexport function calcularDuracionViaje(distancia: number, velocidadFlota: number, tropasEnviadas: string[]): number {\n    if (velocidadFlota <= 0) {\n        return 86400 * 30; // 30 d\u00edas como fallback.\n    }\n\n    const distanciaRedondeada = Math.ceil(distancia);\n    const tiempoEnDias = (0.21989 * Math.pow(velocidadFlota, -0.2)) * Math.pow(distanciaRedondeada, 0.2);\n    const duracionEnSegundos = Math.round(tiempoEnDias * 86400);\n\n    return Math.max(10, duracionEnSegundos);\n}\n\nexport function calcularCosteMision(tropasSeleccionadas: { cantidad: number, salario: number }[], distancia: number): number {\n    const distanciaRedondeada = Math.ceil(distancia);\n    \n    const totalCost = tropasSeleccionadas.reduce((sum, tropa) => {\n        const tropaCost = ((tropa.cantidad * tropa.salario) / 10) * Math.pow(distanciaRedondeada, 0.8);\n        return sum + tropaCost;\n    }, 0);\n\n    return Math.floor(totalCost);\n}\n\n"
            },
            {
              "name": "room-formulas.ts",
              "type": "file",
              "content": "\n\nimport type { FullConfiguracionHabitacion, FullPropiedad, ResourceCost } from '../types';\nimport { BASE_STORAGE_CAPACITY, ID_CAMPO_ENTRENAMIENTO, ID_ESCUELA_ESPECIALIZACION, ID_OFICINA_JEFE, STORAGE_CAPACITY_PER_LEVEL } from '../constants';\n\nexport interface ProductionData {\n  produccionBruta: number;\n  consumoTotal: number;\n  produccionNeta: number;\n}\n\n\n/**\n * Calcula los costos de recursos para construir o mejorar una habitaci\u00f3n a un nivel espec\u00edfico.\n */\nexport function calcularCostosNivel(\n  nivel: number,\n  config: FullConfiguracionHabitacion\n): ResourceCost {\n  if (nivel <= 1) {\n    return { \n        armas: Number(config.costoArmas), \n        municion: Number(config.costoMunicion), \n        dolares: Number(config.costoDolares),\n        alcohol: 0, // Habitaciones no cuestan alcohol\n    };\n  }\n\n  const factor = nivel * nivel;\n\n  const costoArmas = Math.floor(Number(config.costoArmas) * factor);\n  const costoMunicion = Math.floor(Number(config.costoMunicion) * factor);\n  const costoDolares = Math.floor(Number(config.costoDolares) * factor);\n\n  return { armas: costoArmas, municion: costoMunicion, dolares: costoDolares, alcohol: 0 };\n}\n\n/**\n * Calcula el tiempo de construcci\u00f3n para una habitaci\u00f3n a un nivel espec\u00edfico.\n */\nexport function calcularTiempoConstruccion(\n  nivel: number,\n  config: FullConfiguracionHabitacion,\n  nivelOficinaJefe: number\n): number {\n  if (nivel <= 0) {\n    return config.duracion;\n  }\n\n  if (config.id === ID_OFICINA_JEFE) {\n    if (nivel === 1) {\n        return config.duracion;\n    }\n    const tiempoBase = config.duracion;\n    return Math.floor(((nivel * nivel) * tiempoBase) / (nivel - 1));\n  }\n\n  const divisorOficina = Math.max(1, nivelOficinaJefe);\n  \n  const tiempoFinal = ((nivel * nivel) / divisorOficina) * config.duracion;\n\n  return Math.max(5, Math.floor(tiempoFinal));\n}\n\nfunction calcularProduccionArmeria(nivel: number): number {\n  if (nivel <= 0) return 0;\n  return Math.trunc(10 * Math.pow((nivel + 1) / 2, 2));\n}\n\nfunction calcularProduccionMunicion(nivel: number): number {\n  if (nivel <= 0) return 0;\n  return Math.trunc(20 * Math.pow((nivel + 1) / 2, 2) + 20);\n}\n\nfunction calcularProduccionCerveceria(nivel: number): number {\n    if (nivel <= 0) return 0;\n    const signo = Math.sign(nivel);\n    const entero = Math.trunc(nivel / 2);\n    const residuo = nivel % 2;\n    const residuoMasUno = (nivel + 1) % 2;\n  \n    const calculoIntermedio = ((1 + entero) * entero + (entero + 1) * residuo) * 10 + (residuoMasUno * 2);\n    return signo * calculoIntermedio * 5;\n}\n\nfunction calcularProduccionTaberna(nivel: number): number {\n    if (nivel <= 0) return 0;\n    return Math.trunc(2 * Math.pow((nivel + 1) / 2, 2));\n}\n\nfunction calcularProduccionContrabando(nivel: number): number {\n    if (nivel <= 0) return 0;\n    return Math.trunc(21 * Math.pow((nivel + 1) / 2, 2));\n}\n\nexport function calcularProduccionRecurso(idHabitacion: string, nivel: number): number {\n  switch (idHabitacion) {\n    case 'armeria':\n      return calcularProduccionArmeria(nivel);\n    case 'almacen_de_municion':\n      return calcularProduccionMunicion(nivel);\n    case 'cerveceria':\n      return calcularProduccionCerveceria(nivel);\n    case 'taberna':\n      return calcularProduccionTaberna(nivel);\n    case 'contrabando':\n      return calcularProduccionContrabando(nivel);\n    default:\n      return 0;\n  }\n}\n\nexport function calcularConsumoAlcoholTaberna(produccionDolares: number): number {\n    return (produccionDolares * 7) + 3;\n}\n\nexport function calcularConsumoAlcoholContrabando(produccionDolares: number): number {\n    return (produccionDolares * 4) + 1;\n}\n\n/**\n * Calcula la producci\u00f3n total por segundo para todos los recursos de una propiedad.\n * @param propiedad - La propiedad para la cual calcular la producci\u00f3n.\n * @returns Un objeto con la producci\u00f3n por segundo de cada recurso.\n */\nexport function calcularProduccionTotalPorSegundo(propiedad: FullPropiedad): { armas: ProductionData, municion: ProductionData, alcohol: ProductionData, dolares: ProductionData } {\n  let produccionArmasPorHora = 0;\n  let produccionMunicionPorHora = 0;\n  let produccionAlcoholBrutaPorHora = 0;\n  let produccionDolaresPorHora = 0;\n\n  const nivelTaberna = propiedad.habitaciones?.find(h => h.configuracionHabitacionId === 'taberna')?.nivel || 0;\n  const nivelContrabando = propiedad.habitaciones?.find(h => h.configuracionHabitacionId === 'contrabando')?.nivel || 0;\n\n  propiedad.habitaciones?.forEach(habitacion => {\n      const config = habitacion.configuracionHabitacion;\n      if (!config || !config.produccionRecurso || habitacion.nivel === 0) return;\n\n      const produccionPorHora = calcularProduccionRecurso(config.id, habitacion.nivel);\n      \n      switch (config.produccionRecurso) {\n          case 'armas':\n              produccionArmasPorHora += produccionPorHora;\n              break;\n          case 'municion':\n              produccionMunicionPorHora += produccionPorHora;\n              break;\n          case 'alcohol':\n              produccionAlcoholBrutaPorHora += produccionPorHora;\n              break;\n      }\n  });\n\n  let produccionDolaresTabernaPorHora = calcularProduccionRecurso('taberna', nivelTaberna);\n  let consumoAlcoholTaberna = calcularConsumoAlcoholTaberna(produccionDolaresTabernaPorHora);\n  \n  let produccionDolaresContrabandoPorHora = calcularProduccionRecurso('contrabando', nivelContrabando);\n  let consumoAlcoholContrabando = calcularConsumoAlcoholContrabando(produccionDolaresContrabandoPorHora);\n  \n  let consumoTotalAlcohol = consumoAlcoholTaberna + consumoAlcoholContrabando;\n  let produccionNetaAlcoholPorHora = produccionAlcoholBrutaPorHora - consumoTotalAlcohol;\n\n\n  if (produccionNetaAlcoholPorHora < 0) {\n      let alcoholDisponible = produccionAlcoholBrutaPorHora;\n\n      if (alcoholDisponible >= consumoAlcoholTaberna) {\n          alcoholDisponible -= consumoAlcoholTaberna;\n          if(alcoholDisponible < consumoAlcoholContrabando){\n            produccionDolaresContrabandoPorHora = Math.max(0, (alcoholDisponible - 1) / 4);\n          }\n      } else {\n          produccionDolaresTabernaPorHora = Math.max(0, (alcoholDisponible - 3) / 7);\n          produccionDolaresContrabandoPorHora = 0; \n      }\n  }\n\n  produccionDolaresPorHora = produccionDolaresTabernaPorHora + produccionDolaresContrabandoPorHora;\n\n  return {\n    armas: { produccionBruta: produccionArmasPorHora, consumoTotal: 0, produccionNeta: produccionArmasPorHora },\n    municion: { produccionBruta: produccionMunicionPorHora, consumoTotal: 0, produccionNeta: produccionMunicionPorHora },\n    alcohol: { produccionBruta: produccionAlcoholBrutaPorHora, consumoTotal: consumoTotalAlcohol, produccionNeta: produccionNetaAlcoholPorHora },\n    dolares: { produccionBruta: produccionDolaresPorHora, consumoTotal: 0, produccionNeta: produccionDolaresPorHora },\n  };\n}\n\n\n/**\n * Calcula la capacidad de almacenamiento de recursos de una propiedad.\n * @param propiedad - La propiedad con sus habitaciones.\n * @returns Un objeto con la capacidad m\u00e1xima de cada recurso.\n */\nexport function calculateStorageCapacity(propiedad: FullPropiedad): { armas: number, municion: number, alcohol: number, dolares: number } {\n    if (!propiedad || !propiedad.habitaciones) {\n        return { armas: BASE_STORAGE_CAPACITY, municion: BASE_STORAGE_CAPACITY, alcohol: BASE_STORAGE_CAPACITY, dolares: BASE_STORAGE_CAPACITY };\n    }\n    let capacidadArmas = BASE_STORAGE_CAPACITY;\n    let capacidadMunicion = BASE_STORAGE_CAPACITY;\n    let capacidadAlcohol = BASE_STORAGE_CAPACITY;\n    let capacidadDolares = BASE_STORAGE_CAPACITY;\n\n    const almacenArmas = propiedad.habitaciones.find(h => h.configuracionHabitacionId === 'almacen_de_armas');\n    if (almacenArmas) {\n        capacidadArmas += almacenArmas.nivel * STORAGE_CAPACITY_PER_LEVEL;\n    }\n\n    const depositoMunicion = propiedad.habitaciones.find(h => h.configuracionHabitacionId === 'deposito_de_municion');\n    if (depositoMunicion) {\n        capacidadMunicion += depositoMunicion.nivel * STORAGE_CAPACITY_PER_LEVEL;\n    }\n\n    const almacenAlcohol = propiedad.habitaciones.find(h => h.configuracionHabitacionId === 'almacen_de_alcohol');\n    if (almacenAlcohol) {\n        capacidadAlcohol += almacenAlcohol.nivel * STORAGE_CAPACITY_PER_LEVEL;\n    }\n\n    const cajaFuerte = propiedad.habitaciones.find(h => h.configuracionHabitacionId === 'caja_fuerte');\n    if (cajaFuerte) {\n        capacidadDolares += cajaFuerte.nivel * STORAGE_CAPACITY_PER_LEVEL;\n    }\n\n    return {\n        armas: capacidadArmas,\n        municion: capacidadMunicion,\n        alcohol: capacidadAlcohol,\n        dolares: capacidadDolares,\n    };\n}\n\nexport function calculateSafeStorage(propiedad: FullPropiedad): { armas: number, municion: number, alcohol: number, dolares: number } {\n     if (!propiedad || !propiedad.habitaciones) {\n        return { armas: 0, municion: 0, alcohol: 0, dolares: 0 };\n    }\n    const capacity = calculateStorageCapacity(propiedad);\n\n    return {\n        armas: Math.floor(capacity.armas * 0.1),\n        municion: Math.floor(capacity.municion * 0.1),\n        alcohol: Math.floor(capacity.alcohol * 0.1),\n        dolares: Math.floor(capacity.dolares * 0.1),\n    };\n}\n"
            },
            {
              "name": "score-formulas.ts",
              "type": "file",
              "content": "\nimport type { FullPropiedad, UserWithProgress } from \"../types\";\nimport { EntrenamientoUsuario, ConfiguracionEntrenamiento } from \"@prisma/client\";\n\nexport function calcularPuntosHabitaciones(propiedades: FullPropiedad[]): number {\n  if (!propiedades || propiedades.length === 0) return 0;\n\n  return propiedades.reduce((totalPuntos, propiedad) => {\n    const puntosPropiedad = propiedad.habitaciones.reduce((subtotal, habitacion) => {\n      return subtotal + (habitacion.configuracionHabitacion.puntos * habitacion.nivel);\n    }, 0);\n    return totalPuntos + puntosPropiedad;\n  }, 0);\n}\n\nexport function calcularPuntosPropiedad(propiedad: FullPropiedad): number {\n    if (!propiedad) return 0;\n    \n    const puntosHabitaciones = propiedad.habitaciones.reduce((totalHabitaciones, habitacion) => {\n        const puntos = habitacion.configuracionHabitacion.puntos * habitacion.nivel;\n        return totalHabitaciones + puntos;\n    }, 0);\n\n    const puntosTropas = propiedad.TropaUsuario.reduce((totalTropas, tropa) => {\n        const puntos = tropa.configuracionTropa.puntos * tropa.cantidad;\n        return totalTropas + puntos;\n    }, 0);\n    \n    const puntosSeguridad = propiedad.TropaSeguridadUsuario.reduce((totalSeguridad, tropa) => {\n        const puntos = tropa.configuracionTropa.puntos * tropa.cantidad;\n        return totalSeguridad + puntos;\n    }, 0);\n\n    return puntosHabitaciones + puntosTropas + puntosSeguridad;\n}\n\nexport function calcularPuntosTropas(propiedades: FullPropiedad[]): number {\n  if (!propiedades) return 0;\n  \n  return propiedades.reduce((totalPropiedades, propiedad) => {\n    const puntosTropas = propiedad.TropaUsuario.reduce((totalTropas, tropa) => {\n      const puntos = tropa.configuracionTropa.puntos * tropa.cantidad;\n      return totalTropas + puntos;\n    }, 0);\n    const puntosSeguridad = propiedad.TropaSeguridadUsuario.reduce((totalSeguridad, tropa) => {\n        const puntos = tropa.configuracionTropa.puntos * tropa.cantidad;\n        return totalSeguridad + puntos;\n    }, 0);\n    return totalPropiedades + puntosTropas + puntosSeguridad;\n  }, 0);\n}\n\nexport function calcularPuntosEntrenamientos(entrenamientos: (EntrenamientoUsuario & { configuracionEntrenamiento: ConfiguracionEntrenamiento })[]): number {\n  if (!entrenamientos) return 0;\n\n  return entrenamientos.reduce((total, entrenamiento) => {\n    const puntos = entrenamiento.configuracionEntrenamiento.puntos * entrenamiento.nivel;\n    return total + puntos;\n  }, 0);\n}\n\nexport async function calcularPoderAtaque(totalPropiedades: number, honor: number): Promise<number> {\n    if (totalPropiedades < 1) totalPropiedades = 1;\n    if (honor < 0) honor = 0;\n\n    // poderataque = 1 / (1 + (pow((Cantidad_de_Propiedades_del_user - 1), (4.5 - (NiveldeHonor / 10)))) / 10000000)\n    const poder = 1 / (1 + (Math.pow((totalPropiedades - 1), (4.5 - (honor / 10)))) / 10000000);\n    \n    // The formula seems to return a value very close to 1. \n    // The original logic used a percentage, so let's convert it.\n    // Assuming the formula result is a factor, we multiply by 100 to get a percentage-like value.\n    // If it's meant to be a direct multiplier, this might need adjustment.\n    // Based on the original code returning values like 100 or 29, returning a percentage seems correct.\n    return poder * 100;\n}\n"
            },
            {
              "name": "training-formulas.ts",
              "type": "file",
              "content": "\nimport type { ConfiguracionEntrenamiento } from '@prisma/client';\n\nexport function calcularCostosEntrenamiento(\n  nivel: number,\n  config: ConfiguracionEntrenamiento\n): { armas: number; municion: number; dolares: number } {\n  if (nivel <= 1) {\n    return { armas: Number(config.costoArmas), municion: Number(config.costoMunicion), dolares: Number(config.costoDolares) };\n  }\n\n  const factor = Math.pow(nivel, 2);\n\n  const costoArmas = Math.floor(Number(config.costoArmas) * factor);\n  const costoMunicion = Math.floor(Number(config.costoMunicion) * factor);\n  const costoDolares = Math.floor(Number(config.costoDolares) * factor);\n\n  return { armas: costoArmas, municion: costoMunicion, dolares: costoDolares };\n}\n\nexport function calcularTiempoEntrenamiento(\n  nivel: number,\n  config: ConfiguracionEntrenamiento,\n  nivelEscuela: number\n): number {\n  if (nivel <= 0) {\n    return config.duracion;\n  }\n  \n  // La f\u00f3rmula es (duracion_base * (nivel_objetivo)^2) / nivel_escuela\n  // Aseguramos que nivelEscuela sea al menos 1 para evitar divisi\u00f3n por cero.\n  const divisorNivelEscuela = Math.max(1, nivelEscuela);\n\n  const tiempoFinal = (config.duracion * Math.pow(nivel, 2)) / divisorNivelEscuela;\n  \n  return Math.max(5, Math.floor(tiempoFinal)); // Asegura un tiempo m\u00ednimo de 5 segundos.\n}\n"
            },
            {
              "name": "troop-formulas.ts",
              "type": "file",
              "content": "\n\n\nimport type { ConfiguracionTropa } from '@prisma/client';\nimport { TROOP_TYPE_DEFENSE } from '../constants';\nimport type { UserWithProgress } from '../types';\n\n/**\n * Calcula el tiempo total de reclutamiento para una cantidad de tropas.\n * La nueva f\u00f3rmula es: (duracion / nivel_campo) * cantidad\n * @param config - La configuraci\u00f3n de la tropa.\n * @param cantidad - El n\u00famero de tropas a reclutar.\n * @param nivelCampoEntrenamiento - El nivel actual del Campo de Entrenamiento de la propiedad.\n * @returns El tiempo de reclutamiento total en segundos.\n */\nexport function calcularTiempoReclutamiento(\n  config: ConfiguracionTropa,\n  cantidad: number,\n  nivelCampoEntrenamiento: number\n): number {\n  if (cantidad <= 0) {\n    return 0;\n  }\n\n  // Aseguramos que el nivel del campo no sea menor que 1 para evitar divisi\u00f3n por cero.\n  const divisorNivelCampo = Math.max(1, nivelCampoEntrenamiento);\n\n  const tiempoPorUnidad = config.duracion / divisorNivelCampo;\n  const tiempoTotal = tiempoPorUnidad * cantidad;\n\n  return Math.max(1, Math.floor(tiempoTotal)); // Aseguramos un tiempo m\u00ednimo de reclutamiento.\n}\n\n\nexport function calcularStatsTropaConBonus(\n    tropaConfig: ConfiguracionTropa, \n    entrenamientos: UserWithProgress['entrenamientos']\n  ): { ataqueActual: number, defensaActual: number, capacidadActual: number, velocidadActual: number, salarioActual: number } {\n  \n    const entrenamientosMap = new Map(entrenamientos.map(e => [e.configuracionEntrenamientoId, e.nivel]));\n  \n    let ataqueActual = tropaConfig.ataque;\n    let defensaActual = tropaConfig.defensa;\n    let capacidadActual = tropaConfig.capacidad;\n    let velocidadActualNum = Number(tropaConfig.velocidad);\n    let salarioActual = tropaConfig.salario;\n  \n    const bonusAtaqueIds = tropaConfig.bonusAtaque || [];\n    const bonusDefensaIds = tropaConfig.bonusDefensa || [];\n\n    // 1. C\u00e1culo de Valor de Combate (Ataque y Defensa) - Multiplicativo\n    let factorAtaqueTotal = 1;\n    bonusAtaqueIds.forEach(id => {\n      const nivel = entrenamientosMap.get(id) || 0;\n      if (nivel > 0) {\n        factorAtaqueTotal *= (1 + Math.sqrt(nivel) / 10);\n      }\n    });\n    ataqueActual *= factorAtaqueTotal;\n\n    let factorDefensaTotal = 1;\n    bonusDefensaIds.forEach(id => {\n        const nivel = entrenamientosMap.get(id) || 0;\n        if (nivel > 0) {\n            factorDefensaTotal *= (1 + Math.sqrt(nivel) / 10);\n        }\n    });\n    defensaActual *= factorDefensaTotal;\n\n    // 2. Bonificaci\u00f3n de Capacidad por Contrabando\n    if (tropaConfig.tipo !== TROOP_TYPE_DEFENSE && tropaConfig.capacidad > 0) {\n      const nivelContrabando = entrenamientosMap.get('contrabando') || 0;\n      if (nivelContrabando > 0) {\n        capacidadActual *= (1 + Math.sqrt(nivelContrabando) / 10);\n      }\n    }\n\n    // 3. Bonificaciones de Velocidad\n    const tropasRutas = ['maton', 'portero', 'acuchillador', 'pistolero', 'ocupacion', 'porteador'];\n    const tropasEncargos = ['espia', 'cia', 'fbi', 'transportista', 'tactico', 'francotirador', 'asesino', 'ninja', 'mercenario', 'demoliciones'];\n    \n    if (tropasRutas.includes(tropaConfig.id)) {\n        const nivelRutas = entrenamientosMap.get('rutas') || 0;\n        if (nivelRutas > 0) {\n            velocidadActualNum *= (1 + Math.sqrt(nivelRutas) / 10);\n        }\n    } else if (tropasEncargos.includes(tropaConfig.id)) {\n        const nivelEncargos = entrenamientosMap.get('encargos') || 0;\n        if (nivelEncargos > 0) {\n            velocidadActualNum *= (1 + Math.sqrt(nivelEncargos) / 10);\n        }\n    }\n    \n    // 4. Reducci\u00f3n de Salario por Contrabando\n    const nivelContrabandoSalario = entrenamientosMap.get('contrabando') || 0;\n    if (nivelContrabandoSalario > 0) {\n        salarioActual /= (1 + (Math.sqrt(nivelContrabandoSalario) / 10));\n    }\n  \n    return {\n      ataqueActual: Math.floor(ataqueActual),\n      defensaActual: Math.floor(defensaActual),\n      capacidadActual: Math.floor(capacidadActual),\n      velocidadActual: Math.floor(velocidadActualNum),\n      salarioActual: Math.floor(salarioActual),\n    };\n  }\n"
            }
          ]
        },
        {
          "name": "prisma",
          "type": "directory",
          "children": [
            {
              "name": "prisma.ts",
              "type": "file",
              "content": "import { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient().$extends(withAccelerate())\n}\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>\n} & typeof global\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma"
            }
          ]
        },
        {
          "name": "types",
          "type": "directory",
          "children": [
            {
              "name": "index.ts",
              "type": "file",
              "content": "\n\nimport type { User, HabitacionUsuario, EntrenamientoUsuario, TropaUsuario, TropaSeguridadUsuario, ConfiguracionHabitacion, ConfiguracionEntrenamiento, ColaConstruccion, ColaReclutamiento, ConfiguracionTropa as PrismaConfiguracionTropa, Propiedad, PuntuacionUsuario, ColaMisiones as PrismaColaMisiones, Family, FamilyMember, TrainingRequirement, RoomRequirement, TropaBonusContrincante, Message, BattleReport as PrismaBattleReport, Prisma, ColaEntrenamiento, FamilyInvitation, IncomingAttack as PrismaIncomingAttack, FamilyAnnouncement, EspionageReport as PrismaEspionageReport } from '@prisma/client/edge'\nimport { BattleReport, EspionageReportDetails as EspionageDetailsType, ResourceCost } from './simulation.types';\n\nexport type PageProps<T extends Record<string, string> = {}> = {\n    params: T;\n    searchParams?: { [key: string]: string | string[] | undefined };\n};\n\nexport type IncomingAttack = PrismaIncomingAttack;\nexport type ColaMisiones = PrismaColaMisiones & { recursos?: ResourceCost | null };\nexport type ConfiguracionTropa = PrismaConfiguracionTropa & { requisitos: string[] };\nexport type { ColaConstruccion };\nexport type { ResourceCost };\nexport type EspionageReportDetails = EspionageDetailsType;\n\n\nexport type PropertyWithOwner = Propiedad & { \n    user: (User & { \n        familyMember: (FamilyMember & { family: Family }) | null; \n        puntuacion: { puntosTotales: number } | null \n    }) | null \n};\n\nexport type FullConfiguracionHabitacion = ConfiguracionHabitacion & {\n    requisitos: RoomRequirement[];\n  };\n  \n  export type FullConfiguracionEntrenamiento = ConfiguracionEntrenamiento & {\n      requisitos: TrainingRequirement[];\n  }\n  \n  export type FullConfiguracionTropa = PrismaConfiguracionTropa & {\n      bonusContrincante: TropaBonusContrincante[];\n      requisitos: string[];\n  }\n  \n  export type FullHabitacionUsuario = HabitacionUsuario & { \n    configuracionHabitacion: FullConfiguracionHabitacion \n  };\n  \n  export type FullColaReclutamiento = ColaReclutamiento & {\n    tropaConfig: ConfiguracionTropa;\n  };\n  \n  export type FullColaEntrenamiento = ColaEntrenamiento & {\n      entrenamiento: ConfiguracionEntrenamiento;\n      propiedad: { nombre: string };\n  }\n  \n  export type FullTropaUsuario = TropaUsuario & {\n      configuracionTropa: ConfiguracionTropa;\n  }\n  \n  export type FullTropaSeguridadUsuario = TropaSeguridadUsuario & {\n      configuracionTropa: ConfiguracionTropa;\n  }\n  \n  export type FullPropiedad = Propiedad & {\n      habitaciones: FullHabitacionUsuario[];\n      colaConstruccion: ColaConstruccion[];\n      colaReclutamiento: FullColaReclutamiento | null;\n      TropaUsuario: FullTropaUsuario[];\n      TropaSeguridadUsuario: FullTropaSeguridadUsuario[];\n  }\n  \n  export type FullFamilyMember = FamilyMember & { \n      user: UserWithProgress;\n  };\n  \n  export type FullFamilyAnnouncement = FamilyAnnouncement & {\n      author: {\n          id: string;\n          name: string;\n          avatarUrl: string | null;\n      }\n  }\n\n  export type FullFamily = Family & {\n      members: FullFamilyMember[];\n      announcements: FullFamilyAnnouncement[];\n  }\n  \n  export type FullMessage = Message & {\n      sender: { name: string; id: string, avatarUrl: string | null } | null;\n      battleReportId: string | null;\n      espionageReportId: string | null;\n  }\n  \n  export type FullBattleReport = PrismaBattleReport & {\n      attacker: { id: string, name: string, avatarUrl: string | null };\n      defender: { id: string, name: string, avatarUrl: string | null };\n      details: BattleReport;\n  }\n  \n  export type FullEspionageReport = PrismaEspionageReport & {\n    attacker: { id: string, name: string, avatarUrl: string | null };\n    defender: { id: string, name: string, avatarUrl: string | null };\n    details: EspionageReportDetails;\n  }\n  \n  export type UserWithProgress = User & {\n      propiedades: FullPropiedad[];\n      entrenamientos: (EntrenamientoUsuario & { configuracionEntrenamiento: ConfiguracionEntrenamiento })[];\n      puntuacion: PuntuacionUsuario | null;\n      misiones: ColaMisiones[];\n      incomingAttacks: IncomingAttack[];\n      colaEntrenamientos: FullColaEntrenamiento[];\n      familyMember: (FamilyMember & { family: FullFamily }) | null;\n      _count?: {\n          receivedMessages?: number;\n      }\n  };\n  \n  export type UserProfileData = User & {\n    puntuacion: PuntuacionUsuario | null;\n    propiedades: (Propiedad & { \n        habitaciones: (HabitacionUsuario & { configuracionHabitacion: ConfiguracionHabitacion })[],\n        TropaUsuario: (TropaUsuario & { configuracionTropa: ConfiguracionTropa })[],\n        TropaSeguridadUsuario: (TropaSeguridadUsuario & { configuracionTropa: ConfiguracionTropa })[]\n    })[];\n    familyMember: (FamilyMember & { family: Family }) | null;\n}\n  \n  export type UserForRanking = User & {\n      puntuacion: PuntuacionUsuario | null;\n      _count: {\n          propiedades: number;\n      }\n  }\n\nexport type FullFamilyInvitation = FamilyInvitation & {\n    user: {\n        id: string;\n        name: string;\n        avatarUrl: string | null;\n        puntuacion: PuntuacionUsuario | null;\n    };\n    family: {\n        id: string;\n        name: string;\n        tag: string;\n        avatarUrl: string | null;\n    }\n}\n\nexport interface MissionInput {\n    origenPropiedadId: string;\n    coordinates: {\n        ciudad: number;\n        barrio: number;\n        edificio: number;\n    },\n    tropas: { id: string, cantidad: number }[];\n    tipo: string;\n}\n"
            },
            {
              "name": "simulation.types.ts",
              "type": "file",
              "content": "\n\n\nimport type { ConfiguracionTropa, TropaBonusContrincante } from '@prisma/client';\n\n// --- INPUT TYPES ---\nexport interface TroopData {\n    id: string;\n    quantity: number;\n}\n\nexport interface TrainingData {\n    id: string;\n    level: number;\n}\n\nexport interface DefenseData {\n    id: string;\n    level: number;\n}\n\nexport interface SimulationInput {\n    troops: TroopData[];\n    trainings: TrainingData[];\n    defenses: DefenseData[];\n    buildingsLevel: number;\n    propertyCount: number;\n}\n\n// --- BATTLE LOGIC INTERNAL TYPES ---\nexport interface ArmyUnit {\n    id: string;\n    nombre: string;\n    config: ConfiguracionTropa & { bonusContrincante: TropaBonusContrincante[] };\n    quantity: number;\n    attack: number;\n    defense: number;\n    capacidad: number;\n}\n\n// --- OUTPUT REPORT TYPES ---\nexport interface RoundParticipantReport {\n    troops: {\n        id: string;\n        nombre: string;\n        initialQuantity: number;\n        lostQuantity: number;\n    }[];\n    totalAttack: number;\n    totalAttackConBonus: number;\n    poderAtaquePercent: number;\n    totalDefense: number;\n}\n\nexport interface BattleRound {\n    round: number;\n    attacker: RoundParticipantReport;\n    defender: RoundParticipantReport;\n}\n\nexport interface ResourceCost {\n    armas: number;\n    municion: number;\n    dolares: number;\n    alcohol: number;\n}\n\nexport interface CombatStats {\n    attacker: {\n        troopsLost: number;\n        pointsLost: number;\n        resourcesLost: ResourceCost;\n        lootedResources?: ResourceCost;\n    };\n    defender: {\n        troopsLost: number;\n        pointsLost: number;\n        resourcesLost: ResourceCost;\n    };\n}\nexport interface BattleReport {\n    winner: 'attacker' | 'defender' | 'draw';\n    rounds: BattleRound[];\n    finalMessage: string;\n    finalStats: CombatStats;\n}\n\nexport interface EspionageReportDetails {\n    combat: BattleReport;\n    intel: {\n        resources: {\n            armas: number;\n            municion: number;\n            alcohol: number;\n            dolares: number;\n        };\n        buildings: {\n            id: string;\n            name: string;\n            level: number;\n        }[];\n    } | null;\n}\n"
            }
          ]
        },
        {
          "name": "types.ts",
          "type": "file",
          "content": "\nimport type { User, HabitacionUsuario, EntrenamientoUsuario, TropaUsuario, TropaSeguridadUsuario, ConfiguracionHabitacion, ConfiguracionEntrenamiento, ColaConstruccion, ColaReclutamiento, ConfiguracionTropa as PrismaConfiguracionTropa, Propiedad, PuntuacionUsuario, ColaMisiones as PrismaColaMisiones, Family, FamilyMember, TrainingRequirement, RoomRequirement, TropaBonusContrincante, Message, BattleReport as PrismaBattleReport, Prisma, ColaEntrenamiento, FamilyInvitation, IncomingAttack as PrismaIncomingAttack, FamilyAnnouncement, EspionageReport as PrismaEspionageReport } from '@prisma/client/edge'\nimport { BattleReport, EspionageReportDetails, ResourceCost } from './types/simulation.types';\n\nexport type PageProps<T extends Record<string, string> = {}> = {\n    params: T;\n    searchParams?: { [key: string]: string | string[] | undefined };\n};\n\nexport type IncomingAttack = PrismaIncomingAttack;\nexport type ColaMisiones = PrismaColaMisiones & { recursos?: ResourceCost | null };\nexport type ConfiguracionTropa = PrismaConfiguracionTropa & { requisitos: string[] };\nexport type { ColaConstruccion };\nexport type { ResourceCost };\n\n\nexport type PropertyWithOwner = Propiedad & {\n    user: (User & {\n        familyMember: (FamilyMember & { family: Family }) | null;\n        puntuacion: { puntosTotales: number } | null\n    }) | null\n};\n\nexport type FullConfiguracionHabitacion = ConfiguracionHabitacion & {\n    requisitos: RoomRequirement[];\n  };\n\n  export type FullConfiguracionEntrenamiento = ConfiguracionEntrenamiento & {\n      requisitos: TrainingRequirement[];\n  }\n\n  export type FullConfiguracionTropa = PrismaConfiguracionTropa & {\n      bonusContrincante: TropaBonusContrincante[];\n      requisitos: string[];\n  }\n\n  export type FullHabitacionUsuario = HabitacionUsuario & {\n    configuracionHabitacion: FullConfiguracionHabitacion\n  };\n\n  export type FullColaReclutamiento = ColaReclutamiento & {\n    tropaConfig: ConfiguracionTropa;\n  };\n\n  export type FullColaEntrenamiento = ColaEntrenamiento & {\n      entrenamiento: ConfiguracionEntrenamiento;\n      propiedad: { nombre: string };\n  }\n\n  export type FullTropaUsuario = TropaUsuario & {\n      configuracionTropa: ConfiguracionTropa;\n  }\n\n  export type FullTropaSeguridadUsuario = TropaSeguridadUsuario & {\n      configuracionTropa: ConfiguracionTropa;\n  }\n\n  export type FullPropiedad = Propiedad & {\n      habitaciones: FullHabitacionUsuario[];\n      colaConstruccion: ColaConstruccion[];\n      colaReclutamiento: FullColaReclutamiento | null;\n      TropaUsuario: FullTropaUsuario[];\n      TropaSeguridadUsuario: FullTropaSeguridadUsuario[];\n  }\n\n  export type FullFamilyMember = FamilyMember & {\n      user: UserWithProgress;\n  };\n\n  export type FullFamilyAnnouncement = FamilyAnnouncement & {\n      author: {\n          id: string;\n          name: string;\n          avatarUrl: string | null;\n      }\n  }\n\n  export type FullFamily = Family & {\n      members: FullFamilyMember[];\n      announcements: FullFamilyAnnouncement[];\n  }\n\n  export type FullMessage = Message & {\n      sender: { name: string; id: string, avatarUrl: string | null } | null;\n      battleReportId: string | null;\n      espionageReportId: string | null;\n  }\n\n  export type FullBattleReport = PrismaBattleReport & {\n      attacker: { id: string, name: string, avatarUrl: string | null };\n      defender: { id: string, name: string, avatarUrl: string | null };\n      details: BattleReport;\n  }\n\n  export type FullEspionageReport = PrismaEspionageReport & {\n    attacker: { id: string, name: string, avatarUrl: string | null };\n    defender: { id: string, name: string, avatarUrl: string | null };\n    details: EspionageReportDetails;\n  }\n\n  export type UserWithProgress = User & {\n      propiedades: FullPropiedad[];\n      entrenamientos: (EntrenamientoUsuario & { configuracionEntrenamiento: ConfiguracionEntrenamiento })[];\n      puntuacion: PuntuacionUsuario | null;\n      misiones: ColaMisiones[];\n      incomingAttacks: IncomingAttack[];\n      colaEntrenamientos: FullColaEntrenamiento[];\n      familyMember: (FamilyMember & { family: FullFamily }) | null;\n      _count?: {\n          receivedMessages?: number;\n      }\n  };\n\n  export type UserProfileData = User & {\n    puntuacion: PuntuacionUsuario | null;\n    propiedades: (Propiedad & {\n        habitaciones: (HabitacionUsuario & { configuracionHabitacion: ConfiguracionHabitacion })[],\n        TropaUsuario: (TropaUsuario & { configuracionTropa: ConfiguracionTropa })[],\n        TropaSeguridadUsuario: (TropaSeguridadUsuario & { configuracionTropa: ConfiguracionTropa })[]\n    })[];\n    familyMember: (FamilyMember & { family: Family }) | null;\n}\n\n  export type UserForRanking = User & {\n      puntuacion: PuntuacionUsuario | null;\n      _count: {\n          propiedades: number;\n      }\n  }\n\nexport type FullFamilyInvitation = FamilyInvitation & {\n    user: {\n        id: string;\n        name: string;\n        avatarUrl: string | null;\n        puntuacion: PuntuacionUsuario | null;\n    };\n    family: {\n        id: string;\n        name: string;\n        tag: string;\n        avatarUrl: string | null;\n    }\n}\n\nexport interface MissionInput {\n    origenPropiedadId: string;\n    coordinates: {\n        ciudad: number;\n        barrio: number;\n        edificio: number;\n    },\n    tropas: { id: string, cantidad: number }[];\n    tipo: string;\n}\n"
        },
        {
          "name": "utils.ts",
          "type": "file",
          "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n\nexport function formatNumber(num: number): string {\n    const numberValue = Math.floor(num);\n    if (numberValue < 1000) {\n      return numberValue.toLocaleString('de-DE');\n    }\n    const suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n    const i = Math.floor(Math.log10(numberValue) / 3);\n    const shortValue = (numberValue / Math.pow(1000, i));\n    return shortValue.toFixed(i > 0 ? 2 : 0) + suffixes[i];\n  }\n  \n\n\nexport function formatDuration(seconds: number): string {\n    if (seconds <= 0) return \"0s\";\n\n    const units: {name: string, seconds: number}[] = [\n        { name: 'a\u00f1o', seconds: 31536000 },\n        { name: 'sem', seconds: 604800 },\n        { name: 'd', seconds: 86400 },\n        { name: 'h', seconds: 3600 },\n        { name: 'm', seconds: 60 },\n        { name: 's', seconds: 1 }\n    ];\n\n    let remainingSeconds = seconds;\n    let result = '';\n    let parts = 0;\n\n    for (const unit of units) {\n        if (remainingSeconds >= unit.seconds && parts < 2) { // show 2 largest units\n            const amount = Math.floor(remainingSeconds / unit.seconds);\n            if (amount > 0) {\n                result += `${amount}${unit.name} `;\n                remainingSeconds %= unit.seconds;\n                parts++;\n            }\n        }\n    }\n\n    return result.trim() || '0s';\n}\n\n"
        }
      ]
    }
  ]
}