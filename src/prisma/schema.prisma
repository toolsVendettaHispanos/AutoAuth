// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id                       String                 @id @default(cuid())
  username                 String                 @unique
  password                 String
  name                     String
  title                    String?
  avatarUrl                String?
  lastSeen                 DateTime               @default(now())
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  propiedades              Propiedad[]
  entrenamientos           EntrenamientoUsuario[]
  puntuacion               PuntuacionUsuario?
  misiones                 ColaMisiones[]
  incomingAttacks          IncomingAttack[]       @relation("DefenderRelations")
  sentAttacks              IncomingAttack[]       @relation("AttackerRelations")
  sentMessages             Message[]              @relation("SentMessages")
  receivedMessages         Message[]              @relation("ReceivedMessages")
  familyMember             FamilyMember?
  familyInvitations        FamilyInvitation[]
  loginHistory             LoginHistory[]
  authoredAnnoucements     FamilyAnnouncement[]
  sentBattleReports        BattleReport[]         @relation("AttackerReports")
  receivedBattleReports    BattleReport[]         @relation("DefenderReports")
  sentEspionageReports     EspionageReport[]      @relation("AttackerEspionageReports")
  receivedEspionageReports EspionageReport[]      @relation("DefenderEspionageReports")
  colaEntrenamientos       ColaEntrenamiento[]
}

model SuperUser {
  id       String @id @default(cuid())
  username String @unique
  password String
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
}

model Propiedad {
  id                    String                  @id @default(cuid())
  userId                String
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  nombre                String
  ciudad                Int
  barrio                Int
  edificio              Int
  armas                 BigInt                  @default(10000)
  municion              BigInt                  @default(10000)
  alcohol               BigInt                  @default(10000)
  dolares               BigInt                  @default(10000)
  ultimaActualizacion   DateTime                @default(now())
  habitaciones          HabitacionUsuario[]
  colaConstruccion      ColaConstruccion[]
  colaReclutamiento     ColaReclutamiento?
  misionesOrigen        ColaMisiones[]
  colaEntrenamientos    ColaEntrenamiento[]
  TropaUsuario          TropaUsuario[]
  TropaSeguridadUsuario TropaSeguridadUsuario[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@unique([ciudad, barrio, edificio])
}

model HabitacionUsuario {
  propiedadId               String
  configuracionHabitacionId String
  nivel                     Int
  propiedad                 Propiedad               @relation(fields: [propiedadId], references: [id], onDelete: Cascade)
  configuracionHabitacion   ConfiguracionHabitacion @relation(fields: [configuracionHabitacionId], references: [id])

  @@id([propiedadId, configuracionHabitacionId])
}

model EntrenamientoUsuario {
  userId                       String
  configuracionEntrenamientoId String
  nivel                        Int
  user                         User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  configuracionEntrenamiento   ConfiguracionEntrenamiento @relation(fields: [configuracionEntrenamientoId], references: [id])

  @@id([userId, configuracionEntrenamientoId])
}

model PuntuacionUsuario {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  puntosHabitaciones   Float
  puntosTropas         Float
  puntosEntrenamientos Float
  puntosTotales        Float
  puntosHonorAtacante  Float    @default(0)
  puntosHonorDefensor  Float    @default(0)
  puntosHonorTotales   Float    @default(0)
  updatedAt            DateTime @updatedAt
}

model ConfiguracionHabitacion {
  id                String              @id
  nombre            String
  descripcion       String
  urlImagen         String
  costoArmas        BigInt
  costoMunicion     BigInt
  costoDolares      BigInt
  duracion          Int
  produccionBase    Float
  produccionRecurso String?
  puntos            Float
  HabitacionUsuario HabitacionUsuario[]
  requisitos        RoomRequirement[]   @relation("RequiredFor")
  requeridoPara     RoomRequirement[]   @relation("BaseFor")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model RoomRequirement {
  roomId         String
  requiredRoomId String
  requiredLevel  Int
  room           ConfiguracionHabitacion @relation("RequiredFor", fields: [roomId], references: [id], onDelete: Cascade)
  requiredRoom   ConfiguracionHabitacion @relation("BaseFor", fields: [requiredRoomId], references: [id], onDelete: Cascade)

  @@id([roomId, requiredRoomId])
}

model ConfiguracionEntrenamiento {
  id                    String                 @id
  nombre                String
  urlImagen             String
  costoArmas            BigInt
  costoMunicion         BigInt
  costoDolares          BigInt
  duracion              Int
  puntos                Float
  entrenamientosUsuario EntrenamientoUsuario[]
  colaEntrenamientos    ColaEntrenamiento[]
  requisitos            TrainingRequirement[]  @relation("RequiredFor")
  requeridoPara         TrainingRequirement[]  @relation("BaseFor")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model TrainingRequirement {
  trainingId         String
  requiredTrainingId String
  requiredLevel      Int
  training           ConfiguracionEntrenamiento @relation("RequiredFor", fields: [trainingId], references: [id], onDelete: Cascade)
  requiredTraining   ConfiguracionEntrenamiento @relation("BaseFor", fields: [requiredTrainingId], references: [id], onDelete: Cascade)

  @@id([trainingId, requiredTrainingId])
}

model ConfiguracionTropa {
  id                    String                   @id
  nombre                String
  urlImagen             String
  descripcion           String
  costoArmas            BigInt
  costoMunicion         BigInt
  costoDolares          BigInt
  duracion              Int
  puntos                Float
  ataque                Int
  defensa               Int
  capacidad             Int
  velocidad             BigInt
  salario               Int
  tipo                  TipoTropa
  requisitos            String[]
  bonusAtaque           String[]
  bonusDefensa          String[]
  bonusContrincante     TropaBonusContrincante[] @relation("Atacante")
  bonusRecibido         TropaBonusContrincante[] @relation("Defensora")
  TropaUsuario          TropaUsuario[]
  TropaSeguridadUsuario TropaSeguridadUsuario[]
  ColaReclutamiento     ColaReclutamiento[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model TroopRequirement {
  troopId            String
  requiredTrainingId String
  requiredLevel      Int

  @@id([troopId, requiredTrainingId])
}

model TropaBonusContrincante {
  id               String             @id @default(cuid())
  tropaAtacanteId  String
  tropaDefensoraId String
  factorPrioridad  Float
  atacante         ConfiguracionTropa @relation("Atacante", fields: [tropaAtacanteId], references: [id], onDelete: Cascade)
  defensora        ConfiguracionTropa @relation("Defensora", fields: [tropaDefensoraId], references: [id], onDelete: Cascade)

  @@unique([tropaAtacanteId, tropaDefensoraId])
}

enum TipoTropa {
  ATAQUE
  DEFENSA
  TRANSPORTE
  ESPIONAJE
  OCUPAR
}

model TropaUsuario {
  propiedadId          String
  configuracionTropaId String
  cantidad             Int
  propiedad            Propiedad          @relation(fields: [propiedadId], references: [id], onDelete: Cascade)
  configuracionTropa   ConfiguracionTropa @relation(fields: [configuracionTropaId], references: [id])

  @@id([propiedadId, configuracionTropaId])
}

model TropaSeguridadUsuario {
  propiedadId          String
  configuracionTropaId String
  cantidad             Int
  propiedad            Propiedad          @relation(fields: [propiedadId], references: [id], onDelete: Cascade)
  configuracionTropa   ConfiguracionTropa @relation(fields: [configuracionTropaId], references: [id])

  @@id([propiedadId, configuracionTropaId])
}

model ColaConstruccion {
  id                String    @id @default(cuid())
  propiedadId       String
  habitacionId      String
  nivelDestino      Int
  duracion          Int
  fechaInicio       DateTime?
  fechaFinalizacion DateTime?
  createdAt         DateTime  @default(now())
  propiedad         Propiedad @relation(fields: [propiedadId], references: [id], onDelete: Cascade)
}

model ColaReclutamiento {
  id                String             @id @default(cuid())
  propiedadId       String             @unique
  tropaId           String
  cantidad          Int
  fechaInicio       DateTime
  fechaFinalizacion DateTime
  propiedad         Propiedad          @relation(fields: [propiedadId], references: [id], onDelete: Cascade)
  tropaConfig       ConfiguracionTropa @relation(fields: [tropaId], references: [id])
}

model ColaEntrenamiento {
  id                String                     @id @default(cuid())
  userId            String
  user              User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  propiedadId       String                     @unique
  propiedad         Propiedad                  @relation(fields: [propiedadId], references: [id], onDelete: Cascade)
  entrenamientoId   String
  entrenamiento     ConfiguracionEntrenamiento @relation(fields: [entrenamientoId], references: [id])
  nivelDestino      Int
  fechaInicio       DateTime
  fechaFinalizacion DateTime
}

model ColaMisiones {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  propiedadOrigenId String
  propiedadOrigen   Propiedad       @relation(fields: [propiedadOrigenId], references: [id], onDelete: Cascade)
  tipoMision        String
  tropas            Json
  recursos          Json?
  origenCiudad      Int
  origenBarrio      Int
  origenEdificio    Int
  destinoCiudad     Int
  destinoBarrio     Int
  destinoEdificio   Int
  fechaInicio       DateTime
  fechaLlegada      DateTime
  fechaRegreso      DateTime?
  duracionViaje     Int
  velocidadFlota    String
  createdAt         DateTime        @default(now())
  incomingAttack    IncomingAttack?
}

model IncomingAttack {
  id             String       @id @default(cuid())
  defenderId     String
  defender       User         @relation("DefenderRelations", fields: [defenderId], references: [id], onDelete: Cascade)
  attackerId     String
  attacker       User         @relation("AttackerRelations", fields: [attackerId], references: [id], onDelete: Cascade)
  attackerName   String
  targetProperty String
  totalTroops    Int
  arrivalTime    DateTime
  missionId      String       @unique
  mission        ColaMisiones @relation(fields: [missionId], references: [id], onDelete: Cascade)
}

model Family {
  id            String               @id @default(cuid())
  name          String               @unique
  tag           String               @unique
  description   String?
  avatarUrl     String?
  members       FamilyMember[]
  invitations   FamilyInvitation[]
  announcements FamilyAnnouncement[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model FamilyMember {
  userId   String     @unique
  familyId String
  role     FamilyRole @default(MEMBER)
  joinedAt DateTime   @default(now())
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  family   Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@id([userId, familyId])
}

enum FamilyRole {
  LEADER
  CO_LEADER
  MEMBER
}

model FamilyInvitation {
  id        String           @id @default(cuid())
  familyId  String
  userId    String
  type      InvitationType
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  family    Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([familyId, userId])
}

enum InvitationType {
  INVITATION // Family invites user
  REQUEST // User requests to join
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model FamilyAnnouncement {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  familyId  String
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Message {
  id                String           @id @default(cuid())
  senderId          String?
  sender            User?            @relation("SentMessages", fields: [senderId], references: [id], onDelete: SetNull)
  recipientId       String
  recipient         User             @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  subject           String
  content           String
  isRead            Boolean          @default(false)
  category          MessageCategory  @default(JUGADOR)
  createdAt         DateTime         @default(now())
  battleReportId    String?
  battleReport      BattleReport?    @relation(fields: [battleReportId], references: [id], onDelete: SetNull)
  espionageReportId String?
  espionageReport   EspionageReport? @relation(fields: [espionageReportId], references: [id], onDelete: SetNull)
}

enum MessageCategory {
  JUGADOR
  BATALLA
  ESPIONAJE
  CONSTRUCCION
  SISTEMA
}

model BattleReport {
  id         String    @id @default(cuid())
  attackerId String
  attacker   User      @relation("AttackerReports", fields: [attackerId], references: [id], onDelete: Cascade)
  defenderId String
  defender   User      @relation("DefenderReports", fields: [defenderId], references: [id], onDelete: Cascade)
  winner     String
  details    Json
  ciudad     Int
  barrio     Int
  edificio   Int
  createdAt  DateTime  @default(now())
  messages   Message[] // Cambiado de uno a muchos
}

model EspionageReport {
  id         String    @id @default(cuid())
  attackerId String
  attacker   User      @relation("AttackerEspionageReports", fields: [attackerId], references: [id], onDelete: Cascade)
  defenderId String
  defender   User      @relation("DefenderEspionageReports", fields: [defenderId], references: [id], onDelete: Cascade)
  details    Json
  createdAt  DateTime  @default(now())
  messages   Message[] // Cambiado de uno a muchos
}

    